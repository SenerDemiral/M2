// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: protos/rest.proto
// </auto-generated>
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace Rest {

  /// <summary>Holder for reflection information generated from protos/rest.proto</summary>
  public static partial class RestReflection {

    #region Descriptor
    /// <summary>File descriptor for protos/rest.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static RestReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "ChFwcm90b3MvcmVzdC5wcm90bxIEcmVzdBoeZ29vZ2xlL3Byb3RvYnVmL3dy",
            "YXBwZXJzLnByb3RvIhUKB1BLcHJveHkSCgoCUEsYASABKAQiFgoJUXJ5UHBy",
            "b3h5EgkKAVAYASABKAQiKAoIUXJ5UHJveHkSDQoFcXVlcnkYASABKAkSDQoF",
            "cGFyYW0YAiABKAkidgoLTmVUcmVlUHJveHkSCQoBTBgBIAEoBRIJCgFQGAIg",
            "ASgFEgkKAUsYAyABKAUSCQoBQRgEIAEoCRIJCgFOGAUgASgEEgkKAU0YBiAB",
            "KAESCgoCTVQYByABKAESCQoBRhgIIAEoARIOCgZIYXNLaWQYCSABKAgiUwoS",
            "S2lkc0luUGFyZW50c1Byb3h5EgsKA0tObxgBIAEoBBILCgNQTm8YAiABKAQS",
            "CwoDS0FkGAMgASgJEgsKA1BBZBgEIAEoCRIJCgFNGAUgASgBIlQKE05vZGVz",
            "SW5QYXJlbnRzUHJveHkSCwoDS05vGAEgASgEEgsKA1BObxgCIAEoBBILCgNL",
            "QWQYAyABKAkSCwoDUEFkGAQgASgJEgkKAU0YBSABKAEikAEKCVRibGFQcm94",
            "eRIRCglyb3dfc3RhdGUYASABKAkSDwoHcm93X2VychgCIAEoCRIOCgZyb3df",
            "cGsYAyABKAQSDgoGZmxkU3RyGAQgASgJEg4KBmZsZEludBgFIAEoBRIOCgZm",
            "bGREYmwYBiABKAESDgoGZmxkRGNtGAcgASgBEg8KB2ZsZERhdGUYCCABKAMi",
            "MgoHQmFzZVJvdxINCgVTdGF0ZRgBIAEoCRILCgNFcnIYAiABKAkSCwoDVXNy",
            "GAMgASgEIrEBCghBSFBwcm94eRIOCgZSb3dTdGUYASABKAkSDgoGUm93RXJy",
            "GAIgASgJEg4KBlJvd1VzchgDIAEoBBIOCgZSb3dLZXkYBCABKAQSCQoBUBgF",
            "IAEoBBIKCgJObxgGIAEoCRIKCgJBZBgHIAEoCRINCgVIc3BObxgIIAEoCRIL",
            "CgNCcmMYCSABKAESCwoDQWxjGAogASgBEgsKA0lzVxgLIAEoCBIMCgRIYXNI",
            "GAwgASgIIrcBCghBRkJwcm94eRIOCgZSb3dTdGUYASABKAkSDgoGUm93RXJy",
            "GAIgASgJEg4KBlJvd1VzchgDIAEoBBIOCgZSb3dLZXkYBCABKAQSCwoDVHJo",
            "GAUgASgDEgsKA1RVUhgGIAEoBBILCgNEcm0YByABKAkSKgoESW5mbxgIIAEo",
            "CzIcLmdvb2dsZS5wcm90b2J1Zi5TdHJpbmdWYWx1ZRILCgNCcmMYCSABKAES",
            "CwoDQWxjGAogASgBIsYBCghBRkRwcm94eRIOCgZSb3dTdGUYASABKAkSDgoG",
            "Um93RXJyGAIgASgJEg4KBlJvd1VzchgDIAEoBBIOCgZSb3dLZXkYBCABKAQS",
            "CwoDQUZCGAUgASgEEgsKA0FIUBgGIAEoBBIqCgRJbmZvGAcgASgLMhwuZ29v",
            "Z2xlLnByb3RvYnVmLlN0cmluZ1ZhbHVlEgsKA1R1dBgIIAEoARILCgNEVlQY",
            "CSABKAQSCwoDS3VyGAogASgCEg0KBVR1dFRMGAsgASgBIt0BCghBQkJwcm94",
            "eRIOCgZSb3dTdGUYASABKAkSDgoGUm93RXJyGAIgASgJEg4KBlJvd1VzchgD",
            "IAEoBBIOCgZSb3dLZXkYBCABKAQSCwoDVHJoGAUgASgDEgsKA1RVUhgGIAEo",
            "BBILCgNEcm0YByABKAkSCwoDS0ZUGAggASgEEgoKAkJBGAkgASgJEgsKA0RW",
            "VBgKIAEoBBILCgNLdXIYCyABKAISCwoDVHV0GAwgASgBEioKBEluZm8YDSAB",
            "KAsyHC5nb29nbGUucHJvdG9idWYuU3RyaW5nVmFsdWUi3gEKCEFCRHByb3h5",
            "Eg4KBlJvd1N0ZRgBIAEoCRIOCgZSb3dFcnIYAiABKAkSDgoGUm93VXNyGAMg",
            "ASgEEg4KBlJvd0tleRgEIAEoBBILCgNBQkIYBSABKAQSCwoDTk5OGAYgASgE",
            "EgsKA0FIUBgHIAEoBBILCgNGeXQYCCABKAESCwoDRFZUGAkgASgEEgsKA01p",
            "axgKIAEoARILCgNLdXIYCyABKAISCwoDS0RZGAwgASgFEioKBEluZm8YDSAB",
            "KAsyHC5nb29nbGUucHJvdG9idWYuU3RyaW5nVmFsdWUibQoIWEdUcHJveHkS",
            "DgoGUm93U3RlGAEgASgJEg4KBlJvd0VychgCIAEoCRIOCgZSb3dVc3IYAyAB",
            "KAQSDgoGUm93S2V5GAQgASgEEgkKAVAYBSABKAQSCgoCS2QYBiABKAkSCgoC",
            "QWQYByABKAkifgoIWERLcHJveHkSDgoGUm93U3RlGAEgASgJEg4KBlJvd0Vy",
            "chgCIAEoCRIOCgZSb3dVc3IYAyABKAQSDgoGUm93S2V5GAQgASgEEgsKA1Ry",
            "aBgFIAEoAxILCgNEVlQYBiABKAQSCwoDS3VyGAcgASgCEgsKA0R2ehgIIAEo",
            "CSJjCghLS0twcm94eRIOCgZSb3dTdGUYASABKAkSDgoGUm93RXJyGAIgASgJ",
            "Eg4KBlJvd1VzchgDIAEoBBIOCgZSb3dLZXkYBCABKAQSCgoCQWQYBSABKAkS",
            "CwoDVHVyGAYgASgJIsgCCghLRlRwcm94eRIOCgZSb3dTdGUYASABKAkSDgoG",
            "Um93RXJyGAIgASgJEg4KBlJvd1VzchgDIAEoBBIOCgZSb3dLZXkYBCABKAQS",
            "KAoCQWQYBSABKAsyHC5nb29nbGUucHJvdG9idWYuU3RyaW5nVmFsdWUSKQoD",
            "VGVsGAYgASgLMhwuZ29vZ2xlLnByb3RvYnVmLlN0cmluZ1ZhbHVlEisKBUFk",
            "cmVzGAcgASgLMhwuZ29vZ2xlLnByb3RvYnVmLlN0cmluZ1ZhbHVlEi0KB1Nv",
            "cnVtbHUYCCABKAsyHC5nb29nbGUucHJvdG9idWYuU3RyaW5nVmFsdWUSKwoF",
            "VnJnRE4YCSABKAsyHC5nb29nbGUucHJvdG9idWYuU3RyaW5nVmFsdWUSDgoG",
            "QUhQYnJjGAogASgEEg4KBkFIUGFsYxgLIAEoBCJwCghVVVVwcm94eRIOCgZS",
            "b3dTdGUYASABKAkSDgoGUm93RXJyGAIgASgJEg4KBlJvd1VzchgDIAEoBBIO",
            "CgZSb3dLZXkYBCABKAQSCwoDVVlUGAUgASgEEgoKAkFkGAYgASgJEgsKA1B3",
            "ZBgHIAEoCSJWCghVWVRwcm94eRIOCgZSb3dTdGUYASABKAkSDgoGUm93RXJy",
            "GAIgASgJEg4KBlJvd1VzchgDIAEoBBIOCgZSb3dLZXkYBCABKAQSCgoCQWQY",
            "BSABKAkiYAoIVVlIcHJveHkSDgoGUm93U3RlGAEgASgJEg4KBlJvd0VychgC",
            "IAEoCRIOCgZSb3dVc3IYAyABKAQSDgoGUm93S2V5GAQgASgEEgkKAVAYBSAB",
            "KAQSCQoBSxgGIAEoBCK4AQoITk5OcHJveHkSDgoGUm93U3RlGAEgASgJEg4K",
            "BlJvd0VychgCIAEoCRIOCgZSb3dVc3IYAyABKAQSDgoGUm93S2V5GAQgASgE",
            "EigKAktkGAUgASgLMhwuZ29vZ2xlLnByb3RvYnVmLlN0cmluZ1ZhbHVlEigK",
            "AkFkGAYgASgLMhwuZ29vZ2xlLnByb3RvYnVmLlN0cmluZ1ZhbHVlEgsKA0JS",
            "TRgHIAEoBBILCgNGeXQYCCABKAEiqwEKClRvS1BUcHJveHkSDgoGUm93U3Rl",
            "GAEgASgJEg4KBlJvd0VychgCIAEoCRIOCgZSb3dVc3IYAyABKAQSDgoGUm93",
            "S2V5GAQgASgEEgkKAVAYBSABKAQSKAoCS2QYBiABKAsyHC5nb29nbGUucHJv",
            "dG9idWYuU3RyaW5nVmFsdWUSKAoCQWQYByABKAsyHC5nb29nbGUucHJvdG9i",
            "dWYuU3RyaW5nVmFsdWUiqwEKClRvS0RUcHJveHkSDgoGUm93U3RlGAEgASgJ",
            "Eg4KBlJvd0VychgCIAEoCRIOCgZSb3dVc3IYAyABKAQSDgoGUm93S2V5GAQg",
            "ASgEEgkKAVAYBSABKAQSKAoCS2QYBiABKAsyHC5nb29nbGUucHJvdG9idWYu",
            "U3RyaW5nVmFsdWUSKAoCQWQYByABKAsyHC5nb29nbGUucHJvdG9idWYuU3Ry",
            "aW5nVmFsdWUy8g0KBUNSVURzEi8KCFRibGFGaWxsEg4ucmVzdC5RcnlQcm94",
            "eRoPLnJlc3QuVGJsYVByb3h5IgAwARIwCgpUYmxhVXBkYXRlEg8ucmVzdC5U",
            "YmxhUHJveHkaDy5yZXN0LlRibGFQcm94eSIAEi0KB0FIUGZpbGwSDi5yZXN0",
            "LlFyeVByb3h5Gg4ucmVzdC5BSFBwcm94eSIAMAESLQoJQUhQdXBkYXRlEg4u",
            "cmVzdC5BSFBwcm94eRoOLnJlc3QuQUhQcHJveHkiABItCgdBRkJmaWxsEg4u",
            "cmVzdC5RcnlQcm94eRoOLnJlc3QuQUZCcHJveHkiADABEi0KCUFGQnVwZGF0",
            "ZRIOLnJlc3QuQUZCcHJveHkaDi5yZXN0LkFGQnByb3h5IgASLQoKQUZCZ2V0",
            "QnlQSxINLnJlc3QuUEtwcm94eRoOLnJlc3QuQUZCcHJveHkiABItCgdBRkRm",
            "aWxsEg4ucmVzdC5RcnlQcm94eRoOLnJlc3QuQUZEcHJveHkiADABEi0KCUFG",
            "RHVwZGF0ZRIOLnJlc3QuQUZEcHJveHkaDi5yZXN0LkFGRHByb3h5IgASLQoH",
            "QUJCZmlsbBIOLnJlc3QuUXJ5UHJveHkaDi5yZXN0LkFCQnByb3h5IgAwARIt",
            "CglBQkJ1cGRhdGUSDi5yZXN0LkFCQnByb3h5Gg4ucmVzdC5BQkJwcm94eSIA",
            "Ei0KB0FCRGZpbGwSDi5yZXN0LlFyeVByb3h5Gg4ucmVzdC5BQkRwcm94eSIA",
            "MAESLQoJQUJEdXBkYXRlEg4ucmVzdC5BQkRwcm94eRoOLnJlc3QuQUJEcHJv",
            "eHkiABItCgdYR1RmaWxsEg4ucmVzdC5RcnlQcm94eRoOLnJlc3QuWEdUcHJv",
            "eHkiADABEi0KCVhHVHVwZGF0ZRIOLnJlc3QuWEdUcHJveHkaDi5yZXN0LlhH",
            "VHByb3h5IgASLQoHWERLZmlsbBIOLnJlc3QuUXJ5UHJveHkaDi5yZXN0LlhE",
            "S3Byb3h5IgAwARItCglYREt1cGRhdGUSDi5yZXN0LlhES3Byb3h5Gg4ucmVz",
            "dC5YREtwcm94eSIAEi0KB0tLS2ZpbGwSDi5yZXN0LlFyeVByb3h5Gg4ucmVz",
            "dC5LS0twcm94eSIAMAESLQoHS0ZUZmlsbBIOLnJlc3QuUXJ5UHJveHkaDi5y",
            "ZXN0LktGVHByb3h5IgAwARItCglLRlR1cGRhdGUSDi5yZXN0LktGVHByb3h5",
            "Gg4ucmVzdC5LRlRwcm94eSIAEi0KB1VVVWZpbGwSDi5yZXN0LlFyeVByb3h5",
            "Gg4ucmVzdC5VVVVwcm94eSIAMAESLQoJVVVVdXBkYXRlEg4ucmVzdC5VVVVw",
            "cm94eRoOLnJlc3QuVVVVcHJveHkiABItCgdVWVRmaWxsEg4ucmVzdC5RcnlQ",
            "cm94eRoOLnJlc3QuVVlUcHJveHkiADABEi0KCVVZVHVwZGF0ZRIOLnJlc3Qu",
            "VVlUcHJveHkaDi5yZXN0LlVZVHByb3h5IgASLQoHVVlIZmlsbBIOLnJlc3Qu",
            "UXJ5UHJveHkaDi5yZXN0LlVZSHByb3h5IgAwARItCglVWUh1cGRhdGUSDi5y",
            "ZXN0LlVZSHByb3h5Gg4ucmVzdC5VWUhwcm94eSIAEi0KB05OTmZpbGwSDi5y",
            "ZXN0LlFyeVByb3h5Gg4ucmVzdC5OTk5wcm94eSIAMAESLQoJTk5OdXBkYXRl",
            "Eg4ucmVzdC5OTk5wcm94eRoOLnJlc3QuTk5OcHJveHkiABIxCghOZVVwRmls",
            "bBIOLnJlc3QuUXJ5UHJveHkaES5yZXN0Lk5lVHJlZVByb3h5IgAwARIzCgpO",
            "ZURvd25GaWxsEg4ucmVzdC5RcnlQcm94eRoRLnJlc3QuTmVUcmVlUHJveHki",
            "ADABEkEKEUtpZHNJblBhcmVudHNGaWxsEg4ucmVzdC5RcnlQcm94eRoYLnJl",
            "c3QuS2lkc0luUGFyZW50c1Byb3h5IgAwARJDChJOb2Rlc0luUGFyZW50c0Zp",
            "bGwSDi5yZXN0LlFyeVByb3h5GhkucmVzdC5Ob2Rlc0luUGFyZW50c1Byb3h5",
            "IgAwARIyCglUb0tQVGZpbGwSDy5yZXN0LlFyeVBwcm94eRoQLnJlc3QuVG9L",
            "UFRwcm94eSIAMAESMwoLVG9LUFR1cGRhdGUSEC5yZXN0LlRvS1BUcHJveHka",
            "EC5yZXN0LlRvS1BUcHJveHkiABIyCglUb0tEVGZpbGwSDy5yZXN0LlFyeVBw",
            "cm94eRoQLnJlc3QuVG9LRFRwcm94eSIAMAESMwoLVG9LRFR1cGRhdGUSEC5y",
            "ZXN0LlRvS0RUcHJveHkaEC5yZXN0LlRvS0RUcHJveHkiAGIGcHJvdG8z"));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { global::Google.Protobuf.WellKnownTypes.WrappersReflection.Descriptor, },
          new pbr::GeneratedClrTypeInfo(null, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::Rest.PKproxy), global::Rest.PKproxy.Parser, new[]{ "PK" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Rest.QryPproxy), global::Rest.QryPproxy.Parser, new[]{ "P" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Rest.QryProxy), global::Rest.QryProxy.Parser, new[]{ "Query", "Param" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Rest.NeTreeProxy), global::Rest.NeTreeProxy.Parser, new[]{ "L", "P", "K", "A", "N", "M", "MT", "F", "HasKid" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Rest.KidsInParentsProxy), global::Rest.KidsInParentsProxy.Parser, new[]{ "KNo", "PNo", "KAd", "PAd", "M" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Rest.NodesInParentsProxy), global::Rest.NodesInParentsProxy.Parser, new[]{ "KNo", "PNo", "KAd", "PAd", "M" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Rest.TblaProxy), global::Rest.TblaProxy.Parser, new[]{ "RowState", "RowErr", "RowPk", "FldStr", "FldInt", "FldDbl", "FldDcm", "FldDate" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Rest.BaseRow), global::Rest.BaseRow.Parser, new[]{ "State", "Err", "Usr" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Rest.AHPproxy), global::Rest.AHPproxy.Parser, new[]{ "RowSte", "RowErr", "RowUsr", "RowKey", "P", "No", "Ad", "HspNo", "Brc", "Alc", "IsW", "HasH" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Rest.AFBproxy), global::Rest.AFBproxy.Parser, new[]{ "RowSte", "RowErr", "RowUsr", "RowKey", "Trh", "TUR", "Drm", "Info", "Brc", "Alc" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Rest.AFDproxy), global::Rest.AFDproxy.Parser, new[]{ "RowSte", "RowErr", "RowUsr", "RowKey", "AFB", "AHP", "Info", "Tut", "DVT", "Kur", "TutTL" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Rest.ABBproxy), global::Rest.ABBproxy.Parser, new[]{ "RowSte", "RowErr", "RowUsr", "RowKey", "Trh", "TUR", "Drm", "KFT", "BA", "DVT", "Kur", "Tut", "Info" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Rest.ABDproxy), global::Rest.ABDproxy.Parser, new[]{ "RowSte", "RowErr", "RowUsr", "RowKey", "ABB", "NNN", "AHP", "Fyt", "DVT", "Mik", "Kur", "KDY", "Info" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Rest.XGTproxy), global::Rest.XGTproxy.Parser, new[]{ "RowSte", "RowErr", "RowUsr", "RowKey", "P", "Kd", "Ad" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Rest.XDKproxy), global::Rest.XDKproxy.Parser, new[]{ "RowSte", "RowErr", "RowUsr", "RowKey", "Trh", "DVT", "Kur", "Dvz" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Rest.KKKproxy), global::Rest.KKKproxy.Parser, new[]{ "RowSte", "RowErr", "RowUsr", "RowKey", "Ad", "Tur" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Rest.KFTproxy), global::Rest.KFTproxy.Parser, new[]{ "RowSte", "RowErr", "RowUsr", "RowKey", "Ad", "Tel", "Adres", "Sorumlu", "VrgDN", "AHPbrc", "AHPalc" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Rest.UUUproxy), global::Rest.UUUproxy.Parser, new[]{ "RowSte", "RowErr", "RowUsr", "RowKey", "UYT", "Ad", "Pwd" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Rest.UYTproxy), global::Rest.UYTproxy.Parser, new[]{ "RowSte", "RowErr", "RowUsr", "RowKey", "Ad" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Rest.UYHproxy), global::Rest.UYHproxy.Parser, new[]{ "RowSte", "RowErr", "RowUsr", "RowKey", "P", "K" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Rest.NNNproxy), global::Rest.NNNproxy.Parser, new[]{ "RowSte", "RowErr", "RowUsr", "RowKey", "Kd", "Ad", "BRM", "Fyt" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Rest.ToKPTproxy), global::Rest.ToKPTproxy.Parser, new[]{ "RowSte", "RowErr", "RowUsr", "RowKey", "P", "Kd", "Ad" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Rest.ToKDTproxy), global::Rest.ToKDTproxy.Parser, new[]{ "RowSte", "RowErr", "RowUsr", "RowKey", "P", "Kd", "Ad" }, null, null, null)
          }));
    }
    #endregion

  }
  #region Messages
  public sealed partial class PKproxy : pb::IMessage<PKproxy> {
    private static readonly pb::MessageParser<PKproxy> _parser = new pb::MessageParser<PKproxy>(() => new PKproxy());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<PKproxy> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Rest.RestReflection.Descriptor.MessageTypes[0]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PKproxy() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PKproxy(PKproxy other) : this() {
      pK_ = other.pK_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PKproxy Clone() {
      return new PKproxy(this);
    }

    /// <summary>Field number for the "PK" field.</summary>
    public const int PKFieldNumber = 1;
    private ulong pK_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong PK {
      get { return pK_; }
      set {
        pK_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as PKproxy);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(PKproxy other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (PK != other.PK) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (PK != 0UL) hash ^= PK.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (PK != 0UL) {
        output.WriteRawTag(8);
        output.WriteUInt64(PK);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (PK != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(PK);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(PKproxy other) {
      if (other == null) {
        return;
      }
      if (other.PK != 0UL) {
        PK = other.PK;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            PK = input.ReadUInt64();
            break;
          }
        }
      }
    }

  }

  public sealed partial class QryPproxy : pb::IMessage<QryPproxy> {
    private static readonly pb::MessageParser<QryPproxy> _parser = new pb::MessageParser<QryPproxy>(() => new QryPproxy());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<QryPproxy> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Rest.RestReflection.Descriptor.MessageTypes[1]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public QryPproxy() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public QryPproxy(QryPproxy other) : this() {
      p_ = other.p_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public QryPproxy Clone() {
      return new QryPproxy(this);
    }

    /// <summary>Field number for the "P" field.</summary>
    public const int PFieldNumber = 1;
    private ulong p_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong P {
      get { return p_; }
      set {
        p_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as QryPproxy);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(QryPproxy other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (P != other.P) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (P != 0UL) hash ^= P.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (P != 0UL) {
        output.WriteRawTag(8);
        output.WriteUInt64(P);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (P != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(P);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(QryPproxy other) {
      if (other == null) {
        return;
      }
      if (other.P != 0UL) {
        P = other.P;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            P = input.ReadUInt64();
            break;
          }
        }
      }
    }

  }

  public sealed partial class QryProxy : pb::IMessage<QryProxy> {
    private static readonly pb::MessageParser<QryProxy> _parser = new pb::MessageParser<QryProxy>(() => new QryProxy());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<QryProxy> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Rest.RestReflection.Descriptor.MessageTypes[2]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public QryProxy() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public QryProxy(QryProxy other) : this() {
      query_ = other.query_;
      param_ = other.param_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public QryProxy Clone() {
      return new QryProxy(this);
    }

    /// <summary>Field number for the "query" field.</summary>
    public const int QueryFieldNumber = 1;
    private string query_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Query {
      get { return query_; }
      set {
        query_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "param" field.</summary>
    public const int ParamFieldNumber = 2;
    private string param_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Param {
      get { return param_; }
      set {
        param_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as QryProxy);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(QryProxy other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Query != other.Query) return false;
      if (Param != other.Param) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Query.Length != 0) hash ^= Query.GetHashCode();
      if (Param.Length != 0) hash ^= Param.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Query.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Query);
      }
      if (Param.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(Param);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Query.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Query);
      }
      if (Param.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Param);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(QryProxy other) {
      if (other == null) {
        return;
      }
      if (other.Query.Length != 0) {
        Query = other.Query;
      }
      if (other.Param.Length != 0) {
        Param = other.Param;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            Query = input.ReadString();
            break;
          }
          case 18: {
            Param = input.ReadString();
            break;
          }
        }
      }
    }

  }

  public sealed partial class NeTreeProxy : pb::IMessage<NeTreeProxy> {
    private static readonly pb::MessageParser<NeTreeProxy> _parser = new pb::MessageParser<NeTreeProxy>(() => new NeTreeProxy());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<NeTreeProxy> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Rest.RestReflection.Descriptor.MessageTypes[3]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public NeTreeProxy() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public NeTreeProxy(NeTreeProxy other) : this() {
      l_ = other.l_;
      p_ = other.p_;
      k_ = other.k_;
      a_ = other.a_;
      n_ = other.n_;
      m_ = other.m_;
      mT_ = other.mT_;
      f_ = other.f_;
      hasKid_ = other.hasKid_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public NeTreeProxy Clone() {
      return new NeTreeProxy(this);
    }

    /// <summary>Field number for the "L" field.</summary>
    public const int LFieldNumber = 1;
    private int l_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int L {
      get { return l_; }
      set {
        l_ = value;
      }
    }

    /// <summary>Field number for the "P" field.</summary>
    public const int PFieldNumber = 2;
    private int p_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int P {
      get { return p_; }
      set {
        p_ = value;
      }
    }

    /// <summary>Field number for the "K" field.</summary>
    public const int KFieldNumber = 3;
    private int k_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int K {
      get { return k_; }
      set {
        k_ = value;
      }
    }

    /// <summary>Field number for the "A" field.</summary>
    public const int AFieldNumber = 4;
    private string a_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string A {
      get { return a_; }
      set {
        a_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "N" field.</summary>
    public const int NFieldNumber = 5;
    private ulong n_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong N {
      get { return n_; }
      set {
        n_ = value;
      }
    }

    /// <summary>Field number for the "M" field.</summary>
    public const int MFieldNumber = 6;
    private double m_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double M {
      get { return m_; }
      set {
        m_ = value;
      }
    }

    /// <summary>Field number for the "MT" field.</summary>
    public const int MTFieldNumber = 7;
    private double mT_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double MT {
      get { return mT_; }
      set {
        mT_ = value;
      }
    }

    /// <summary>Field number for the "F" field.</summary>
    public const int FFieldNumber = 8;
    private double f_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double F {
      get { return f_; }
      set {
        f_ = value;
      }
    }

    /// <summary>Field number for the "HasKid" field.</summary>
    public const int HasKidFieldNumber = 9;
    private bool hasKid_;
    /// <summary>
    /// HasKid
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasKid {
      get { return hasKid_; }
      set {
        hasKid_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as NeTreeProxy);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(NeTreeProxy other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (L != other.L) return false;
      if (P != other.P) return false;
      if (K != other.K) return false;
      if (A != other.A) return false;
      if (N != other.N) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(M, other.M)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(MT, other.MT)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(F, other.F)) return false;
      if (HasKid != other.HasKid) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (L != 0) hash ^= L.GetHashCode();
      if (P != 0) hash ^= P.GetHashCode();
      if (K != 0) hash ^= K.GetHashCode();
      if (A.Length != 0) hash ^= A.GetHashCode();
      if (N != 0UL) hash ^= N.GetHashCode();
      if (M != 0D) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(M);
      if (MT != 0D) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(MT);
      if (F != 0D) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(F);
      if (HasKid != false) hash ^= HasKid.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (L != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(L);
      }
      if (P != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(P);
      }
      if (K != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(K);
      }
      if (A.Length != 0) {
        output.WriteRawTag(34);
        output.WriteString(A);
      }
      if (N != 0UL) {
        output.WriteRawTag(40);
        output.WriteUInt64(N);
      }
      if (M != 0D) {
        output.WriteRawTag(49);
        output.WriteDouble(M);
      }
      if (MT != 0D) {
        output.WriteRawTag(57);
        output.WriteDouble(MT);
      }
      if (F != 0D) {
        output.WriteRawTag(65);
        output.WriteDouble(F);
      }
      if (HasKid != false) {
        output.WriteRawTag(72);
        output.WriteBool(HasKid);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (L != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(L);
      }
      if (P != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(P);
      }
      if (K != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(K);
      }
      if (A.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(A);
      }
      if (N != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(N);
      }
      if (M != 0D) {
        size += 1 + 8;
      }
      if (MT != 0D) {
        size += 1 + 8;
      }
      if (F != 0D) {
        size += 1 + 8;
      }
      if (HasKid != false) {
        size += 1 + 1;
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(NeTreeProxy other) {
      if (other == null) {
        return;
      }
      if (other.L != 0) {
        L = other.L;
      }
      if (other.P != 0) {
        P = other.P;
      }
      if (other.K != 0) {
        K = other.K;
      }
      if (other.A.Length != 0) {
        A = other.A;
      }
      if (other.N != 0UL) {
        N = other.N;
      }
      if (other.M != 0D) {
        M = other.M;
      }
      if (other.MT != 0D) {
        MT = other.MT;
      }
      if (other.F != 0D) {
        F = other.F;
      }
      if (other.HasKid != false) {
        HasKid = other.HasKid;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            L = input.ReadInt32();
            break;
          }
          case 16: {
            P = input.ReadInt32();
            break;
          }
          case 24: {
            K = input.ReadInt32();
            break;
          }
          case 34: {
            A = input.ReadString();
            break;
          }
          case 40: {
            N = input.ReadUInt64();
            break;
          }
          case 49: {
            M = input.ReadDouble();
            break;
          }
          case 57: {
            MT = input.ReadDouble();
            break;
          }
          case 65: {
            F = input.ReadDouble();
            break;
          }
          case 72: {
            HasKid = input.ReadBool();
            break;
          }
        }
      }
    }

  }

  public sealed partial class KidsInParentsProxy : pb::IMessage<KidsInParentsProxy> {
    private static readonly pb::MessageParser<KidsInParentsProxy> _parser = new pb::MessageParser<KidsInParentsProxy>(() => new KidsInParentsProxy());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<KidsInParentsProxy> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Rest.RestReflection.Descriptor.MessageTypes[4]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public KidsInParentsProxy() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public KidsInParentsProxy(KidsInParentsProxy other) : this() {
      kNo_ = other.kNo_;
      pNo_ = other.pNo_;
      kAd_ = other.kAd_;
      pAd_ = other.pAd_;
      m_ = other.m_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public KidsInParentsProxy Clone() {
      return new KidsInParentsProxy(this);
    }

    /// <summary>Field number for the "KNo" field.</summary>
    public const int KNoFieldNumber = 1;
    private ulong kNo_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong KNo {
      get { return kNo_; }
      set {
        kNo_ = value;
      }
    }

    /// <summary>Field number for the "PNo" field.</summary>
    public const int PNoFieldNumber = 2;
    private ulong pNo_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong PNo {
      get { return pNo_; }
      set {
        pNo_ = value;
      }
    }

    /// <summary>Field number for the "KAd" field.</summary>
    public const int KAdFieldNumber = 3;
    private string kAd_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string KAd {
      get { return kAd_; }
      set {
        kAd_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "PAd" field.</summary>
    public const int PAdFieldNumber = 4;
    private string pAd_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string PAd {
      get { return pAd_; }
      set {
        pAd_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "M" field.</summary>
    public const int MFieldNumber = 5;
    private double m_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double M {
      get { return m_; }
      set {
        m_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as KidsInParentsProxy);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(KidsInParentsProxy other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (KNo != other.KNo) return false;
      if (PNo != other.PNo) return false;
      if (KAd != other.KAd) return false;
      if (PAd != other.PAd) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(M, other.M)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (KNo != 0UL) hash ^= KNo.GetHashCode();
      if (PNo != 0UL) hash ^= PNo.GetHashCode();
      if (KAd.Length != 0) hash ^= KAd.GetHashCode();
      if (PAd.Length != 0) hash ^= PAd.GetHashCode();
      if (M != 0D) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(M);
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (KNo != 0UL) {
        output.WriteRawTag(8);
        output.WriteUInt64(KNo);
      }
      if (PNo != 0UL) {
        output.WriteRawTag(16);
        output.WriteUInt64(PNo);
      }
      if (KAd.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(KAd);
      }
      if (PAd.Length != 0) {
        output.WriteRawTag(34);
        output.WriteString(PAd);
      }
      if (M != 0D) {
        output.WriteRawTag(41);
        output.WriteDouble(M);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (KNo != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(KNo);
      }
      if (PNo != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(PNo);
      }
      if (KAd.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(KAd);
      }
      if (PAd.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(PAd);
      }
      if (M != 0D) {
        size += 1 + 8;
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(KidsInParentsProxy other) {
      if (other == null) {
        return;
      }
      if (other.KNo != 0UL) {
        KNo = other.KNo;
      }
      if (other.PNo != 0UL) {
        PNo = other.PNo;
      }
      if (other.KAd.Length != 0) {
        KAd = other.KAd;
      }
      if (other.PAd.Length != 0) {
        PAd = other.PAd;
      }
      if (other.M != 0D) {
        M = other.M;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            KNo = input.ReadUInt64();
            break;
          }
          case 16: {
            PNo = input.ReadUInt64();
            break;
          }
          case 26: {
            KAd = input.ReadString();
            break;
          }
          case 34: {
            PAd = input.ReadString();
            break;
          }
          case 41: {
            M = input.ReadDouble();
            break;
          }
        }
      }
    }

  }

  public sealed partial class NodesInParentsProxy : pb::IMessage<NodesInParentsProxy> {
    private static readonly pb::MessageParser<NodesInParentsProxy> _parser = new pb::MessageParser<NodesInParentsProxy>(() => new NodesInParentsProxy());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<NodesInParentsProxy> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Rest.RestReflection.Descriptor.MessageTypes[5]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public NodesInParentsProxy() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public NodesInParentsProxy(NodesInParentsProxy other) : this() {
      kNo_ = other.kNo_;
      pNo_ = other.pNo_;
      kAd_ = other.kAd_;
      pAd_ = other.pAd_;
      m_ = other.m_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public NodesInParentsProxy Clone() {
      return new NodesInParentsProxy(this);
    }

    /// <summary>Field number for the "KNo" field.</summary>
    public const int KNoFieldNumber = 1;
    private ulong kNo_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong KNo {
      get { return kNo_; }
      set {
        kNo_ = value;
      }
    }

    /// <summary>Field number for the "PNo" field.</summary>
    public const int PNoFieldNumber = 2;
    private ulong pNo_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong PNo {
      get { return pNo_; }
      set {
        pNo_ = value;
      }
    }

    /// <summary>Field number for the "KAd" field.</summary>
    public const int KAdFieldNumber = 3;
    private string kAd_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string KAd {
      get { return kAd_; }
      set {
        kAd_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "PAd" field.</summary>
    public const int PAdFieldNumber = 4;
    private string pAd_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string PAd {
      get { return pAd_; }
      set {
        pAd_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "M" field.</summary>
    public const int MFieldNumber = 5;
    private double m_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double M {
      get { return m_; }
      set {
        m_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as NodesInParentsProxy);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(NodesInParentsProxy other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (KNo != other.KNo) return false;
      if (PNo != other.PNo) return false;
      if (KAd != other.KAd) return false;
      if (PAd != other.PAd) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(M, other.M)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (KNo != 0UL) hash ^= KNo.GetHashCode();
      if (PNo != 0UL) hash ^= PNo.GetHashCode();
      if (KAd.Length != 0) hash ^= KAd.GetHashCode();
      if (PAd.Length != 0) hash ^= PAd.GetHashCode();
      if (M != 0D) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(M);
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (KNo != 0UL) {
        output.WriteRawTag(8);
        output.WriteUInt64(KNo);
      }
      if (PNo != 0UL) {
        output.WriteRawTag(16);
        output.WriteUInt64(PNo);
      }
      if (KAd.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(KAd);
      }
      if (PAd.Length != 0) {
        output.WriteRawTag(34);
        output.WriteString(PAd);
      }
      if (M != 0D) {
        output.WriteRawTag(41);
        output.WriteDouble(M);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (KNo != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(KNo);
      }
      if (PNo != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(PNo);
      }
      if (KAd.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(KAd);
      }
      if (PAd.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(PAd);
      }
      if (M != 0D) {
        size += 1 + 8;
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(NodesInParentsProxy other) {
      if (other == null) {
        return;
      }
      if (other.KNo != 0UL) {
        KNo = other.KNo;
      }
      if (other.PNo != 0UL) {
        PNo = other.PNo;
      }
      if (other.KAd.Length != 0) {
        KAd = other.KAd;
      }
      if (other.PAd.Length != 0) {
        PAd = other.PAd;
      }
      if (other.M != 0D) {
        M = other.M;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            KNo = input.ReadUInt64();
            break;
          }
          case 16: {
            PNo = input.ReadUInt64();
            break;
          }
          case 26: {
            KAd = input.ReadString();
            break;
          }
          case 34: {
            PAd = input.ReadString();
            break;
          }
          case 41: {
            M = input.ReadDouble();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// Deneme
  /// </summary>
  public sealed partial class TblaProxy : pb::IMessage<TblaProxy> {
    private static readonly pb::MessageParser<TblaProxy> _parser = new pb::MessageParser<TblaProxy>(() => new TblaProxy());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<TblaProxy> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Rest.RestReflection.Descriptor.MessageTypes[6]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TblaProxy() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TblaProxy(TblaProxy other) : this() {
      rowState_ = other.rowState_;
      rowErr_ = other.rowErr_;
      rowPk_ = other.rowPk_;
      fldStr_ = other.fldStr_;
      fldInt_ = other.fldInt_;
      fldDbl_ = other.fldDbl_;
      fldDcm_ = other.fldDcm_;
      fldDate_ = other.fldDate_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TblaProxy Clone() {
      return new TblaProxy(this);
    }

    /// <summary>Field number for the "row_state" field.</summary>
    public const int RowStateFieldNumber = 1;
    private string rowState_ = "";
    /// <summary>
    /// Inserted/Modified/Deleted/Unchanged
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string RowState {
      get { return rowState_; }
      set {
        rowState_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "row_err" field.</summary>
    public const int RowErrFieldNumber = 2;
    private string rowErr_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string RowErr {
      get { return rowErr_; }
      set {
        rowErr_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "row_pk" field.</summary>
    public const int RowPkFieldNumber = 3;
    private ulong rowPk_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong RowPk {
      get { return rowPk_; }
      set {
        rowPk_ = value;
      }
    }

    /// <summary>Field number for the "fldStr" field.</summary>
    public const int FldStrFieldNumber = 4;
    private string fldStr_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string FldStr {
      get { return fldStr_; }
      set {
        fldStr_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "fldInt" field.</summary>
    public const int FldIntFieldNumber = 5;
    private int fldInt_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int FldInt {
      get { return fldInt_; }
      set {
        fldInt_ = value;
      }
    }

    /// <summary>Field number for the "fldDbl" field.</summary>
    public const int FldDblFieldNumber = 6;
    private double fldDbl_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double FldDbl {
      get { return fldDbl_; }
      set {
        fldDbl_ = value;
      }
    }

    /// <summary>Field number for the "fldDcm" field.</summary>
    public const int FldDcmFieldNumber = 7;
    private double fldDcm_;
    /// <summary>
    /// String olabilir
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double FldDcm {
      get { return fldDcm_; }
      set {
        fldDcm_ = value;
      }
    }

    /// <summary>Field number for the "fldDate" field.</summary>
    public const int FldDateFieldNumber = 8;
    private long fldDate_;
    /// <summary>
    /// DateTime.Ticks olarak UInt64 de tut. new DateTime(fldDate) => DateTime 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long FldDate {
      get { return fldDate_; }
      set {
        fldDate_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as TblaProxy);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(TblaProxy other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (RowState != other.RowState) return false;
      if (RowErr != other.RowErr) return false;
      if (RowPk != other.RowPk) return false;
      if (FldStr != other.FldStr) return false;
      if (FldInt != other.FldInt) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(FldDbl, other.FldDbl)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(FldDcm, other.FldDcm)) return false;
      if (FldDate != other.FldDate) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (RowState.Length != 0) hash ^= RowState.GetHashCode();
      if (RowErr.Length != 0) hash ^= RowErr.GetHashCode();
      if (RowPk != 0UL) hash ^= RowPk.GetHashCode();
      if (FldStr.Length != 0) hash ^= FldStr.GetHashCode();
      if (FldInt != 0) hash ^= FldInt.GetHashCode();
      if (FldDbl != 0D) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(FldDbl);
      if (FldDcm != 0D) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(FldDcm);
      if (FldDate != 0L) hash ^= FldDate.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (RowState.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(RowState);
      }
      if (RowErr.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(RowErr);
      }
      if (RowPk != 0UL) {
        output.WriteRawTag(24);
        output.WriteUInt64(RowPk);
      }
      if (FldStr.Length != 0) {
        output.WriteRawTag(34);
        output.WriteString(FldStr);
      }
      if (FldInt != 0) {
        output.WriteRawTag(40);
        output.WriteInt32(FldInt);
      }
      if (FldDbl != 0D) {
        output.WriteRawTag(49);
        output.WriteDouble(FldDbl);
      }
      if (FldDcm != 0D) {
        output.WriteRawTag(57);
        output.WriteDouble(FldDcm);
      }
      if (FldDate != 0L) {
        output.WriteRawTag(64);
        output.WriteInt64(FldDate);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (RowState.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(RowState);
      }
      if (RowErr.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(RowErr);
      }
      if (RowPk != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(RowPk);
      }
      if (FldStr.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(FldStr);
      }
      if (FldInt != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(FldInt);
      }
      if (FldDbl != 0D) {
        size += 1 + 8;
      }
      if (FldDcm != 0D) {
        size += 1 + 8;
      }
      if (FldDate != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(FldDate);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(TblaProxy other) {
      if (other == null) {
        return;
      }
      if (other.RowState.Length != 0) {
        RowState = other.RowState;
      }
      if (other.RowErr.Length != 0) {
        RowErr = other.RowErr;
      }
      if (other.RowPk != 0UL) {
        RowPk = other.RowPk;
      }
      if (other.FldStr.Length != 0) {
        FldStr = other.FldStr;
      }
      if (other.FldInt != 0) {
        FldInt = other.FldInt;
      }
      if (other.FldDbl != 0D) {
        FldDbl = other.FldDbl;
      }
      if (other.FldDcm != 0D) {
        FldDcm = other.FldDcm;
      }
      if (other.FldDate != 0L) {
        FldDate = other.FldDate;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            RowState = input.ReadString();
            break;
          }
          case 18: {
            RowErr = input.ReadString();
            break;
          }
          case 24: {
            RowPk = input.ReadUInt64();
            break;
          }
          case 34: {
            FldStr = input.ReadString();
            break;
          }
          case 40: {
            FldInt = input.ReadInt32();
            break;
          }
          case 49: {
            FldDbl = input.ReadDouble();
            break;
          }
          case 57: {
            FldDcm = input.ReadDouble();
            break;
          }
          case 64: {
            FldDate = input.ReadInt64();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// Base
  /// </summary>
  public sealed partial class BaseRow : pb::IMessage<BaseRow> {
    private static readonly pb::MessageParser<BaseRow> _parser = new pb::MessageParser<BaseRow>(() => new BaseRow());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<BaseRow> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Rest.RestReflection.Descriptor.MessageTypes[7]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public BaseRow() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public BaseRow(BaseRow other) : this() {
      state_ = other.state_;
      err_ = other.err_;
      usr_ = other.usr_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public BaseRow Clone() {
      return new BaseRow(this);
    }

    /// <summary>Field number for the "State" field.</summary>
    public const int StateFieldNumber = 1;
    private string state_ = "";
    /// <summary>
    /// Inserted/Modified/Deleted/Unchanged
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string State {
      get { return state_; }
      set {
        state_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "Err" field.</summary>
    public const int ErrFieldNumber = 2;
    private string err_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Err {
      get { return err_; }
      set {
        err_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "Usr" field.</summary>
    public const int UsrFieldNumber = 3;
    private ulong usr_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong Usr {
      get { return usr_; }
      set {
        usr_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as BaseRow);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(BaseRow other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (State != other.State) return false;
      if (Err != other.Err) return false;
      if (Usr != other.Usr) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (State.Length != 0) hash ^= State.GetHashCode();
      if (Err.Length != 0) hash ^= Err.GetHashCode();
      if (Usr != 0UL) hash ^= Usr.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (State.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(State);
      }
      if (Err.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(Err);
      }
      if (Usr != 0UL) {
        output.WriteRawTag(24);
        output.WriteUInt64(Usr);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (State.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(State);
      }
      if (Err.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Err);
      }
      if (Usr != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(Usr);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(BaseRow other) {
      if (other == null) {
        return;
      }
      if (other.State.Length != 0) {
        State = other.State;
      }
      if (other.Err.Length != 0) {
        Err = other.Err;
      }
      if (other.Usr != 0UL) {
        Usr = other.Usr;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            State = input.ReadString();
            break;
          }
          case 18: {
            Err = input.ReadString();
            break;
          }
          case 24: {
            Usr = input.ReadUInt64();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// Muhasebe Hesap Plani
  /// </summary>
  public sealed partial class AHPproxy : pb::IMessage<AHPproxy> {
    private static readonly pb::MessageParser<AHPproxy> _parser = new pb::MessageParser<AHPproxy>(() => new AHPproxy());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<AHPproxy> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Rest.RestReflection.Descriptor.MessageTypes[8]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AHPproxy() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AHPproxy(AHPproxy other) : this() {
      rowSte_ = other.rowSte_;
      rowErr_ = other.rowErr_;
      rowUsr_ = other.rowUsr_;
      rowKey_ = other.rowKey_;
      p_ = other.p_;
      no_ = other.no_;
      ad_ = other.ad_;
      hspNo_ = other.hspNo_;
      brc_ = other.brc_;
      alc_ = other.alc_;
      isW_ = other.isW_;
      hasH_ = other.hasH_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AHPproxy Clone() {
      return new AHPproxy(this);
    }

    /// <summary>Field number for the "RowSte" field.</summary>
    public const int RowSteFieldNumber = 1;
    private string rowSte_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string RowSte {
      get { return rowSte_; }
      set {
        rowSte_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "RowErr" field.</summary>
    public const int RowErrFieldNumber = 2;
    private string rowErr_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string RowErr {
      get { return rowErr_; }
      set {
        rowErr_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "RowUsr" field.</summary>
    public const int RowUsrFieldNumber = 3;
    private ulong rowUsr_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong RowUsr {
      get { return rowUsr_; }
      set {
        rowUsr_ = value;
      }
    }

    /// <summary>Field number for the "RowKey" field.</summary>
    public const int RowKeyFieldNumber = 4;
    private ulong rowKey_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong RowKey {
      get { return rowKey_; }
      set {
        rowKey_ = value;
      }
    }

    /// <summary>Field number for the "P" field.</summary>
    public const int PFieldNumber = 5;
    private ulong p_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong P {
      get { return p_; }
      set {
        p_ = value;
      }
    }

    /// <summary>Field number for the "No" field.</summary>
    public const int NoFieldNumber = 6;
    private string no_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string No {
      get { return no_; }
      set {
        no_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "Ad" field.</summary>
    public const int AdFieldNumber = 7;
    private string ad_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Ad {
      get { return ad_; }
      set {
        ad_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "HspNo" field.</summary>
    public const int HspNoFieldNumber = 8;
    private string hspNo_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string HspNo {
      get { return hspNo_; }
      set {
        hspNo_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "Brc" field.</summary>
    public const int BrcFieldNumber = 9;
    private double brc_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double Brc {
      get { return brc_; }
      set {
        brc_ = value;
      }
    }

    /// <summary>Field number for the "Alc" field.</summary>
    public const int AlcFieldNumber = 10;
    private double alc_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double Alc {
      get { return alc_; }
      set {
        alc_ = value;
      }
    }

    /// <summary>Field number for the "IsW" field.</summary>
    public const int IsWFieldNumber = 11;
    private bool isW_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool IsW {
      get { return isW_; }
      set {
        isW_ = value;
      }
    }

    /// <summary>Field number for the "HasH" field.</summary>
    public const int HasHFieldNumber = 12;
    private bool hasH_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasH {
      get { return hasH_; }
      set {
        hasH_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as AHPproxy);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(AHPproxy other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (RowSte != other.RowSte) return false;
      if (RowErr != other.RowErr) return false;
      if (RowUsr != other.RowUsr) return false;
      if (RowKey != other.RowKey) return false;
      if (P != other.P) return false;
      if (No != other.No) return false;
      if (Ad != other.Ad) return false;
      if (HspNo != other.HspNo) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(Brc, other.Brc)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(Alc, other.Alc)) return false;
      if (IsW != other.IsW) return false;
      if (HasH != other.HasH) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (RowSte.Length != 0) hash ^= RowSte.GetHashCode();
      if (RowErr.Length != 0) hash ^= RowErr.GetHashCode();
      if (RowUsr != 0UL) hash ^= RowUsr.GetHashCode();
      if (RowKey != 0UL) hash ^= RowKey.GetHashCode();
      if (P != 0UL) hash ^= P.GetHashCode();
      if (No.Length != 0) hash ^= No.GetHashCode();
      if (Ad.Length != 0) hash ^= Ad.GetHashCode();
      if (HspNo.Length != 0) hash ^= HspNo.GetHashCode();
      if (Brc != 0D) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(Brc);
      if (Alc != 0D) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(Alc);
      if (IsW != false) hash ^= IsW.GetHashCode();
      if (HasH != false) hash ^= HasH.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (RowSte.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(RowSte);
      }
      if (RowErr.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(RowErr);
      }
      if (RowUsr != 0UL) {
        output.WriteRawTag(24);
        output.WriteUInt64(RowUsr);
      }
      if (RowKey != 0UL) {
        output.WriteRawTag(32);
        output.WriteUInt64(RowKey);
      }
      if (P != 0UL) {
        output.WriteRawTag(40);
        output.WriteUInt64(P);
      }
      if (No.Length != 0) {
        output.WriteRawTag(50);
        output.WriteString(No);
      }
      if (Ad.Length != 0) {
        output.WriteRawTag(58);
        output.WriteString(Ad);
      }
      if (HspNo.Length != 0) {
        output.WriteRawTag(66);
        output.WriteString(HspNo);
      }
      if (Brc != 0D) {
        output.WriteRawTag(73);
        output.WriteDouble(Brc);
      }
      if (Alc != 0D) {
        output.WriteRawTag(81);
        output.WriteDouble(Alc);
      }
      if (IsW != false) {
        output.WriteRawTag(88);
        output.WriteBool(IsW);
      }
      if (HasH != false) {
        output.WriteRawTag(96);
        output.WriteBool(HasH);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (RowSte.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(RowSte);
      }
      if (RowErr.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(RowErr);
      }
      if (RowUsr != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(RowUsr);
      }
      if (RowKey != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(RowKey);
      }
      if (P != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(P);
      }
      if (No.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(No);
      }
      if (Ad.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Ad);
      }
      if (HspNo.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(HspNo);
      }
      if (Brc != 0D) {
        size += 1 + 8;
      }
      if (Alc != 0D) {
        size += 1 + 8;
      }
      if (IsW != false) {
        size += 1 + 1;
      }
      if (HasH != false) {
        size += 1 + 1;
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(AHPproxy other) {
      if (other == null) {
        return;
      }
      if (other.RowSte.Length != 0) {
        RowSte = other.RowSte;
      }
      if (other.RowErr.Length != 0) {
        RowErr = other.RowErr;
      }
      if (other.RowUsr != 0UL) {
        RowUsr = other.RowUsr;
      }
      if (other.RowKey != 0UL) {
        RowKey = other.RowKey;
      }
      if (other.P != 0UL) {
        P = other.P;
      }
      if (other.No.Length != 0) {
        No = other.No;
      }
      if (other.Ad.Length != 0) {
        Ad = other.Ad;
      }
      if (other.HspNo.Length != 0) {
        HspNo = other.HspNo;
      }
      if (other.Brc != 0D) {
        Brc = other.Brc;
      }
      if (other.Alc != 0D) {
        Alc = other.Alc;
      }
      if (other.IsW != false) {
        IsW = other.IsW;
      }
      if (other.HasH != false) {
        HasH = other.HasH;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            RowSte = input.ReadString();
            break;
          }
          case 18: {
            RowErr = input.ReadString();
            break;
          }
          case 24: {
            RowUsr = input.ReadUInt64();
            break;
          }
          case 32: {
            RowKey = input.ReadUInt64();
            break;
          }
          case 40: {
            P = input.ReadUInt64();
            break;
          }
          case 50: {
            No = input.ReadString();
            break;
          }
          case 58: {
            Ad = input.ReadString();
            break;
          }
          case 66: {
            HspNo = input.ReadString();
            break;
          }
          case 73: {
            Brc = input.ReadDouble();
            break;
          }
          case 81: {
            Alc = input.ReadDouble();
            break;
          }
          case 88: {
            IsW = input.ReadBool();
            break;
          }
          case 96: {
            HasH = input.ReadBool();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// Muhasebe Fisleri
  /// </summary>
  public sealed partial class AFBproxy : pb::IMessage<AFBproxy> {
    private static readonly pb::MessageParser<AFBproxy> _parser = new pb::MessageParser<AFBproxy>(() => new AFBproxy());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<AFBproxy> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Rest.RestReflection.Descriptor.MessageTypes[9]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AFBproxy() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AFBproxy(AFBproxy other) : this() {
      rowSte_ = other.rowSte_;
      rowErr_ = other.rowErr_;
      rowUsr_ = other.rowUsr_;
      rowKey_ = other.rowKey_;
      trh_ = other.trh_;
      tUR_ = other.tUR_;
      drm_ = other.drm_;
      Info = other.Info;
      brc_ = other.brc_;
      alc_ = other.alc_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AFBproxy Clone() {
      return new AFBproxy(this);
    }

    /// <summary>Field number for the "RowSte" field.</summary>
    public const int RowSteFieldNumber = 1;
    private string rowSte_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string RowSte {
      get { return rowSte_; }
      set {
        rowSte_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "RowErr" field.</summary>
    public const int RowErrFieldNumber = 2;
    private string rowErr_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string RowErr {
      get { return rowErr_; }
      set {
        rowErr_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "RowUsr" field.</summary>
    public const int RowUsrFieldNumber = 3;
    private ulong rowUsr_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong RowUsr {
      get { return rowUsr_; }
      set {
        rowUsr_ = value;
      }
    }

    /// <summary>Field number for the "RowKey" field.</summary>
    public const int RowKeyFieldNumber = 4;
    private ulong rowKey_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong RowKey {
      get { return rowKey_; }
      set {
        rowKey_ = value;
      }
    }

    /// <summary>Field number for the "Trh" field.</summary>
    public const int TrhFieldNumber = 5;
    private long trh_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long Trh {
      get { return trh_; }
      set {
        trh_ = value;
      }
    }

    /// <summary>Field number for the "TUR" field.</summary>
    public const int TURFieldNumber = 6;
    private ulong tUR_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong TUR {
      get { return tUR_; }
      set {
        tUR_ = value;
      }
    }

    /// <summary>Field number for the "Drm" field.</summary>
    public const int DrmFieldNumber = 7;
    private string drm_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Drm {
      get { return drm_; }
      set {
        drm_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "Info" field.</summary>
    public const int InfoFieldNumber = 8;
    private static readonly pb::FieldCodec<string> _single_info_codec = pb::FieldCodec.ForClassWrapper<string>(66);
    private string info_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Info {
      get { return info_; }
      set {
        info_ = value;
      }
    }

    /// <summary>Field number for the "Brc" field.</summary>
    public const int BrcFieldNumber = 9;
    private double brc_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double Brc {
      get { return brc_; }
      set {
        brc_ = value;
      }
    }

    /// <summary>Field number for the "Alc" field.</summary>
    public const int AlcFieldNumber = 10;
    private double alc_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double Alc {
      get { return alc_; }
      set {
        alc_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as AFBproxy);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(AFBproxy other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (RowSte != other.RowSte) return false;
      if (RowErr != other.RowErr) return false;
      if (RowUsr != other.RowUsr) return false;
      if (RowKey != other.RowKey) return false;
      if (Trh != other.Trh) return false;
      if (TUR != other.TUR) return false;
      if (Drm != other.Drm) return false;
      if (Info != other.Info) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(Brc, other.Brc)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(Alc, other.Alc)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (RowSte.Length != 0) hash ^= RowSte.GetHashCode();
      if (RowErr.Length != 0) hash ^= RowErr.GetHashCode();
      if (RowUsr != 0UL) hash ^= RowUsr.GetHashCode();
      if (RowKey != 0UL) hash ^= RowKey.GetHashCode();
      if (Trh != 0L) hash ^= Trh.GetHashCode();
      if (TUR != 0UL) hash ^= TUR.GetHashCode();
      if (Drm.Length != 0) hash ^= Drm.GetHashCode();
      if (info_ != null) hash ^= Info.GetHashCode();
      if (Brc != 0D) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(Brc);
      if (Alc != 0D) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(Alc);
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (RowSte.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(RowSte);
      }
      if (RowErr.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(RowErr);
      }
      if (RowUsr != 0UL) {
        output.WriteRawTag(24);
        output.WriteUInt64(RowUsr);
      }
      if (RowKey != 0UL) {
        output.WriteRawTag(32);
        output.WriteUInt64(RowKey);
      }
      if (Trh != 0L) {
        output.WriteRawTag(40);
        output.WriteInt64(Trh);
      }
      if (TUR != 0UL) {
        output.WriteRawTag(48);
        output.WriteUInt64(TUR);
      }
      if (Drm.Length != 0) {
        output.WriteRawTag(58);
        output.WriteString(Drm);
      }
      if (info_ != null) {
        _single_info_codec.WriteTagAndValue(output, Info);
      }
      if (Brc != 0D) {
        output.WriteRawTag(73);
        output.WriteDouble(Brc);
      }
      if (Alc != 0D) {
        output.WriteRawTag(81);
        output.WriteDouble(Alc);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (RowSte.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(RowSte);
      }
      if (RowErr.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(RowErr);
      }
      if (RowUsr != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(RowUsr);
      }
      if (RowKey != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(RowKey);
      }
      if (Trh != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(Trh);
      }
      if (TUR != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(TUR);
      }
      if (Drm.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Drm);
      }
      if (info_ != null) {
        size += _single_info_codec.CalculateSizeWithTag(Info);
      }
      if (Brc != 0D) {
        size += 1 + 8;
      }
      if (Alc != 0D) {
        size += 1 + 8;
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(AFBproxy other) {
      if (other == null) {
        return;
      }
      if (other.RowSte.Length != 0) {
        RowSte = other.RowSte;
      }
      if (other.RowErr.Length != 0) {
        RowErr = other.RowErr;
      }
      if (other.RowUsr != 0UL) {
        RowUsr = other.RowUsr;
      }
      if (other.RowKey != 0UL) {
        RowKey = other.RowKey;
      }
      if (other.Trh != 0L) {
        Trh = other.Trh;
      }
      if (other.TUR != 0UL) {
        TUR = other.TUR;
      }
      if (other.Drm.Length != 0) {
        Drm = other.Drm;
      }
      if (other.info_ != null) {
        if (info_ == null || other.Info != "") {
          Info = other.Info;
        }
      }
      if (other.Brc != 0D) {
        Brc = other.Brc;
      }
      if (other.Alc != 0D) {
        Alc = other.Alc;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            RowSte = input.ReadString();
            break;
          }
          case 18: {
            RowErr = input.ReadString();
            break;
          }
          case 24: {
            RowUsr = input.ReadUInt64();
            break;
          }
          case 32: {
            RowKey = input.ReadUInt64();
            break;
          }
          case 40: {
            Trh = input.ReadInt64();
            break;
          }
          case 48: {
            TUR = input.ReadUInt64();
            break;
          }
          case 58: {
            Drm = input.ReadString();
            break;
          }
          case 66: {
            string value = _single_info_codec.Read(input);
            if (info_ == null || value != "") {
              Info = value;
            }
            break;
          }
          case 73: {
            Brc = input.ReadDouble();
            break;
          }
          case 81: {
            Alc = input.ReadDouble();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// Muhasebe Fis Detaylari
  /// </summary>
  public sealed partial class AFDproxy : pb::IMessage<AFDproxy> {
    private static readonly pb::MessageParser<AFDproxy> _parser = new pb::MessageParser<AFDproxy>(() => new AFDproxy());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<AFDproxy> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Rest.RestReflection.Descriptor.MessageTypes[10]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AFDproxy() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AFDproxy(AFDproxy other) : this() {
      rowSte_ = other.rowSte_;
      rowErr_ = other.rowErr_;
      rowUsr_ = other.rowUsr_;
      rowKey_ = other.rowKey_;
      aFB_ = other.aFB_;
      aHP_ = other.aHP_;
      Info = other.Info;
      tut_ = other.tut_;
      dVT_ = other.dVT_;
      kur_ = other.kur_;
      tutTL_ = other.tutTL_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AFDproxy Clone() {
      return new AFDproxy(this);
    }

    /// <summary>Field number for the "RowSte" field.</summary>
    public const int RowSteFieldNumber = 1;
    private string rowSte_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string RowSte {
      get { return rowSte_; }
      set {
        rowSte_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "RowErr" field.</summary>
    public const int RowErrFieldNumber = 2;
    private string rowErr_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string RowErr {
      get { return rowErr_; }
      set {
        rowErr_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "RowUsr" field.</summary>
    public const int RowUsrFieldNumber = 3;
    private ulong rowUsr_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong RowUsr {
      get { return rowUsr_; }
      set {
        rowUsr_ = value;
      }
    }

    /// <summary>Field number for the "RowKey" field.</summary>
    public const int RowKeyFieldNumber = 4;
    private ulong rowKey_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong RowKey {
      get { return rowKey_; }
      set {
        rowKey_ = value;
      }
    }

    /// <summary>Field number for the "AFB" field.</summary>
    public const int AFBFieldNumber = 5;
    private ulong aFB_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong AFB {
      get { return aFB_; }
      set {
        aFB_ = value;
      }
    }

    /// <summary>Field number for the "AHP" field.</summary>
    public const int AHPFieldNumber = 6;
    private ulong aHP_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong AHP {
      get { return aHP_; }
      set {
        aHP_ = value;
      }
    }

    /// <summary>Field number for the "Info" field.</summary>
    public const int InfoFieldNumber = 7;
    private static readonly pb::FieldCodec<string> _single_info_codec = pb::FieldCodec.ForClassWrapper<string>(58);
    private string info_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Info {
      get { return info_; }
      set {
        info_ = value;
      }
    }

    /// <summary>Field number for the "Tut" field.</summary>
    public const int TutFieldNumber = 8;
    private double tut_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double Tut {
      get { return tut_; }
      set {
        tut_ = value;
      }
    }

    /// <summary>Field number for the "DVT" field.</summary>
    public const int DVTFieldNumber = 9;
    private ulong dVT_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong DVT {
      get { return dVT_; }
      set {
        dVT_ = value;
      }
    }

    /// <summary>Field number for the "Kur" field.</summary>
    public const int KurFieldNumber = 10;
    private float kur_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float Kur {
      get { return kur_; }
      set {
        kur_ = value;
      }
    }

    /// <summary>Field number for the "TutTL" field.</summary>
    public const int TutTLFieldNumber = 11;
    private double tutTL_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double TutTL {
      get { return tutTL_; }
      set {
        tutTL_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as AFDproxy);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(AFDproxy other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (RowSte != other.RowSte) return false;
      if (RowErr != other.RowErr) return false;
      if (RowUsr != other.RowUsr) return false;
      if (RowKey != other.RowKey) return false;
      if (AFB != other.AFB) return false;
      if (AHP != other.AHP) return false;
      if (Info != other.Info) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(Tut, other.Tut)) return false;
      if (DVT != other.DVT) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(Kur, other.Kur)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(TutTL, other.TutTL)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (RowSte.Length != 0) hash ^= RowSte.GetHashCode();
      if (RowErr.Length != 0) hash ^= RowErr.GetHashCode();
      if (RowUsr != 0UL) hash ^= RowUsr.GetHashCode();
      if (RowKey != 0UL) hash ^= RowKey.GetHashCode();
      if (AFB != 0UL) hash ^= AFB.GetHashCode();
      if (AHP != 0UL) hash ^= AHP.GetHashCode();
      if (info_ != null) hash ^= Info.GetHashCode();
      if (Tut != 0D) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(Tut);
      if (DVT != 0UL) hash ^= DVT.GetHashCode();
      if (Kur != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(Kur);
      if (TutTL != 0D) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(TutTL);
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (RowSte.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(RowSte);
      }
      if (RowErr.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(RowErr);
      }
      if (RowUsr != 0UL) {
        output.WriteRawTag(24);
        output.WriteUInt64(RowUsr);
      }
      if (RowKey != 0UL) {
        output.WriteRawTag(32);
        output.WriteUInt64(RowKey);
      }
      if (AFB != 0UL) {
        output.WriteRawTag(40);
        output.WriteUInt64(AFB);
      }
      if (AHP != 0UL) {
        output.WriteRawTag(48);
        output.WriteUInt64(AHP);
      }
      if (info_ != null) {
        _single_info_codec.WriteTagAndValue(output, Info);
      }
      if (Tut != 0D) {
        output.WriteRawTag(65);
        output.WriteDouble(Tut);
      }
      if (DVT != 0UL) {
        output.WriteRawTag(72);
        output.WriteUInt64(DVT);
      }
      if (Kur != 0F) {
        output.WriteRawTag(85);
        output.WriteFloat(Kur);
      }
      if (TutTL != 0D) {
        output.WriteRawTag(89);
        output.WriteDouble(TutTL);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (RowSte.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(RowSte);
      }
      if (RowErr.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(RowErr);
      }
      if (RowUsr != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(RowUsr);
      }
      if (RowKey != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(RowKey);
      }
      if (AFB != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(AFB);
      }
      if (AHP != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(AHP);
      }
      if (info_ != null) {
        size += _single_info_codec.CalculateSizeWithTag(Info);
      }
      if (Tut != 0D) {
        size += 1 + 8;
      }
      if (DVT != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(DVT);
      }
      if (Kur != 0F) {
        size += 1 + 4;
      }
      if (TutTL != 0D) {
        size += 1 + 8;
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(AFDproxy other) {
      if (other == null) {
        return;
      }
      if (other.RowSte.Length != 0) {
        RowSte = other.RowSte;
      }
      if (other.RowErr.Length != 0) {
        RowErr = other.RowErr;
      }
      if (other.RowUsr != 0UL) {
        RowUsr = other.RowUsr;
      }
      if (other.RowKey != 0UL) {
        RowKey = other.RowKey;
      }
      if (other.AFB != 0UL) {
        AFB = other.AFB;
      }
      if (other.AHP != 0UL) {
        AHP = other.AHP;
      }
      if (other.info_ != null) {
        if (info_ == null || other.Info != "") {
          Info = other.Info;
        }
      }
      if (other.Tut != 0D) {
        Tut = other.Tut;
      }
      if (other.DVT != 0UL) {
        DVT = other.DVT;
      }
      if (other.Kur != 0F) {
        Kur = other.Kur;
      }
      if (other.TutTL != 0D) {
        TutTL = other.TutTL;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            RowSte = input.ReadString();
            break;
          }
          case 18: {
            RowErr = input.ReadString();
            break;
          }
          case 24: {
            RowUsr = input.ReadUInt64();
            break;
          }
          case 32: {
            RowKey = input.ReadUInt64();
            break;
          }
          case 40: {
            AFB = input.ReadUInt64();
            break;
          }
          case 48: {
            AHP = input.ReadUInt64();
            break;
          }
          case 58: {
            string value = _single_info_codec.Read(input);
            if (info_ == null || value != "") {
              Info = value;
            }
            break;
          }
          case 65: {
            Tut = input.ReadDouble();
            break;
          }
          case 72: {
            DVT = input.ReadUInt64();
            break;
          }
          case 85: {
            Kur = input.ReadFloat();
            break;
          }
          case 89: {
            TutTL = input.ReadDouble();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// Muhasebe Bill/Fatura Baslik
  /// </summary>
  public sealed partial class ABBproxy : pb::IMessage<ABBproxy> {
    private static readonly pb::MessageParser<ABBproxy> _parser = new pb::MessageParser<ABBproxy>(() => new ABBproxy());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ABBproxy> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Rest.RestReflection.Descriptor.MessageTypes[11]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ABBproxy() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ABBproxy(ABBproxy other) : this() {
      rowSte_ = other.rowSte_;
      rowErr_ = other.rowErr_;
      rowUsr_ = other.rowUsr_;
      rowKey_ = other.rowKey_;
      trh_ = other.trh_;
      tUR_ = other.tUR_;
      drm_ = other.drm_;
      kFT_ = other.kFT_;
      bA_ = other.bA_;
      dVT_ = other.dVT_;
      kur_ = other.kur_;
      tut_ = other.tut_;
      Info = other.Info;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ABBproxy Clone() {
      return new ABBproxy(this);
    }

    /// <summary>Field number for the "RowSte" field.</summary>
    public const int RowSteFieldNumber = 1;
    private string rowSte_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string RowSte {
      get { return rowSte_; }
      set {
        rowSte_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "RowErr" field.</summary>
    public const int RowErrFieldNumber = 2;
    private string rowErr_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string RowErr {
      get { return rowErr_; }
      set {
        rowErr_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "RowUsr" field.</summary>
    public const int RowUsrFieldNumber = 3;
    private ulong rowUsr_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong RowUsr {
      get { return rowUsr_; }
      set {
        rowUsr_ = value;
      }
    }

    /// <summary>Field number for the "RowKey" field.</summary>
    public const int RowKeyFieldNumber = 4;
    private ulong rowKey_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong RowKey {
      get { return rowKey_; }
      set {
        rowKey_ = value;
      }
    }

    /// <summary>Field number for the "Trh" field.</summary>
    public const int TrhFieldNumber = 5;
    private long trh_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long Trh {
      get { return trh_; }
      set {
        trh_ = value;
      }
    }

    /// <summary>Field number for the "TUR" field.</summary>
    public const int TURFieldNumber = 6;
    private ulong tUR_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong TUR {
      get { return tUR_; }
      set {
        tUR_ = value;
      }
    }

    /// <summary>Field number for the "Drm" field.</summary>
    public const int DrmFieldNumber = 7;
    private string drm_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Drm {
      get { return drm_; }
      set {
        drm_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "KFT" field.</summary>
    public const int KFTFieldNumber = 8;
    private ulong kFT_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong KFT {
      get { return kFT_; }
      set {
        kFT_ = value;
      }
    }

    /// <summary>Field number for the "BA" field.</summary>
    public const int BAFieldNumber = 9;
    private string bA_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string BA {
      get { return bA_; }
      set {
        bA_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "DVT" field.</summary>
    public const int DVTFieldNumber = 10;
    private ulong dVT_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong DVT {
      get { return dVT_; }
      set {
        dVT_ = value;
      }
    }

    /// <summary>Field number for the "Kur" field.</summary>
    public const int KurFieldNumber = 11;
    private float kur_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float Kur {
      get { return kur_; }
      set {
        kur_ = value;
      }
    }

    /// <summary>Field number for the "Tut" field.</summary>
    public const int TutFieldNumber = 12;
    private double tut_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double Tut {
      get { return tut_; }
      set {
        tut_ = value;
      }
    }

    /// <summary>Field number for the "Info" field.</summary>
    public const int InfoFieldNumber = 13;
    private static readonly pb::FieldCodec<string> _single_info_codec = pb::FieldCodec.ForClassWrapper<string>(106);
    private string info_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Info {
      get { return info_; }
      set {
        info_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ABBproxy);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ABBproxy other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (RowSte != other.RowSte) return false;
      if (RowErr != other.RowErr) return false;
      if (RowUsr != other.RowUsr) return false;
      if (RowKey != other.RowKey) return false;
      if (Trh != other.Trh) return false;
      if (TUR != other.TUR) return false;
      if (Drm != other.Drm) return false;
      if (KFT != other.KFT) return false;
      if (BA != other.BA) return false;
      if (DVT != other.DVT) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(Kur, other.Kur)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(Tut, other.Tut)) return false;
      if (Info != other.Info) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (RowSte.Length != 0) hash ^= RowSte.GetHashCode();
      if (RowErr.Length != 0) hash ^= RowErr.GetHashCode();
      if (RowUsr != 0UL) hash ^= RowUsr.GetHashCode();
      if (RowKey != 0UL) hash ^= RowKey.GetHashCode();
      if (Trh != 0L) hash ^= Trh.GetHashCode();
      if (TUR != 0UL) hash ^= TUR.GetHashCode();
      if (Drm.Length != 0) hash ^= Drm.GetHashCode();
      if (KFT != 0UL) hash ^= KFT.GetHashCode();
      if (BA.Length != 0) hash ^= BA.GetHashCode();
      if (DVT != 0UL) hash ^= DVT.GetHashCode();
      if (Kur != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(Kur);
      if (Tut != 0D) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(Tut);
      if (info_ != null) hash ^= Info.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (RowSte.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(RowSte);
      }
      if (RowErr.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(RowErr);
      }
      if (RowUsr != 0UL) {
        output.WriteRawTag(24);
        output.WriteUInt64(RowUsr);
      }
      if (RowKey != 0UL) {
        output.WriteRawTag(32);
        output.WriteUInt64(RowKey);
      }
      if (Trh != 0L) {
        output.WriteRawTag(40);
        output.WriteInt64(Trh);
      }
      if (TUR != 0UL) {
        output.WriteRawTag(48);
        output.WriteUInt64(TUR);
      }
      if (Drm.Length != 0) {
        output.WriteRawTag(58);
        output.WriteString(Drm);
      }
      if (KFT != 0UL) {
        output.WriteRawTag(64);
        output.WriteUInt64(KFT);
      }
      if (BA.Length != 0) {
        output.WriteRawTag(74);
        output.WriteString(BA);
      }
      if (DVT != 0UL) {
        output.WriteRawTag(80);
        output.WriteUInt64(DVT);
      }
      if (Kur != 0F) {
        output.WriteRawTag(93);
        output.WriteFloat(Kur);
      }
      if (Tut != 0D) {
        output.WriteRawTag(97);
        output.WriteDouble(Tut);
      }
      if (info_ != null) {
        _single_info_codec.WriteTagAndValue(output, Info);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (RowSte.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(RowSte);
      }
      if (RowErr.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(RowErr);
      }
      if (RowUsr != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(RowUsr);
      }
      if (RowKey != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(RowKey);
      }
      if (Trh != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(Trh);
      }
      if (TUR != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(TUR);
      }
      if (Drm.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Drm);
      }
      if (KFT != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(KFT);
      }
      if (BA.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(BA);
      }
      if (DVT != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(DVT);
      }
      if (Kur != 0F) {
        size += 1 + 4;
      }
      if (Tut != 0D) {
        size += 1 + 8;
      }
      if (info_ != null) {
        size += _single_info_codec.CalculateSizeWithTag(Info);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ABBproxy other) {
      if (other == null) {
        return;
      }
      if (other.RowSte.Length != 0) {
        RowSte = other.RowSte;
      }
      if (other.RowErr.Length != 0) {
        RowErr = other.RowErr;
      }
      if (other.RowUsr != 0UL) {
        RowUsr = other.RowUsr;
      }
      if (other.RowKey != 0UL) {
        RowKey = other.RowKey;
      }
      if (other.Trh != 0L) {
        Trh = other.Trh;
      }
      if (other.TUR != 0UL) {
        TUR = other.TUR;
      }
      if (other.Drm.Length != 0) {
        Drm = other.Drm;
      }
      if (other.KFT != 0UL) {
        KFT = other.KFT;
      }
      if (other.BA.Length != 0) {
        BA = other.BA;
      }
      if (other.DVT != 0UL) {
        DVT = other.DVT;
      }
      if (other.Kur != 0F) {
        Kur = other.Kur;
      }
      if (other.Tut != 0D) {
        Tut = other.Tut;
      }
      if (other.info_ != null) {
        if (info_ == null || other.Info != "") {
          Info = other.Info;
        }
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            RowSte = input.ReadString();
            break;
          }
          case 18: {
            RowErr = input.ReadString();
            break;
          }
          case 24: {
            RowUsr = input.ReadUInt64();
            break;
          }
          case 32: {
            RowKey = input.ReadUInt64();
            break;
          }
          case 40: {
            Trh = input.ReadInt64();
            break;
          }
          case 48: {
            TUR = input.ReadUInt64();
            break;
          }
          case 58: {
            Drm = input.ReadString();
            break;
          }
          case 64: {
            KFT = input.ReadUInt64();
            break;
          }
          case 74: {
            BA = input.ReadString();
            break;
          }
          case 80: {
            DVT = input.ReadUInt64();
            break;
          }
          case 93: {
            Kur = input.ReadFloat();
            break;
          }
          case 97: {
            Tut = input.ReadDouble();
            break;
          }
          case 106: {
            string value = _single_info_codec.Read(input);
            if (info_ == null || value != "") {
              Info = value;
            }
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// Muhasebe Bill/Fatura Detay
  /// </summary>
  public sealed partial class ABDproxy : pb::IMessage<ABDproxy> {
    private static readonly pb::MessageParser<ABDproxy> _parser = new pb::MessageParser<ABDproxy>(() => new ABDproxy());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ABDproxy> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Rest.RestReflection.Descriptor.MessageTypes[12]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ABDproxy() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ABDproxy(ABDproxy other) : this() {
      rowSte_ = other.rowSte_;
      rowErr_ = other.rowErr_;
      rowUsr_ = other.rowUsr_;
      rowKey_ = other.rowKey_;
      aBB_ = other.aBB_;
      nNN_ = other.nNN_;
      aHP_ = other.aHP_;
      fyt_ = other.fyt_;
      dVT_ = other.dVT_;
      mik_ = other.mik_;
      kur_ = other.kur_;
      kDY_ = other.kDY_;
      Info = other.Info;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ABDproxy Clone() {
      return new ABDproxy(this);
    }

    /// <summary>Field number for the "RowSte" field.</summary>
    public const int RowSteFieldNumber = 1;
    private string rowSte_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string RowSte {
      get { return rowSte_; }
      set {
        rowSte_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "RowErr" field.</summary>
    public const int RowErrFieldNumber = 2;
    private string rowErr_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string RowErr {
      get { return rowErr_; }
      set {
        rowErr_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "RowUsr" field.</summary>
    public const int RowUsrFieldNumber = 3;
    private ulong rowUsr_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong RowUsr {
      get { return rowUsr_; }
      set {
        rowUsr_ = value;
      }
    }

    /// <summary>Field number for the "RowKey" field.</summary>
    public const int RowKeyFieldNumber = 4;
    private ulong rowKey_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong RowKey {
      get { return rowKey_; }
      set {
        rowKey_ = value;
      }
    }

    /// <summary>Field number for the "ABB" field.</summary>
    public const int ABBFieldNumber = 5;
    private ulong aBB_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong ABB {
      get { return aBB_; }
      set {
        aBB_ = value;
      }
    }

    /// <summary>Field number for the "NNN" field.</summary>
    public const int NNNFieldNumber = 6;
    private ulong nNN_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong NNN {
      get { return nNN_; }
      set {
        nNN_ = value;
      }
    }

    /// <summary>Field number for the "AHP" field.</summary>
    public const int AHPFieldNumber = 7;
    private ulong aHP_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong AHP {
      get { return aHP_; }
      set {
        aHP_ = value;
      }
    }

    /// <summary>Field number for the "Fyt" field.</summary>
    public const int FytFieldNumber = 8;
    private double fyt_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double Fyt {
      get { return fyt_; }
      set {
        fyt_ = value;
      }
    }

    /// <summary>Field number for the "DVT" field.</summary>
    public const int DVTFieldNumber = 9;
    private ulong dVT_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong DVT {
      get { return dVT_; }
      set {
        dVT_ = value;
      }
    }

    /// <summary>Field number for the "Mik" field.</summary>
    public const int MikFieldNumber = 10;
    private double mik_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double Mik {
      get { return mik_; }
      set {
        mik_ = value;
      }
    }

    /// <summary>Field number for the "Kur" field.</summary>
    public const int KurFieldNumber = 11;
    private float kur_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float Kur {
      get { return kur_; }
      set {
        kur_ = value;
      }
    }

    /// <summary>Field number for the "KDY" field.</summary>
    public const int KDYFieldNumber = 12;
    private int kDY_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int KDY {
      get { return kDY_; }
      set {
        kDY_ = value;
      }
    }

    /// <summary>Field number for the "Info" field.</summary>
    public const int InfoFieldNumber = 13;
    private static readonly pb::FieldCodec<string> _single_info_codec = pb::FieldCodec.ForClassWrapper<string>(106);
    private string info_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Info {
      get { return info_; }
      set {
        info_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ABDproxy);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ABDproxy other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (RowSte != other.RowSte) return false;
      if (RowErr != other.RowErr) return false;
      if (RowUsr != other.RowUsr) return false;
      if (RowKey != other.RowKey) return false;
      if (ABB != other.ABB) return false;
      if (NNN != other.NNN) return false;
      if (AHP != other.AHP) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(Fyt, other.Fyt)) return false;
      if (DVT != other.DVT) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(Mik, other.Mik)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(Kur, other.Kur)) return false;
      if (KDY != other.KDY) return false;
      if (Info != other.Info) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (RowSte.Length != 0) hash ^= RowSte.GetHashCode();
      if (RowErr.Length != 0) hash ^= RowErr.GetHashCode();
      if (RowUsr != 0UL) hash ^= RowUsr.GetHashCode();
      if (RowKey != 0UL) hash ^= RowKey.GetHashCode();
      if (ABB != 0UL) hash ^= ABB.GetHashCode();
      if (NNN != 0UL) hash ^= NNN.GetHashCode();
      if (AHP != 0UL) hash ^= AHP.GetHashCode();
      if (Fyt != 0D) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(Fyt);
      if (DVT != 0UL) hash ^= DVT.GetHashCode();
      if (Mik != 0D) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(Mik);
      if (Kur != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(Kur);
      if (KDY != 0) hash ^= KDY.GetHashCode();
      if (info_ != null) hash ^= Info.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (RowSte.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(RowSte);
      }
      if (RowErr.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(RowErr);
      }
      if (RowUsr != 0UL) {
        output.WriteRawTag(24);
        output.WriteUInt64(RowUsr);
      }
      if (RowKey != 0UL) {
        output.WriteRawTag(32);
        output.WriteUInt64(RowKey);
      }
      if (ABB != 0UL) {
        output.WriteRawTag(40);
        output.WriteUInt64(ABB);
      }
      if (NNN != 0UL) {
        output.WriteRawTag(48);
        output.WriteUInt64(NNN);
      }
      if (AHP != 0UL) {
        output.WriteRawTag(56);
        output.WriteUInt64(AHP);
      }
      if (Fyt != 0D) {
        output.WriteRawTag(65);
        output.WriteDouble(Fyt);
      }
      if (DVT != 0UL) {
        output.WriteRawTag(72);
        output.WriteUInt64(DVT);
      }
      if (Mik != 0D) {
        output.WriteRawTag(81);
        output.WriteDouble(Mik);
      }
      if (Kur != 0F) {
        output.WriteRawTag(93);
        output.WriteFloat(Kur);
      }
      if (KDY != 0) {
        output.WriteRawTag(96);
        output.WriteInt32(KDY);
      }
      if (info_ != null) {
        _single_info_codec.WriteTagAndValue(output, Info);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (RowSte.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(RowSte);
      }
      if (RowErr.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(RowErr);
      }
      if (RowUsr != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(RowUsr);
      }
      if (RowKey != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(RowKey);
      }
      if (ABB != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(ABB);
      }
      if (NNN != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(NNN);
      }
      if (AHP != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(AHP);
      }
      if (Fyt != 0D) {
        size += 1 + 8;
      }
      if (DVT != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(DVT);
      }
      if (Mik != 0D) {
        size += 1 + 8;
      }
      if (Kur != 0F) {
        size += 1 + 4;
      }
      if (KDY != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(KDY);
      }
      if (info_ != null) {
        size += _single_info_codec.CalculateSizeWithTag(Info);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ABDproxy other) {
      if (other == null) {
        return;
      }
      if (other.RowSte.Length != 0) {
        RowSte = other.RowSte;
      }
      if (other.RowErr.Length != 0) {
        RowErr = other.RowErr;
      }
      if (other.RowUsr != 0UL) {
        RowUsr = other.RowUsr;
      }
      if (other.RowKey != 0UL) {
        RowKey = other.RowKey;
      }
      if (other.ABB != 0UL) {
        ABB = other.ABB;
      }
      if (other.NNN != 0UL) {
        NNN = other.NNN;
      }
      if (other.AHP != 0UL) {
        AHP = other.AHP;
      }
      if (other.Fyt != 0D) {
        Fyt = other.Fyt;
      }
      if (other.DVT != 0UL) {
        DVT = other.DVT;
      }
      if (other.Mik != 0D) {
        Mik = other.Mik;
      }
      if (other.Kur != 0F) {
        Kur = other.Kur;
      }
      if (other.KDY != 0) {
        KDY = other.KDY;
      }
      if (other.info_ != null) {
        if (info_ == null || other.Info != "") {
          Info = other.Info;
        }
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            RowSte = input.ReadString();
            break;
          }
          case 18: {
            RowErr = input.ReadString();
            break;
          }
          case 24: {
            RowUsr = input.ReadUInt64();
            break;
          }
          case 32: {
            RowKey = input.ReadUInt64();
            break;
          }
          case 40: {
            ABB = input.ReadUInt64();
            break;
          }
          case 48: {
            NNN = input.ReadUInt64();
            break;
          }
          case 56: {
            AHP = input.ReadUInt64();
            break;
          }
          case 65: {
            Fyt = input.ReadDouble();
            break;
          }
          case 72: {
            DVT = input.ReadUInt64();
            break;
          }
          case 81: {
            Mik = input.ReadDouble();
            break;
          }
          case 93: {
            Kur = input.ReadFloat();
            break;
          }
          case 96: {
            KDY = input.ReadInt32();
            break;
          }
          case 106: {
            string value = _single_info_codec.Read(input);
            if (info_ == null || value != "") {
              Info = value;
            }
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// GenelTanimlari
  /// </summary>
  public sealed partial class XGTproxy : pb::IMessage<XGTproxy> {
    private static readonly pb::MessageParser<XGTproxy> _parser = new pb::MessageParser<XGTproxy>(() => new XGTproxy());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<XGTproxy> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Rest.RestReflection.Descriptor.MessageTypes[13]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public XGTproxy() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public XGTproxy(XGTproxy other) : this() {
      rowSte_ = other.rowSte_;
      rowErr_ = other.rowErr_;
      rowUsr_ = other.rowUsr_;
      rowKey_ = other.rowKey_;
      p_ = other.p_;
      kd_ = other.kd_;
      ad_ = other.ad_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public XGTproxy Clone() {
      return new XGTproxy(this);
    }

    /// <summary>Field number for the "RowSte" field.</summary>
    public const int RowSteFieldNumber = 1;
    private string rowSte_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string RowSte {
      get { return rowSte_; }
      set {
        rowSte_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "RowErr" field.</summary>
    public const int RowErrFieldNumber = 2;
    private string rowErr_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string RowErr {
      get { return rowErr_; }
      set {
        rowErr_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "RowUsr" field.</summary>
    public const int RowUsrFieldNumber = 3;
    private ulong rowUsr_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong RowUsr {
      get { return rowUsr_; }
      set {
        rowUsr_ = value;
      }
    }

    /// <summary>Field number for the "RowKey" field.</summary>
    public const int RowKeyFieldNumber = 4;
    private ulong rowKey_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong RowKey {
      get { return rowKey_; }
      set {
        rowKey_ = value;
      }
    }

    /// <summary>Field number for the "P" field.</summary>
    public const int PFieldNumber = 5;
    private ulong p_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong P {
      get { return p_; }
      set {
        p_ = value;
      }
    }

    /// <summary>Field number for the "Kd" field.</summary>
    public const int KdFieldNumber = 6;
    private string kd_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Kd {
      get { return kd_; }
      set {
        kd_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "Ad" field.</summary>
    public const int AdFieldNumber = 7;
    private string ad_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Ad {
      get { return ad_; }
      set {
        ad_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as XGTproxy);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(XGTproxy other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (RowSte != other.RowSte) return false;
      if (RowErr != other.RowErr) return false;
      if (RowUsr != other.RowUsr) return false;
      if (RowKey != other.RowKey) return false;
      if (P != other.P) return false;
      if (Kd != other.Kd) return false;
      if (Ad != other.Ad) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (RowSte.Length != 0) hash ^= RowSte.GetHashCode();
      if (RowErr.Length != 0) hash ^= RowErr.GetHashCode();
      if (RowUsr != 0UL) hash ^= RowUsr.GetHashCode();
      if (RowKey != 0UL) hash ^= RowKey.GetHashCode();
      if (P != 0UL) hash ^= P.GetHashCode();
      if (Kd.Length != 0) hash ^= Kd.GetHashCode();
      if (Ad.Length != 0) hash ^= Ad.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (RowSte.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(RowSte);
      }
      if (RowErr.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(RowErr);
      }
      if (RowUsr != 0UL) {
        output.WriteRawTag(24);
        output.WriteUInt64(RowUsr);
      }
      if (RowKey != 0UL) {
        output.WriteRawTag(32);
        output.WriteUInt64(RowKey);
      }
      if (P != 0UL) {
        output.WriteRawTag(40);
        output.WriteUInt64(P);
      }
      if (Kd.Length != 0) {
        output.WriteRawTag(50);
        output.WriteString(Kd);
      }
      if (Ad.Length != 0) {
        output.WriteRawTag(58);
        output.WriteString(Ad);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (RowSte.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(RowSte);
      }
      if (RowErr.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(RowErr);
      }
      if (RowUsr != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(RowUsr);
      }
      if (RowKey != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(RowKey);
      }
      if (P != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(P);
      }
      if (Kd.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Kd);
      }
      if (Ad.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Ad);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(XGTproxy other) {
      if (other == null) {
        return;
      }
      if (other.RowSte.Length != 0) {
        RowSte = other.RowSte;
      }
      if (other.RowErr.Length != 0) {
        RowErr = other.RowErr;
      }
      if (other.RowUsr != 0UL) {
        RowUsr = other.RowUsr;
      }
      if (other.RowKey != 0UL) {
        RowKey = other.RowKey;
      }
      if (other.P != 0UL) {
        P = other.P;
      }
      if (other.Kd.Length != 0) {
        Kd = other.Kd;
      }
      if (other.Ad.Length != 0) {
        Ad = other.Ad;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            RowSte = input.ReadString();
            break;
          }
          case 18: {
            RowErr = input.ReadString();
            break;
          }
          case 24: {
            RowUsr = input.ReadUInt64();
            break;
          }
          case 32: {
            RowKey = input.ReadUInt64();
            break;
          }
          case 40: {
            P = input.ReadUInt64();
            break;
          }
          case 50: {
            Kd = input.ReadString();
            break;
          }
          case 58: {
            Ad = input.ReadString();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// DovizKurlari
  /// </summary>
  public sealed partial class XDKproxy : pb::IMessage<XDKproxy> {
    private static readonly pb::MessageParser<XDKproxy> _parser = new pb::MessageParser<XDKproxy>(() => new XDKproxy());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<XDKproxy> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Rest.RestReflection.Descriptor.MessageTypes[14]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public XDKproxy() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public XDKproxy(XDKproxy other) : this() {
      rowSte_ = other.rowSte_;
      rowErr_ = other.rowErr_;
      rowUsr_ = other.rowUsr_;
      rowKey_ = other.rowKey_;
      trh_ = other.trh_;
      dVT_ = other.dVT_;
      kur_ = other.kur_;
      dvz_ = other.dvz_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public XDKproxy Clone() {
      return new XDKproxy(this);
    }

    /// <summary>Field number for the "RowSte" field.</summary>
    public const int RowSteFieldNumber = 1;
    private string rowSte_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string RowSte {
      get { return rowSte_; }
      set {
        rowSte_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "RowErr" field.</summary>
    public const int RowErrFieldNumber = 2;
    private string rowErr_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string RowErr {
      get { return rowErr_; }
      set {
        rowErr_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "RowUsr" field.</summary>
    public const int RowUsrFieldNumber = 3;
    private ulong rowUsr_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong RowUsr {
      get { return rowUsr_; }
      set {
        rowUsr_ = value;
      }
    }

    /// <summary>Field number for the "RowKey" field.</summary>
    public const int RowKeyFieldNumber = 4;
    private ulong rowKey_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong RowKey {
      get { return rowKey_; }
      set {
        rowKey_ = value;
      }
    }

    /// <summary>Field number for the "Trh" field.</summary>
    public const int TrhFieldNumber = 5;
    private long trh_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long Trh {
      get { return trh_; }
      set {
        trh_ = value;
      }
    }

    /// <summary>Field number for the "DVT" field.</summary>
    public const int DVTFieldNumber = 6;
    private ulong dVT_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong DVT {
      get { return dVT_; }
      set {
        dVT_ = value;
      }
    }

    /// <summary>Field number for the "Kur" field.</summary>
    public const int KurFieldNumber = 7;
    private float kur_;
    /// <summary>
    /// Dovizin TRL karsiligi
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float Kur {
      get { return kur_; }
      set {
        kur_ = value;
      }
    }

    /// <summary>Field number for the "Dvz" field.</summary>
    public const int DvzFieldNumber = 8;
    private string dvz_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Dvz {
      get { return dvz_; }
      set {
        dvz_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as XDKproxy);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(XDKproxy other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (RowSte != other.RowSte) return false;
      if (RowErr != other.RowErr) return false;
      if (RowUsr != other.RowUsr) return false;
      if (RowKey != other.RowKey) return false;
      if (Trh != other.Trh) return false;
      if (DVT != other.DVT) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(Kur, other.Kur)) return false;
      if (Dvz != other.Dvz) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (RowSte.Length != 0) hash ^= RowSte.GetHashCode();
      if (RowErr.Length != 0) hash ^= RowErr.GetHashCode();
      if (RowUsr != 0UL) hash ^= RowUsr.GetHashCode();
      if (RowKey != 0UL) hash ^= RowKey.GetHashCode();
      if (Trh != 0L) hash ^= Trh.GetHashCode();
      if (DVT != 0UL) hash ^= DVT.GetHashCode();
      if (Kur != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(Kur);
      if (Dvz.Length != 0) hash ^= Dvz.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (RowSte.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(RowSte);
      }
      if (RowErr.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(RowErr);
      }
      if (RowUsr != 0UL) {
        output.WriteRawTag(24);
        output.WriteUInt64(RowUsr);
      }
      if (RowKey != 0UL) {
        output.WriteRawTag(32);
        output.WriteUInt64(RowKey);
      }
      if (Trh != 0L) {
        output.WriteRawTag(40);
        output.WriteInt64(Trh);
      }
      if (DVT != 0UL) {
        output.WriteRawTag(48);
        output.WriteUInt64(DVT);
      }
      if (Kur != 0F) {
        output.WriteRawTag(61);
        output.WriteFloat(Kur);
      }
      if (Dvz.Length != 0) {
        output.WriteRawTag(66);
        output.WriteString(Dvz);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (RowSte.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(RowSte);
      }
      if (RowErr.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(RowErr);
      }
      if (RowUsr != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(RowUsr);
      }
      if (RowKey != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(RowKey);
      }
      if (Trh != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(Trh);
      }
      if (DVT != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(DVT);
      }
      if (Kur != 0F) {
        size += 1 + 4;
      }
      if (Dvz.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Dvz);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(XDKproxy other) {
      if (other == null) {
        return;
      }
      if (other.RowSte.Length != 0) {
        RowSte = other.RowSte;
      }
      if (other.RowErr.Length != 0) {
        RowErr = other.RowErr;
      }
      if (other.RowUsr != 0UL) {
        RowUsr = other.RowUsr;
      }
      if (other.RowKey != 0UL) {
        RowKey = other.RowKey;
      }
      if (other.Trh != 0L) {
        Trh = other.Trh;
      }
      if (other.DVT != 0UL) {
        DVT = other.DVT;
      }
      if (other.Kur != 0F) {
        Kur = other.Kur;
      }
      if (other.Dvz.Length != 0) {
        Dvz = other.Dvz;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            RowSte = input.ReadString();
            break;
          }
          case 18: {
            RowErr = input.ReadString();
            break;
          }
          case 24: {
            RowUsr = input.ReadUInt64();
            break;
          }
          case 32: {
            RowKey = input.ReadUInt64();
            break;
          }
          case 40: {
            Trh = input.ReadInt64();
            break;
          }
          case 48: {
            DVT = input.ReadUInt64();
            break;
          }
          case 61: {
            Kur = input.ReadFloat();
            break;
          }
          case 66: {
            Dvz = input.ReadString();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// KKK Kim Base
  /// </summary>
  public sealed partial class KKKproxy : pb::IMessage<KKKproxy> {
    private static readonly pb::MessageParser<KKKproxy> _parser = new pb::MessageParser<KKKproxy>(() => new KKKproxy());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<KKKproxy> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Rest.RestReflection.Descriptor.MessageTypes[15]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public KKKproxy() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public KKKproxy(KKKproxy other) : this() {
      rowSte_ = other.rowSte_;
      rowErr_ = other.rowErr_;
      rowUsr_ = other.rowUsr_;
      rowKey_ = other.rowKey_;
      ad_ = other.ad_;
      tur_ = other.tur_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public KKKproxy Clone() {
      return new KKKproxy(this);
    }

    /// <summary>Field number for the "RowSte" field.</summary>
    public const int RowSteFieldNumber = 1;
    private string rowSte_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string RowSte {
      get { return rowSte_; }
      set {
        rowSte_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "RowErr" field.</summary>
    public const int RowErrFieldNumber = 2;
    private string rowErr_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string RowErr {
      get { return rowErr_; }
      set {
        rowErr_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "RowUsr" field.</summary>
    public const int RowUsrFieldNumber = 3;
    private ulong rowUsr_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong RowUsr {
      get { return rowUsr_; }
      set {
        rowUsr_ = value;
      }
    }

    /// <summary>Field number for the "RowKey" field.</summary>
    public const int RowKeyFieldNumber = 4;
    private ulong rowKey_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong RowKey {
      get { return rowKey_; }
      set {
        rowKey_ = value;
      }
    }

    /// <summary>Field number for the "Ad" field.</summary>
    public const int AdFieldNumber = 5;
    private string ad_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Ad {
      get { return ad_; }
      set {
        ad_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "Tur" field.</summary>
    public const int TurFieldNumber = 6;
    private string tur_ = "";
    /// <summary>
    /// FR:Firma, DP:Depo, UH:Uretim, IM:Imha, 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Tur {
      get { return tur_; }
      set {
        tur_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as KKKproxy);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(KKKproxy other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (RowSte != other.RowSte) return false;
      if (RowErr != other.RowErr) return false;
      if (RowUsr != other.RowUsr) return false;
      if (RowKey != other.RowKey) return false;
      if (Ad != other.Ad) return false;
      if (Tur != other.Tur) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (RowSte.Length != 0) hash ^= RowSte.GetHashCode();
      if (RowErr.Length != 0) hash ^= RowErr.GetHashCode();
      if (RowUsr != 0UL) hash ^= RowUsr.GetHashCode();
      if (RowKey != 0UL) hash ^= RowKey.GetHashCode();
      if (Ad.Length != 0) hash ^= Ad.GetHashCode();
      if (Tur.Length != 0) hash ^= Tur.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (RowSte.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(RowSte);
      }
      if (RowErr.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(RowErr);
      }
      if (RowUsr != 0UL) {
        output.WriteRawTag(24);
        output.WriteUInt64(RowUsr);
      }
      if (RowKey != 0UL) {
        output.WriteRawTag(32);
        output.WriteUInt64(RowKey);
      }
      if (Ad.Length != 0) {
        output.WriteRawTag(42);
        output.WriteString(Ad);
      }
      if (Tur.Length != 0) {
        output.WriteRawTag(50);
        output.WriteString(Tur);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (RowSte.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(RowSte);
      }
      if (RowErr.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(RowErr);
      }
      if (RowUsr != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(RowUsr);
      }
      if (RowKey != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(RowKey);
      }
      if (Ad.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Ad);
      }
      if (Tur.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Tur);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(KKKproxy other) {
      if (other == null) {
        return;
      }
      if (other.RowSte.Length != 0) {
        RowSte = other.RowSte;
      }
      if (other.RowErr.Length != 0) {
        RowErr = other.RowErr;
      }
      if (other.RowUsr != 0UL) {
        RowUsr = other.RowUsr;
      }
      if (other.RowKey != 0UL) {
        RowKey = other.RowKey;
      }
      if (other.Ad.Length != 0) {
        Ad = other.Ad;
      }
      if (other.Tur.Length != 0) {
        Tur = other.Tur;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            RowSte = input.ReadString();
            break;
          }
          case 18: {
            RowErr = input.ReadString();
            break;
          }
          case 24: {
            RowUsr = input.ReadUInt64();
            break;
          }
          case 32: {
            RowKey = input.ReadUInt64();
            break;
          }
          case 42: {
            Ad = input.ReadString();
            break;
          }
          case 50: {
            Tur = input.ReadString();
            break;
          }
        }
      }
    }

  }

  public sealed partial class KFTproxy : pb::IMessage<KFTproxy> {
    private static readonly pb::MessageParser<KFTproxy> _parser = new pb::MessageParser<KFTproxy>(() => new KFTproxy());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<KFTproxy> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Rest.RestReflection.Descriptor.MessageTypes[16]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public KFTproxy() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public KFTproxy(KFTproxy other) : this() {
      rowSte_ = other.rowSte_;
      rowErr_ = other.rowErr_;
      rowUsr_ = other.rowUsr_;
      rowKey_ = other.rowKey_;
      Ad = other.Ad;
      Tel = other.Tel;
      Adres = other.Adres;
      Sorumlu = other.Sorumlu;
      VrgDN = other.VrgDN;
      aHPbrc_ = other.aHPbrc_;
      aHPalc_ = other.aHPalc_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public KFTproxy Clone() {
      return new KFTproxy(this);
    }

    /// <summary>Field number for the "RowSte" field.</summary>
    public const int RowSteFieldNumber = 1;
    private string rowSte_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string RowSte {
      get { return rowSte_; }
      set {
        rowSte_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "RowErr" field.</summary>
    public const int RowErrFieldNumber = 2;
    private string rowErr_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string RowErr {
      get { return rowErr_; }
      set {
        rowErr_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "RowUsr" field.</summary>
    public const int RowUsrFieldNumber = 3;
    private ulong rowUsr_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong RowUsr {
      get { return rowUsr_; }
      set {
        rowUsr_ = value;
      }
    }

    /// <summary>Field number for the "RowKey" field.</summary>
    public const int RowKeyFieldNumber = 4;
    private ulong rowKey_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong RowKey {
      get { return rowKey_; }
      set {
        rowKey_ = value;
      }
    }

    /// <summary>Field number for the "Ad" field.</summary>
    public const int AdFieldNumber = 5;
    private static readonly pb::FieldCodec<string> _single_ad_codec = pb::FieldCodec.ForClassWrapper<string>(42);
    private string ad_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Ad {
      get { return ad_; }
      set {
        ad_ = value;
      }
    }

    /// <summary>Field number for the "Tel" field.</summary>
    public const int TelFieldNumber = 6;
    private static readonly pb::FieldCodec<string> _single_tel_codec = pb::FieldCodec.ForClassWrapper<string>(50);
    private string tel_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Tel {
      get { return tel_; }
      set {
        tel_ = value;
      }
    }

    /// <summary>Field number for the "Adres" field.</summary>
    public const int AdresFieldNumber = 7;
    private static readonly pb::FieldCodec<string> _single_adres_codec = pb::FieldCodec.ForClassWrapper<string>(58);
    private string adres_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Adres {
      get { return adres_; }
      set {
        adres_ = value;
      }
    }

    /// <summary>Field number for the "Sorumlu" field.</summary>
    public const int SorumluFieldNumber = 8;
    private static readonly pb::FieldCodec<string> _single_sorumlu_codec = pb::FieldCodec.ForClassWrapper<string>(66);
    private string sorumlu_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Sorumlu {
      get { return sorumlu_; }
      set {
        sorumlu_ = value;
      }
    }

    /// <summary>Field number for the "VrgDN" field.</summary>
    public const int VrgDNFieldNumber = 9;
    private static readonly pb::FieldCodec<string> _single_vrgDN_codec = pb::FieldCodec.ForClassWrapper<string>(74);
    private string vrgDN_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string VrgDN {
      get { return vrgDN_; }
      set {
        vrgDN_ = value;
      }
    }

    /// <summary>Field number for the "AHPbrc" field.</summary>
    public const int AHPbrcFieldNumber = 10;
    private ulong aHPbrc_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong AHPbrc {
      get { return aHPbrc_; }
      set {
        aHPbrc_ = value;
      }
    }

    /// <summary>Field number for the "AHPalc" field.</summary>
    public const int AHPalcFieldNumber = 11;
    private ulong aHPalc_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong AHPalc {
      get { return aHPalc_; }
      set {
        aHPalc_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as KFTproxy);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(KFTproxy other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (RowSte != other.RowSte) return false;
      if (RowErr != other.RowErr) return false;
      if (RowUsr != other.RowUsr) return false;
      if (RowKey != other.RowKey) return false;
      if (Ad != other.Ad) return false;
      if (Tel != other.Tel) return false;
      if (Adres != other.Adres) return false;
      if (Sorumlu != other.Sorumlu) return false;
      if (VrgDN != other.VrgDN) return false;
      if (AHPbrc != other.AHPbrc) return false;
      if (AHPalc != other.AHPalc) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (RowSte.Length != 0) hash ^= RowSte.GetHashCode();
      if (RowErr.Length != 0) hash ^= RowErr.GetHashCode();
      if (RowUsr != 0UL) hash ^= RowUsr.GetHashCode();
      if (RowKey != 0UL) hash ^= RowKey.GetHashCode();
      if (ad_ != null) hash ^= Ad.GetHashCode();
      if (tel_ != null) hash ^= Tel.GetHashCode();
      if (adres_ != null) hash ^= Adres.GetHashCode();
      if (sorumlu_ != null) hash ^= Sorumlu.GetHashCode();
      if (vrgDN_ != null) hash ^= VrgDN.GetHashCode();
      if (AHPbrc != 0UL) hash ^= AHPbrc.GetHashCode();
      if (AHPalc != 0UL) hash ^= AHPalc.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (RowSte.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(RowSte);
      }
      if (RowErr.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(RowErr);
      }
      if (RowUsr != 0UL) {
        output.WriteRawTag(24);
        output.WriteUInt64(RowUsr);
      }
      if (RowKey != 0UL) {
        output.WriteRawTag(32);
        output.WriteUInt64(RowKey);
      }
      if (ad_ != null) {
        _single_ad_codec.WriteTagAndValue(output, Ad);
      }
      if (tel_ != null) {
        _single_tel_codec.WriteTagAndValue(output, Tel);
      }
      if (adres_ != null) {
        _single_adres_codec.WriteTagAndValue(output, Adres);
      }
      if (sorumlu_ != null) {
        _single_sorumlu_codec.WriteTagAndValue(output, Sorumlu);
      }
      if (vrgDN_ != null) {
        _single_vrgDN_codec.WriteTagAndValue(output, VrgDN);
      }
      if (AHPbrc != 0UL) {
        output.WriteRawTag(80);
        output.WriteUInt64(AHPbrc);
      }
      if (AHPalc != 0UL) {
        output.WriteRawTag(88);
        output.WriteUInt64(AHPalc);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (RowSte.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(RowSte);
      }
      if (RowErr.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(RowErr);
      }
      if (RowUsr != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(RowUsr);
      }
      if (RowKey != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(RowKey);
      }
      if (ad_ != null) {
        size += _single_ad_codec.CalculateSizeWithTag(Ad);
      }
      if (tel_ != null) {
        size += _single_tel_codec.CalculateSizeWithTag(Tel);
      }
      if (adres_ != null) {
        size += _single_adres_codec.CalculateSizeWithTag(Adres);
      }
      if (sorumlu_ != null) {
        size += _single_sorumlu_codec.CalculateSizeWithTag(Sorumlu);
      }
      if (vrgDN_ != null) {
        size += _single_vrgDN_codec.CalculateSizeWithTag(VrgDN);
      }
      if (AHPbrc != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(AHPbrc);
      }
      if (AHPalc != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(AHPalc);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(KFTproxy other) {
      if (other == null) {
        return;
      }
      if (other.RowSte.Length != 0) {
        RowSte = other.RowSte;
      }
      if (other.RowErr.Length != 0) {
        RowErr = other.RowErr;
      }
      if (other.RowUsr != 0UL) {
        RowUsr = other.RowUsr;
      }
      if (other.RowKey != 0UL) {
        RowKey = other.RowKey;
      }
      if (other.ad_ != null) {
        if (ad_ == null || other.Ad != "") {
          Ad = other.Ad;
        }
      }
      if (other.tel_ != null) {
        if (tel_ == null || other.Tel != "") {
          Tel = other.Tel;
        }
      }
      if (other.adres_ != null) {
        if (adres_ == null || other.Adres != "") {
          Adres = other.Adres;
        }
      }
      if (other.sorumlu_ != null) {
        if (sorumlu_ == null || other.Sorumlu != "") {
          Sorumlu = other.Sorumlu;
        }
      }
      if (other.vrgDN_ != null) {
        if (vrgDN_ == null || other.VrgDN != "") {
          VrgDN = other.VrgDN;
        }
      }
      if (other.AHPbrc != 0UL) {
        AHPbrc = other.AHPbrc;
      }
      if (other.AHPalc != 0UL) {
        AHPalc = other.AHPalc;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            RowSte = input.ReadString();
            break;
          }
          case 18: {
            RowErr = input.ReadString();
            break;
          }
          case 24: {
            RowUsr = input.ReadUInt64();
            break;
          }
          case 32: {
            RowKey = input.ReadUInt64();
            break;
          }
          case 42: {
            string value = _single_ad_codec.Read(input);
            if (ad_ == null || value != "") {
              Ad = value;
            }
            break;
          }
          case 50: {
            string value = _single_tel_codec.Read(input);
            if (tel_ == null || value != "") {
              Tel = value;
            }
            break;
          }
          case 58: {
            string value = _single_adres_codec.Read(input);
            if (adres_ == null || value != "") {
              Adres = value;
            }
            break;
          }
          case 66: {
            string value = _single_sorumlu_codec.Read(input);
            if (sorumlu_ == null || value != "") {
              Sorumlu = value;
            }
            break;
          }
          case 74: {
            string value = _single_vrgDN_codec.Read(input);
            if (vrgDN_ == null || value != "") {
              VrgDN = value;
            }
            break;
          }
          case 80: {
            AHPbrc = input.ReadUInt64();
            break;
          }
          case 88: {
            AHPalc = input.ReadUInt64();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// User
  /// </summary>
  public sealed partial class UUUproxy : pb::IMessage<UUUproxy> {
    private static readonly pb::MessageParser<UUUproxy> _parser = new pb::MessageParser<UUUproxy>(() => new UUUproxy());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<UUUproxy> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Rest.RestReflection.Descriptor.MessageTypes[17]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public UUUproxy() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public UUUproxy(UUUproxy other) : this() {
      rowSte_ = other.rowSte_;
      rowErr_ = other.rowErr_;
      rowUsr_ = other.rowUsr_;
      rowKey_ = other.rowKey_;
      uYT_ = other.uYT_;
      ad_ = other.ad_;
      pwd_ = other.pwd_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public UUUproxy Clone() {
      return new UUUproxy(this);
    }

    /// <summary>Field number for the "RowSte" field.</summary>
    public const int RowSteFieldNumber = 1;
    private string rowSte_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string RowSte {
      get { return rowSte_; }
      set {
        rowSte_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "RowErr" field.</summary>
    public const int RowErrFieldNumber = 2;
    private string rowErr_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string RowErr {
      get { return rowErr_; }
      set {
        rowErr_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "RowUsr" field.</summary>
    public const int RowUsrFieldNumber = 3;
    private ulong rowUsr_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong RowUsr {
      get { return rowUsr_; }
      set {
        rowUsr_ = value;
      }
    }

    /// <summary>Field number for the "RowKey" field.</summary>
    public const int RowKeyFieldNumber = 4;
    private ulong rowKey_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong RowKey {
      get { return rowKey_; }
      set {
        rowKey_ = value;
      }
    }

    /// <summary>Field number for the "UYT" field.</summary>
    public const int UYTFieldNumber = 5;
    private ulong uYT_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong UYT {
      get { return uYT_; }
      set {
        uYT_ = value;
      }
    }

    /// <summary>Field number for the "Ad" field.</summary>
    public const int AdFieldNumber = 6;
    private string ad_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Ad {
      get { return ad_; }
      set {
        ad_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "Pwd" field.</summary>
    public const int PwdFieldNumber = 7;
    private string pwd_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Pwd {
      get { return pwd_; }
      set {
        pwd_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as UUUproxy);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(UUUproxy other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (RowSte != other.RowSte) return false;
      if (RowErr != other.RowErr) return false;
      if (RowUsr != other.RowUsr) return false;
      if (RowKey != other.RowKey) return false;
      if (UYT != other.UYT) return false;
      if (Ad != other.Ad) return false;
      if (Pwd != other.Pwd) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (RowSte.Length != 0) hash ^= RowSte.GetHashCode();
      if (RowErr.Length != 0) hash ^= RowErr.GetHashCode();
      if (RowUsr != 0UL) hash ^= RowUsr.GetHashCode();
      if (RowKey != 0UL) hash ^= RowKey.GetHashCode();
      if (UYT != 0UL) hash ^= UYT.GetHashCode();
      if (Ad.Length != 0) hash ^= Ad.GetHashCode();
      if (Pwd.Length != 0) hash ^= Pwd.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (RowSte.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(RowSte);
      }
      if (RowErr.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(RowErr);
      }
      if (RowUsr != 0UL) {
        output.WriteRawTag(24);
        output.WriteUInt64(RowUsr);
      }
      if (RowKey != 0UL) {
        output.WriteRawTag(32);
        output.WriteUInt64(RowKey);
      }
      if (UYT != 0UL) {
        output.WriteRawTag(40);
        output.WriteUInt64(UYT);
      }
      if (Ad.Length != 0) {
        output.WriteRawTag(50);
        output.WriteString(Ad);
      }
      if (Pwd.Length != 0) {
        output.WriteRawTag(58);
        output.WriteString(Pwd);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (RowSte.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(RowSte);
      }
      if (RowErr.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(RowErr);
      }
      if (RowUsr != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(RowUsr);
      }
      if (RowKey != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(RowKey);
      }
      if (UYT != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(UYT);
      }
      if (Ad.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Ad);
      }
      if (Pwd.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Pwd);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(UUUproxy other) {
      if (other == null) {
        return;
      }
      if (other.RowSte.Length != 0) {
        RowSte = other.RowSte;
      }
      if (other.RowErr.Length != 0) {
        RowErr = other.RowErr;
      }
      if (other.RowUsr != 0UL) {
        RowUsr = other.RowUsr;
      }
      if (other.RowKey != 0UL) {
        RowKey = other.RowKey;
      }
      if (other.UYT != 0UL) {
        UYT = other.UYT;
      }
      if (other.Ad.Length != 0) {
        Ad = other.Ad;
      }
      if (other.Pwd.Length != 0) {
        Pwd = other.Pwd;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            RowSte = input.ReadString();
            break;
          }
          case 18: {
            RowErr = input.ReadString();
            break;
          }
          case 24: {
            RowUsr = input.ReadUInt64();
            break;
          }
          case 32: {
            RowKey = input.ReadUInt64();
            break;
          }
          case 40: {
            UYT = input.ReadUInt64();
            break;
          }
          case 50: {
            Ad = input.ReadString();
            break;
          }
          case 58: {
            Pwd = input.ReadString();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// UserYetkiTanimlari
  /// </summary>
  public sealed partial class UYTproxy : pb::IMessage<UYTproxy> {
    private static readonly pb::MessageParser<UYTproxy> _parser = new pb::MessageParser<UYTproxy>(() => new UYTproxy());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<UYTproxy> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Rest.RestReflection.Descriptor.MessageTypes[18]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public UYTproxy() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public UYTproxy(UYTproxy other) : this() {
      rowSte_ = other.rowSte_;
      rowErr_ = other.rowErr_;
      rowUsr_ = other.rowUsr_;
      rowKey_ = other.rowKey_;
      ad_ = other.ad_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public UYTproxy Clone() {
      return new UYTproxy(this);
    }

    /// <summary>Field number for the "RowSte" field.</summary>
    public const int RowSteFieldNumber = 1;
    private string rowSte_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string RowSte {
      get { return rowSte_; }
      set {
        rowSte_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "RowErr" field.</summary>
    public const int RowErrFieldNumber = 2;
    private string rowErr_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string RowErr {
      get { return rowErr_; }
      set {
        rowErr_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "RowUsr" field.</summary>
    public const int RowUsrFieldNumber = 3;
    private ulong rowUsr_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong RowUsr {
      get { return rowUsr_; }
      set {
        rowUsr_ = value;
      }
    }

    /// <summary>Field number for the "RowKey" field.</summary>
    public const int RowKeyFieldNumber = 4;
    private ulong rowKey_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong RowKey {
      get { return rowKey_; }
      set {
        rowKey_ = value;
      }
    }

    /// <summary>Field number for the "Ad" field.</summary>
    public const int AdFieldNumber = 5;
    private string ad_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Ad {
      get { return ad_; }
      set {
        ad_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as UYTproxy);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(UYTproxy other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (RowSte != other.RowSte) return false;
      if (RowErr != other.RowErr) return false;
      if (RowUsr != other.RowUsr) return false;
      if (RowKey != other.RowKey) return false;
      if (Ad != other.Ad) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (RowSte.Length != 0) hash ^= RowSte.GetHashCode();
      if (RowErr.Length != 0) hash ^= RowErr.GetHashCode();
      if (RowUsr != 0UL) hash ^= RowUsr.GetHashCode();
      if (RowKey != 0UL) hash ^= RowKey.GetHashCode();
      if (Ad.Length != 0) hash ^= Ad.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (RowSte.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(RowSte);
      }
      if (RowErr.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(RowErr);
      }
      if (RowUsr != 0UL) {
        output.WriteRawTag(24);
        output.WriteUInt64(RowUsr);
      }
      if (RowKey != 0UL) {
        output.WriteRawTag(32);
        output.WriteUInt64(RowKey);
      }
      if (Ad.Length != 0) {
        output.WriteRawTag(42);
        output.WriteString(Ad);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (RowSte.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(RowSte);
      }
      if (RowErr.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(RowErr);
      }
      if (RowUsr != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(RowUsr);
      }
      if (RowKey != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(RowKey);
      }
      if (Ad.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Ad);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(UYTproxy other) {
      if (other == null) {
        return;
      }
      if (other.RowSte.Length != 0) {
        RowSte = other.RowSte;
      }
      if (other.RowErr.Length != 0) {
        RowErr = other.RowErr;
      }
      if (other.RowUsr != 0UL) {
        RowUsr = other.RowUsr;
      }
      if (other.RowKey != 0UL) {
        RowKey = other.RowKey;
      }
      if (other.Ad.Length != 0) {
        Ad = other.Ad;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            RowSte = input.ReadString();
            break;
          }
          case 18: {
            RowErr = input.ReadString();
            break;
          }
          case 24: {
            RowUsr = input.ReadUInt64();
            break;
          }
          case 32: {
            RowKey = input.ReadUInt64();
            break;
          }
          case 42: {
            Ad = input.ReadString();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// UserYetkiHiyerarsi
  /// </summary>
  public sealed partial class UYHproxy : pb::IMessage<UYHproxy> {
    private static readonly pb::MessageParser<UYHproxy> _parser = new pb::MessageParser<UYHproxy>(() => new UYHproxy());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<UYHproxy> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Rest.RestReflection.Descriptor.MessageTypes[19]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public UYHproxy() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public UYHproxy(UYHproxy other) : this() {
      rowSte_ = other.rowSte_;
      rowErr_ = other.rowErr_;
      rowUsr_ = other.rowUsr_;
      rowKey_ = other.rowKey_;
      p_ = other.p_;
      k_ = other.k_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public UYHproxy Clone() {
      return new UYHproxy(this);
    }

    /// <summary>Field number for the "RowSte" field.</summary>
    public const int RowSteFieldNumber = 1;
    private string rowSte_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string RowSte {
      get { return rowSte_; }
      set {
        rowSte_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "RowErr" field.</summary>
    public const int RowErrFieldNumber = 2;
    private string rowErr_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string RowErr {
      get { return rowErr_; }
      set {
        rowErr_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "RowUsr" field.</summary>
    public const int RowUsrFieldNumber = 3;
    private ulong rowUsr_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong RowUsr {
      get { return rowUsr_; }
      set {
        rowUsr_ = value;
      }
    }

    /// <summary>Field number for the "RowKey" field.</summary>
    public const int RowKeyFieldNumber = 4;
    private ulong rowKey_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong RowKey {
      get { return rowKey_; }
      set {
        rowKey_ = value;
      }
    }

    /// <summary>Field number for the "P" field.</summary>
    public const int PFieldNumber = 5;
    private ulong p_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong P {
      get { return p_; }
      set {
        p_ = value;
      }
    }

    /// <summary>Field number for the "K" field.</summary>
    public const int KFieldNumber = 6;
    private ulong k_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong K {
      get { return k_; }
      set {
        k_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as UYHproxy);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(UYHproxy other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (RowSte != other.RowSte) return false;
      if (RowErr != other.RowErr) return false;
      if (RowUsr != other.RowUsr) return false;
      if (RowKey != other.RowKey) return false;
      if (P != other.P) return false;
      if (K != other.K) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (RowSte.Length != 0) hash ^= RowSte.GetHashCode();
      if (RowErr.Length != 0) hash ^= RowErr.GetHashCode();
      if (RowUsr != 0UL) hash ^= RowUsr.GetHashCode();
      if (RowKey != 0UL) hash ^= RowKey.GetHashCode();
      if (P != 0UL) hash ^= P.GetHashCode();
      if (K != 0UL) hash ^= K.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (RowSte.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(RowSte);
      }
      if (RowErr.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(RowErr);
      }
      if (RowUsr != 0UL) {
        output.WriteRawTag(24);
        output.WriteUInt64(RowUsr);
      }
      if (RowKey != 0UL) {
        output.WriteRawTag(32);
        output.WriteUInt64(RowKey);
      }
      if (P != 0UL) {
        output.WriteRawTag(40);
        output.WriteUInt64(P);
      }
      if (K != 0UL) {
        output.WriteRawTag(48);
        output.WriteUInt64(K);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (RowSte.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(RowSte);
      }
      if (RowErr.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(RowErr);
      }
      if (RowUsr != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(RowUsr);
      }
      if (RowKey != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(RowKey);
      }
      if (P != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(P);
      }
      if (K != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(K);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(UYHproxy other) {
      if (other == null) {
        return;
      }
      if (other.RowSte.Length != 0) {
        RowSte = other.RowSte;
      }
      if (other.RowErr.Length != 0) {
        RowErr = other.RowErr;
      }
      if (other.RowUsr != 0UL) {
        RowUsr = other.RowUsr;
      }
      if (other.RowKey != 0UL) {
        RowKey = other.RowKey;
      }
      if (other.P != 0UL) {
        P = other.P;
      }
      if (other.K != 0UL) {
        K = other.K;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            RowSte = input.ReadString();
            break;
          }
          case 18: {
            RowErr = input.ReadString();
            break;
          }
          case 24: {
            RowUsr = input.ReadUInt64();
            break;
          }
          case 32: {
            RowKey = input.ReadUInt64();
            break;
          }
          case 40: {
            P = input.ReadUInt64();
            break;
          }
          case 48: {
            K = input.ReadUInt64();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// NNN Ne
  /// </summary>
  public sealed partial class NNNproxy : pb::IMessage<NNNproxy> {
    private static readonly pb::MessageParser<NNNproxy> _parser = new pb::MessageParser<NNNproxy>(() => new NNNproxy());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<NNNproxy> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Rest.RestReflection.Descriptor.MessageTypes[20]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public NNNproxy() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public NNNproxy(NNNproxy other) : this() {
      rowSte_ = other.rowSte_;
      rowErr_ = other.rowErr_;
      rowUsr_ = other.rowUsr_;
      rowKey_ = other.rowKey_;
      Kd = other.Kd;
      Ad = other.Ad;
      bRM_ = other.bRM_;
      fyt_ = other.fyt_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public NNNproxy Clone() {
      return new NNNproxy(this);
    }

    /// <summary>Field number for the "RowSte" field.</summary>
    public const int RowSteFieldNumber = 1;
    private string rowSte_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string RowSte {
      get { return rowSte_; }
      set {
        rowSte_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "RowErr" field.</summary>
    public const int RowErrFieldNumber = 2;
    private string rowErr_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string RowErr {
      get { return rowErr_; }
      set {
        rowErr_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "RowUsr" field.</summary>
    public const int RowUsrFieldNumber = 3;
    private ulong rowUsr_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong RowUsr {
      get { return rowUsr_; }
      set {
        rowUsr_ = value;
      }
    }

    /// <summary>Field number for the "RowKey" field.</summary>
    public const int RowKeyFieldNumber = 4;
    private ulong rowKey_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong RowKey {
      get { return rowKey_; }
      set {
        rowKey_ = value;
      }
    }

    /// <summary>Field number for the "Kd" field.</summary>
    public const int KdFieldNumber = 5;
    private static readonly pb::FieldCodec<string> _single_kd_codec = pb::FieldCodec.ForClassWrapper<string>(42);
    private string kd_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Kd {
      get { return kd_; }
      set {
        kd_ = value;
      }
    }

    /// <summary>Field number for the "Ad" field.</summary>
    public const int AdFieldNumber = 6;
    private static readonly pb::FieldCodec<string> _single_ad_codec = pb::FieldCodec.ForClassWrapper<string>(50);
    private string ad_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Ad {
      get { return ad_; }
      set {
        ad_ = value;
      }
    }

    /// <summary>Field number for the "BRM" field.</summary>
    public const int BRMFieldNumber = 7;
    private ulong bRM_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong BRM {
      get { return bRM_; }
      set {
        bRM_ = value;
      }
    }

    /// <summary>Field number for the "Fyt" field.</summary>
    public const int FytFieldNumber = 8;
    private double fyt_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double Fyt {
      get { return fyt_; }
      set {
        fyt_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as NNNproxy);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(NNNproxy other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (RowSte != other.RowSte) return false;
      if (RowErr != other.RowErr) return false;
      if (RowUsr != other.RowUsr) return false;
      if (RowKey != other.RowKey) return false;
      if (Kd != other.Kd) return false;
      if (Ad != other.Ad) return false;
      if (BRM != other.BRM) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(Fyt, other.Fyt)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (RowSte.Length != 0) hash ^= RowSte.GetHashCode();
      if (RowErr.Length != 0) hash ^= RowErr.GetHashCode();
      if (RowUsr != 0UL) hash ^= RowUsr.GetHashCode();
      if (RowKey != 0UL) hash ^= RowKey.GetHashCode();
      if (kd_ != null) hash ^= Kd.GetHashCode();
      if (ad_ != null) hash ^= Ad.GetHashCode();
      if (BRM != 0UL) hash ^= BRM.GetHashCode();
      if (Fyt != 0D) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(Fyt);
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (RowSte.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(RowSte);
      }
      if (RowErr.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(RowErr);
      }
      if (RowUsr != 0UL) {
        output.WriteRawTag(24);
        output.WriteUInt64(RowUsr);
      }
      if (RowKey != 0UL) {
        output.WriteRawTag(32);
        output.WriteUInt64(RowKey);
      }
      if (kd_ != null) {
        _single_kd_codec.WriteTagAndValue(output, Kd);
      }
      if (ad_ != null) {
        _single_ad_codec.WriteTagAndValue(output, Ad);
      }
      if (BRM != 0UL) {
        output.WriteRawTag(56);
        output.WriteUInt64(BRM);
      }
      if (Fyt != 0D) {
        output.WriteRawTag(65);
        output.WriteDouble(Fyt);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (RowSte.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(RowSte);
      }
      if (RowErr.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(RowErr);
      }
      if (RowUsr != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(RowUsr);
      }
      if (RowKey != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(RowKey);
      }
      if (kd_ != null) {
        size += _single_kd_codec.CalculateSizeWithTag(Kd);
      }
      if (ad_ != null) {
        size += _single_ad_codec.CalculateSizeWithTag(Ad);
      }
      if (BRM != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(BRM);
      }
      if (Fyt != 0D) {
        size += 1 + 8;
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(NNNproxy other) {
      if (other == null) {
        return;
      }
      if (other.RowSte.Length != 0) {
        RowSte = other.RowSte;
      }
      if (other.RowErr.Length != 0) {
        RowErr = other.RowErr;
      }
      if (other.RowUsr != 0UL) {
        RowUsr = other.RowUsr;
      }
      if (other.RowKey != 0UL) {
        RowKey = other.RowKey;
      }
      if (other.kd_ != null) {
        if (kd_ == null || other.Kd != "") {
          Kd = other.Kd;
        }
      }
      if (other.ad_ != null) {
        if (ad_ == null || other.Ad != "") {
          Ad = other.Ad;
        }
      }
      if (other.BRM != 0UL) {
        BRM = other.BRM;
      }
      if (other.Fyt != 0D) {
        Fyt = other.Fyt;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            RowSte = input.ReadString();
            break;
          }
          case 18: {
            RowErr = input.ReadString();
            break;
          }
          case 24: {
            RowUsr = input.ReadUInt64();
            break;
          }
          case 32: {
            RowKey = input.ReadUInt64();
            break;
          }
          case 42: {
            string value = _single_kd_codec.Read(input);
            if (kd_ == null || value != "") {
              Kd = value;
            }
            break;
          }
          case 50: {
            string value = _single_ad_codec.Read(input);
            if (ad_ == null || value != "") {
              Ad = value;
            }
            break;
          }
          case 56: {
            BRM = input.ReadUInt64();
            break;
          }
          case 65: {
            Fyt = input.ReadDouble();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// ToKPT KimPersonelTanim
  /// </summary>
  public sealed partial class ToKPTproxy : pb::IMessage<ToKPTproxy> {
    private static readonly pb::MessageParser<ToKPTproxy> _parser = new pb::MessageParser<ToKPTproxy>(() => new ToKPTproxy());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ToKPTproxy> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Rest.RestReflection.Descriptor.MessageTypes[21]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ToKPTproxy() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ToKPTproxy(ToKPTproxy other) : this() {
      rowSte_ = other.rowSte_;
      rowErr_ = other.rowErr_;
      rowUsr_ = other.rowUsr_;
      rowKey_ = other.rowKey_;
      p_ = other.p_;
      Kd = other.Kd;
      Ad = other.Ad;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ToKPTproxy Clone() {
      return new ToKPTproxy(this);
    }

    /// <summary>Field number for the "RowSte" field.</summary>
    public const int RowSteFieldNumber = 1;
    private string rowSte_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string RowSte {
      get { return rowSte_; }
      set {
        rowSte_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "RowErr" field.</summary>
    public const int RowErrFieldNumber = 2;
    private string rowErr_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string RowErr {
      get { return rowErr_; }
      set {
        rowErr_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "RowUsr" field.</summary>
    public const int RowUsrFieldNumber = 3;
    private ulong rowUsr_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong RowUsr {
      get { return rowUsr_; }
      set {
        rowUsr_ = value;
      }
    }

    /// <summary>Field number for the "RowKey" field.</summary>
    public const int RowKeyFieldNumber = 4;
    private ulong rowKey_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong RowKey {
      get { return rowKey_; }
      set {
        rowKey_ = value;
      }
    }

    /// <summary>Field number for the "P" field.</summary>
    public const int PFieldNumber = 5;
    private ulong p_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong P {
      get { return p_; }
      set {
        p_ = value;
      }
    }

    /// <summary>Field number for the "Kd" field.</summary>
    public const int KdFieldNumber = 6;
    private static readonly pb::FieldCodec<string> _single_kd_codec = pb::FieldCodec.ForClassWrapper<string>(50);
    private string kd_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Kd {
      get { return kd_; }
      set {
        kd_ = value;
      }
    }

    /// <summary>Field number for the "Ad" field.</summary>
    public const int AdFieldNumber = 7;
    private static readonly pb::FieldCodec<string> _single_ad_codec = pb::FieldCodec.ForClassWrapper<string>(58);
    private string ad_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Ad {
      get { return ad_; }
      set {
        ad_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ToKPTproxy);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ToKPTproxy other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (RowSte != other.RowSte) return false;
      if (RowErr != other.RowErr) return false;
      if (RowUsr != other.RowUsr) return false;
      if (RowKey != other.RowKey) return false;
      if (P != other.P) return false;
      if (Kd != other.Kd) return false;
      if (Ad != other.Ad) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (RowSte.Length != 0) hash ^= RowSte.GetHashCode();
      if (RowErr.Length != 0) hash ^= RowErr.GetHashCode();
      if (RowUsr != 0UL) hash ^= RowUsr.GetHashCode();
      if (RowKey != 0UL) hash ^= RowKey.GetHashCode();
      if (P != 0UL) hash ^= P.GetHashCode();
      if (kd_ != null) hash ^= Kd.GetHashCode();
      if (ad_ != null) hash ^= Ad.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (RowSte.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(RowSte);
      }
      if (RowErr.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(RowErr);
      }
      if (RowUsr != 0UL) {
        output.WriteRawTag(24);
        output.WriteUInt64(RowUsr);
      }
      if (RowKey != 0UL) {
        output.WriteRawTag(32);
        output.WriteUInt64(RowKey);
      }
      if (P != 0UL) {
        output.WriteRawTag(40);
        output.WriteUInt64(P);
      }
      if (kd_ != null) {
        _single_kd_codec.WriteTagAndValue(output, Kd);
      }
      if (ad_ != null) {
        _single_ad_codec.WriteTagAndValue(output, Ad);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (RowSte.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(RowSte);
      }
      if (RowErr.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(RowErr);
      }
      if (RowUsr != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(RowUsr);
      }
      if (RowKey != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(RowKey);
      }
      if (P != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(P);
      }
      if (kd_ != null) {
        size += _single_kd_codec.CalculateSizeWithTag(Kd);
      }
      if (ad_ != null) {
        size += _single_ad_codec.CalculateSizeWithTag(Ad);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ToKPTproxy other) {
      if (other == null) {
        return;
      }
      if (other.RowSte.Length != 0) {
        RowSte = other.RowSte;
      }
      if (other.RowErr.Length != 0) {
        RowErr = other.RowErr;
      }
      if (other.RowUsr != 0UL) {
        RowUsr = other.RowUsr;
      }
      if (other.RowKey != 0UL) {
        RowKey = other.RowKey;
      }
      if (other.P != 0UL) {
        P = other.P;
      }
      if (other.kd_ != null) {
        if (kd_ == null || other.Kd != "") {
          Kd = other.Kd;
        }
      }
      if (other.ad_ != null) {
        if (ad_ == null || other.Ad != "") {
          Ad = other.Ad;
        }
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            RowSte = input.ReadString();
            break;
          }
          case 18: {
            RowErr = input.ReadString();
            break;
          }
          case 24: {
            RowUsr = input.ReadUInt64();
            break;
          }
          case 32: {
            RowKey = input.ReadUInt64();
            break;
          }
          case 40: {
            P = input.ReadUInt64();
            break;
          }
          case 50: {
            string value = _single_kd_codec.Read(input);
            if (kd_ == null || value != "") {
              Kd = value;
            }
            break;
          }
          case 58: {
            string value = _single_ad_codec.Read(input);
            if (ad_ == null || value != "") {
              Ad = value;
            }
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// ToKDT KimDepartmanTanim
  /// </summary>
  public sealed partial class ToKDTproxy : pb::IMessage<ToKDTproxy> {
    private static readonly pb::MessageParser<ToKDTproxy> _parser = new pb::MessageParser<ToKDTproxy>(() => new ToKDTproxy());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ToKDTproxy> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Rest.RestReflection.Descriptor.MessageTypes[22]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ToKDTproxy() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ToKDTproxy(ToKDTproxy other) : this() {
      rowSte_ = other.rowSte_;
      rowErr_ = other.rowErr_;
      rowUsr_ = other.rowUsr_;
      rowKey_ = other.rowKey_;
      p_ = other.p_;
      Kd = other.Kd;
      Ad = other.Ad;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ToKDTproxy Clone() {
      return new ToKDTproxy(this);
    }

    /// <summary>Field number for the "RowSte" field.</summary>
    public const int RowSteFieldNumber = 1;
    private string rowSte_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string RowSte {
      get { return rowSte_; }
      set {
        rowSte_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "RowErr" field.</summary>
    public const int RowErrFieldNumber = 2;
    private string rowErr_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string RowErr {
      get { return rowErr_; }
      set {
        rowErr_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "RowUsr" field.</summary>
    public const int RowUsrFieldNumber = 3;
    private ulong rowUsr_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong RowUsr {
      get { return rowUsr_; }
      set {
        rowUsr_ = value;
      }
    }

    /// <summary>Field number for the "RowKey" field.</summary>
    public const int RowKeyFieldNumber = 4;
    private ulong rowKey_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong RowKey {
      get { return rowKey_; }
      set {
        rowKey_ = value;
      }
    }

    /// <summary>Field number for the "P" field.</summary>
    public const int PFieldNumber = 5;
    private ulong p_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong P {
      get { return p_; }
      set {
        p_ = value;
      }
    }

    /// <summary>Field number for the "Kd" field.</summary>
    public const int KdFieldNumber = 6;
    private static readonly pb::FieldCodec<string> _single_kd_codec = pb::FieldCodec.ForClassWrapper<string>(50);
    private string kd_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Kd {
      get { return kd_; }
      set {
        kd_ = value;
      }
    }

    /// <summary>Field number for the "Ad" field.</summary>
    public const int AdFieldNumber = 7;
    private static readonly pb::FieldCodec<string> _single_ad_codec = pb::FieldCodec.ForClassWrapper<string>(58);
    private string ad_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Ad {
      get { return ad_; }
      set {
        ad_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ToKDTproxy);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ToKDTproxy other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (RowSte != other.RowSte) return false;
      if (RowErr != other.RowErr) return false;
      if (RowUsr != other.RowUsr) return false;
      if (RowKey != other.RowKey) return false;
      if (P != other.P) return false;
      if (Kd != other.Kd) return false;
      if (Ad != other.Ad) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (RowSte.Length != 0) hash ^= RowSte.GetHashCode();
      if (RowErr.Length != 0) hash ^= RowErr.GetHashCode();
      if (RowUsr != 0UL) hash ^= RowUsr.GetHashCode();
      if (RowKey != 0UL) hash ^= RowKey.GetHashCode();
      if (P != 0UL) hash ^= P.GetHashCode();
      if (kd_ != null) hash ^= Kd.GetHashCode();
      if (ad_ != null) hash ^= Ad.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (RowSte.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(RowSte);
      }
      if (RowErr.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(RowErr);
      }
      if (RowUsr != 0UL) {
        output.WriteRawTag(24);
        output.WriteUInt64(RowUsr);
      }
      if (RowKey != 0UL) {
        output.WriteRawTag(32);
        output.WriteUInt64(RowKey);
      }
      if (P != 0UL) {
        output.WriteRawTag(40);
        output.WriteUInt64(P);
      }
      if (kd_ != null) {
        _single_kd_codec.WriteTagAndValue(output, Kd);
      }
      if (ad_ != null) {
        _single_ad_codec.WriteTagAndValue(output, Ad);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (RowSte.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(RowSte);
      }
      if (RowErr.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(RowErr);
      }
      if (RowUsr != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(RowUsr);
      }
      if (RowKey != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(RowKey);
      }
      if (P != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(P);
      }
      if (kd_ != null) {
        size += _single_kd_codec.CalculateSizeWithTag(Kd);
      }
      if (ad_ != null) {
        size += _single_ad_codec.CalculateSizeWithTag(Ad);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ToKDTproxy other) {
      if (other == null) {
        return;
      }
      if (other.RowSte.Length != 0) {
        RowSte = other.RowSte;
      }
      if (other.RowErr.Length != 0) {
        RowErr = other.RowErr;
      }
      if (other.RowUsr != 0UL) {
        RowUsr = other.RowUsr;
      }
      if (other.RowKey != 0UL) {
        RowKey = other.RowKey;
      }
      if (other.P != 0UL) {
        P = other.P;
      }
      if (other.kd_ != null) {
        if (kd_ == null || other.Kd != "") {
          Kd = other.Kd;
        }
      }
      if (other.ad_ != null) {
        if (ad_ == null || other.Ad != "") {
          Ad = other.Ad;
        }
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            RowSte = input.ReadString();
            break;
          }
          case 18: {
            RowErr = input.ReadString();
            break;
          }
          case 24: {
            RowUsr = input.ReadUInt64();
            break;
          }
          case 32: {
            RowKey = input.ReadUInt64();
            break;
          }
          case 40: {
            P = input.ReadUInt64();
            break;
          }
          case 50: {
            string value = _single_kd_codec.Read(input);
            if (kd_ == null || value != "") {
              Kd = value;
            }
            break;
          }
          case 58: {
            string value = _single_ad_codec.Read(input);
            if (ad_ == null || value != "") {
              Ad = value;
            }
            break;
          }
        }
      }
    }

  }

  #endregion

}

#endregion Designer generated code
