// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: protos/rest.proto
// </auto-generated>
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace Rest {

  /// <summary>Holder for reflection information generated from protos/rest.proto</summary>
  public static partial class RestReflection {

    #region Descriptor
    /// <summary>File descriptor for protos/rest.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static RestReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "ChFwcm90b3MvcmVzdC5wcm90bxIEcmVzdCIXCgZRcnlTdHISDQoFcXVlcnkY",
            "ASABKAkikwEKB1RibGFSZWMSEQoJcm93X3N0YXRlGAEgASgJEg8KB3Jvd19l",
            "cnIYAiABKAkSDgoGcm93X3BrGAMgASgEEg4KBmZsZFN0chgEIAEoCRIOCgZm",
            "bGRJbnQYBSABKAUSDgoGZmxkRGJsGAYgASgBEg4KBmZsZERjbRgHIAEoARIU",
            "CgxmbGREYXRlVGlja3MYCCABKAMyYgoFQ1JVRHMSKwoIVGJsYUZpbGwSDC5y",
            "ZXN0LlFyeVN0choNLnJlc3QuVGJsYVJlYyIAMAESLAoKVGJsYVVwZGF0ZRIN",
            "LnJlc3QuVGJsYVJlYxoNLnJlc3QuVGJsYVJlYyIAYgZwcm90bzM="));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { },
          new pbr::GeneratedClrTypeInfo(null, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::Rest.QryStr), global::Rest.QryStr.Parser, new[]{ "Query" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Rest.TblaRec), global::Rest.TblaRec.Parser, new[]{ "RowState", "RowErr", "RowPk", "FldStr", "FldInt", "FldDbl", "FldDcm", "FldDateTicks" }, null, null, null)
          }));
    }
    #endregion

  }
  #region Messages
  public sealed partial class QryStr : pb::IMessage<QryStr> {
    private static readonly pb::MessageParser<QryStr> _parser = new pb::MessageParser<QryStr>(() => new QryStr());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<QryStr> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Rest.RestReflection.Descriptor.MessageTypes[0]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public QryStr() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public QryStr(QryStr other) : this() {
      query_ = other.query_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public QryStr Clone() {
      return new QryStr(this);
    }

    /// <summary>Field number for the "query" field.</summary>
    public const int QueryFieldNumber = 1;
    private string query_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Query {
      get { return query_; }
      set {
        query_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as QryStr);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(QryStr other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Query != other.Query) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Query.Length != 0) hash ^= Query.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Query.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Query);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Query.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Query);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(QryStr other) {
      if (other == null) {
        return;
      }
      if (other.Query.Length != 0) {
        Query = other.Query;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            Query = input.ReadString();
            break;
          }
        }
      }
    }

  }

  public sealed partial class TblaRec : pb::IMessage<TblaRec> {
    private static readonly pb::MessageParser<TblaRec> _parser = new pb::MessageParser<TblaRec>(() => new TblaRec());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<TblaRec> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Rest.RestReflection.Descriptor.MessageTypes[1]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TblaRec() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TblaRec(TblaRec other) : this() {
      rowState_ = other.rowState_;
      rowErr_ = other.rowErr_;
      rowPk_ = other.rowPk_;
      fldStr_ = other.fldStr_;
      fldInt_ = other.fldInt_;
      fldDbl_ = other.fldDbl_;
      fldDcm_ = other.fldDcm_;
      fldDateTicks_ = other.fldDateTicks_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TblaRec Clone() {
      return new TblaRec(this);
    }

    /// <summary>Field number for the "row_state" field.</summary>
    public const int RowStateFieldNumber = 1;
    private string rowState_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string RowState {
      get { return rowState_; }
      set {
        rowState_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "row_err" field.</summary>
    public const int RowErrFieldNumber = 2;
    private string rowErr_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string RowErr {
      get { return rowErr_; }
      set {
        rowErr_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "row_pk" field.</summary>
    public const int RowPkFieldNumber = 3;
    private ulong rowPk_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong RowPk {
      get { return rowPk_; }
      set {
        rowPk_ = value;
      }
    }

    /// <summary>Field number for the "fldStr" field.</summary>
    public const int FldStrFieldNumber = 4;
    private string fldStr_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string FldStr {
      get { return fldStr_; }
      set {
        fldStr_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "fldInt" field.</summary>
    public const int FldIntFieldNumber = 5;
    private int fldInt_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int FldInt {
      get { return fldInt_; }
      set {
        fldInt_ = value;
      }
    }

    /// <summary>Field number for the "fldDbl" field.</summary>
    public const int FldDblFieldNumber = 6;
    private double fldDbl_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double FldDbl {
      get { return fldDbl_; }
      set {
        fldDbl_ = value;
      }
    }

    /// <summary>Field number for the "fldDcm" field.</summary>
    public const int FldDcmFieldNumber = 7;
    private double fldDcm_;
    /// <summary>
    /// String olabilir
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double FldDcm {
      get { return fldDcm_; }
      set {
        fldDcm_ = value;
      }
    }

    /// <summary>Field number for the "fldDateTicks" field.</summary>
    public const int FldDateTicksFieldNumber = 8;
    private long fldDateTicks_;
    /// <summary>
    /// new DateTime(fldDateTicks) => DateTime 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long FldDateTicks {
      get { return fldDateTicks_; }
      set {
        fldDateTicks_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as TblaRec);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(TblaRec other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (RowState != other.RowState) return false;
      if (RowErr != other.RowErr) return false;
      if (RowPk != other.RowPk) return false;
      if (FldStr != other.FldStr) return false;
      if (FldInt != other.FldInt) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(FldDbl, other.FldDbl)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(FldDcm, other.FldDcm)) return false;
      if (FldDateTicks != other.FldDateTicks) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (RowState.Length != 0) hash ^= RowState.GetHashCode();
      if (RowErr.Length != 0) hash ^= RowErr.GetHashCode();
      if (RowPk != 0UL) hash ^= RowPk.GetHashCode();
      if (FldStr.Length != 0) hash ^= FldStr.GetHashCode();
      if (FldInt != 0) hash ^= FldInt.GetHashCode();
      if (FldDbl != 0D) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(FldDbl);
      if (FldDcm != 0D) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(FldDcm);
      if (FldDateTicks != 0L) hash ^= FldDateTicks.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (RowState.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(RowState);
      }
      if (RowErr.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(RowErr);
      }
      if (RowPk != 0UL) {
        output.WriteRawTag(24);
        output.WriteUInt64(RowPk);
      }
      if (FldStr.Length != 0) {
        output.WriteRawTag(34);
        output.WriteString(FldStr);
      }
      if (FldInt != 0) {
        output.WriteRawTag(40);
        output.WriteInt32(FldInt);
      }
      if (FldDbl != 0D) {
        output.WriteRawTag(49);
        output.WriteDouble(FldDbl);
      }
      if (FldDcm != 0D) {
        output.WriteRawTag(57);
        output.WriteDouble(FldDcm);
      }
      if (FldDateTicks != 0L) {
        output.WriteRawTag(64);
        output.WriteInt64(FldDateTicks);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (RowState.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(RowState);
      }
      if (RowErr.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(RowErr);
      }
      if (RowPk != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(RowPk);
      }
      if (FldStr.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(FldStr);
      }
      if (FldInt != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(FldInt);
      }
      if (FldDbl != 0D) {
        size += 1 + 8;
      }
      if (FldDcm != 0D) {
        size += 1 + 8;
      }
      if (FldDateTicks != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(FldDateTicks);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(TblaRec other) {
      if (other == null) {
        return;
      }
      if (other.RowState.Length != 0) {
        RowState = other.RowState;
      }
      if (other.RowErr.Length != 0) {
        RowErr = other.RowErr;
      }
      if (other.RowPk != 0UL) {
        RowPk = other.RowPk;
      }
      if (other.FldStr.Length != 0) {
        FldStr = other.FldStr;
      }
      if (other.FldInt != 0) {
        FldInt = other.FldInt;
      }
      if (other.FldDbl != 0D) {
        FldDbl = other.FldDbl;
      }
      if (other.FldDcm != 0D) {
        FldDcm = other.FldDcm;
      }
      if (other.FldDateTicks != 0L) {
        FldDateTicks = other.FldDateTicks;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            RowState = input.ReadString();
            break;
          }
          case 18: {
            RowErr = input.ReadString();
            break;
          }
          case 24: {
            RowPk = input.ReadUInt64();
            break;
          }
          case 34: {
            FldStr = input.ReadString();
            break;
          }
          case 40: {
            FldInt = input.ReadInt32();
            break;
          }
          case 49: {
            FldDbl = input.ReadDouble();
            break;
          }
          case 57: {
            FldDcm = input.ReadDouble();
            break;
          }
          case 64: {
            FldDateTicks = input.ReadInt64();
            break;
          }
        }
      }
    }

  }

  #endregion

}

#endregion Designer generated code
