// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: protos/rest.proto
// </auto-generated>
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace Rest {

  /// <summary>Holder for reflection information generated from protos/rest.proto</summary>
  public static partial class RestReflection {

    #region Descriptor
    /// <summary>File descriptor for protos/rest.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static RestReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "ChFwcm90b3MvcmVzdC5wcm90bxIEcmVzdBoeZ29vZ2xlL3Byb3RvYnVmL3dy",
            "YXBwZXJzLnByb3RvIhUKB1BLcHJveHkSCgoCUEsYASABKAQiKAoIUXJ5UHJv",
            "eHkSDQoFcXVlcnkYASABKAkSDQoFcGFyYW0YAiABKAkikAEKCVRibGFQcm94",
            "eRIRCglyb3dfc3RhdGUYASABKAkSDwoHcm93X2VychgCIAEoCRIOCgZyb3df",
            "cGsYAyABKAQSDgoGZmxkU3RyGAQgASgJEg4KBmZsZEludBgFIAEoBRIOCgZm",
            "bGREYmwYBiABKAESDgoGZmxkRGNtGAcgASgBEg8KB2ZsZERhdGUYCCABKAMi",
            "qAEKCEFIUHByb3h5EhEKCXJvd19zdGF0ZRgBIAEoCRIPCgdyb3dfZXJyGAIg",
            "ASgJEg4KBnJvd19waxgDIAEoBBIMCgRPYmpQGAQgASgEEgoKAk5vGAUgASgJ",
            "EgoKAkFkGAYgASgJEg0KBUhzcE5vGAcgASgJEgsKA0JyYxgIIAEoARILCgNB",
            "bGMYCSABKAESCwoDSXNXGAogASgIEgwKBEhhc0gYCyABKAgirgEKCEFGQnBy",
            "b3h5EhEKCXJvd19zdGF0ZRgBIAEoCRIPCgdyb3dfZXJyGAIgASgJEg4KBnJv",
            "d19waxgDIAEoBBILCgNUcmgYBCABKAMSDgoGT2JqVHVyGAUgASgEEgsKA0Ry",
            "bRgGIAEoCRIqCgRJbmZvGAcgASgLMhwuZ29vZ2xlLnByb3RvYnVmLlN0cmlu",
            "Z1ZhbHVlEgsKA0JyYxgIIAEoARILCgNBbGMYCSABKAEiwwEKCEFGRHByb3h5",
            "EhEKCXJvd19zdGF0ZRgBIAEoCRIPCgdyb3dfZXJyGAIgASgJEg4KBnJvd19w",
            "axgDIAEoBBIOCgZPYmpBRkIYBCABKAQSDgoGT2JqQUhQGAUgASgEEioKBElu",
            "Zm8YBiABKAsyHC5nb29nbGUucHJvdG9idWYuU3RyaW5nVmFsdWUSCwoDVHV0",
            "GAcgASgBEg4KBk9iakR2ehgIIAEoBBILCgNLdXIYCSABKAISDQoFVHV0VEwY",
            "CiABKAEi2gEKCEFCQnByb3h5EhEKCXJvd19zdGF0ZRgBIAEoCRIPCgdyb3df",
            "ZXJyGAIgASgJEg4KBnJvd19waxgDIAEoBBILCgNUcmgYBCABKAMSDgoGT2Jq",
            "VHVyGAUgASgEEgsKA0RybRgGIAEoCRIOCgZPYmpLS0sYByABKAQSCgoCQkEY",
            "CCABKAkSDgoGT2JqRHZ6GAkgASgEEgsKA0t1chgKIAEoAhILCgNUdXQYCyAB",
            "KAESKgoESW5mbxgMIAEoCzIcLmdvb2dsZS5wcm90b2J1Zi5TdHJpbmdWYWx1",
            "ZSLeAQoIQUJEcHJveHkSEQoJcm93X3N0YXRlGAEgASgJEg8KB3Jvd19lcnIY",
            "AiABKAkSDgoGcm93X3BrGAMgASgEEg4KBk9iakFCQhgEIAEoBBIOCgZPYmpO",
            "Tk4YBSABKAQSDgoGT2JqQUhQGAYgASgEEgsKA0Z5dBgHIAEoARIOCgZPYmpE",
            "dnoYCCABKAQSCwoDTWlrGAkgASgBEgsKA0t1chgKIAEoAhILCgNLRFkYCyAB",
            "KAISKgoESW5mbxgMIAEoCzIcLmdvb2dsZS5wcm90b2J1Zi5TdHJpbmdWYWx1",
            "ZSJkCghYR1Rwcm94eRIRCglyb3dfc3RhdGUYASABKAkSDwoHcm93X2VychgC",
            "IAEoCRIOCgZyb3dfcGsYAyABKAQSDAoET2JqUBgEIAEoBBIKCgJLZBgFIAEo",
            "CRIKCgJBZBgGIAEoCSJ1CghYREtwcm94eRIRCglyb3dfc3RhdGUYASABKAkS",
            "DwoHcm93X2VychgCIAEoCRIOCgZyb3dfcGsYAyABKAQSCwoDVHJoGAQgASgD",
            "Eg4KBk9iakR2ehgFIAEoBBILCgNLdXIYBiABKAISCwoDRHZ6GAcgASgJItIC",
            "CghLTVRwcm94eRIRCglyb3dfc3RhdGUYASABKAkSDwoHcm93X2VychgCIAEo",
            "CRIOCgZyb3dfcGsYAyABKAQSKAoCQWQYBCABKAsyHC5nb29nbGUucHJvdG9i",
            "dWYuU3RyaW5nVmFsdWUSDgoGT2JqVHVyGAUgASgEEikKA1RlbBgGIAEoCzIc",
            "Lmdvb2dsZS5wcm90b2J1Zi5TdHJpbmdWYWx1ZRIrCgVBZHJlcxgHIAEoCzIc",
            "Lmdvb2dsZS5wcm90b2J1Zi5TdHJpbmdWYWx1ZRItCgdTb3J1bWx1GAggASgL",
            "MhwuZ29vZ2xlLnByb3RvYnVmLlN0cmluZ1ZhbHVlEisKBVZyZ0ROGAkgASgL",
            "MhwuZ29vZ2xlLnByb3RvYnVmLlN0cmluZ1ZhbHVlEhEKCU9iakFIUGJyYxgK",
            "IAEoBBIRCglPYmpBSFBhbGMYCyABKAQyiQcKBUNSVURzEi8KCFRibGFGaWxs",
            "Eg4ucmVzdC5RcnlQcm94eRoPLnJlc3QuVGJsYVByb3h5IgAwARIwCgpUYmxh",
            "VXBkYXRlEg8ucmVzdC5UYmxhUHJveHkaDy5yZXN0LlRibGFQcm94eSIAEi0K",
            "B0FIUGZpbGwSDi5yZXN0LlFyeVByb3h5Gg4ucmVzdC5BSFBwcm94eSIAMAES",
            "LQoJQUhQdXBkYXRlEg4ucmVzdC5BSFBwcm94eRoOLnJlc3QuQUhQcHJveHki",
            "ABItCgdBRkJmaWxsEg4ucmVzdC5RcnlQcm94eRoOLnJlc3QuQUZCcHJveHki",
            "ADABEi0KCUFGQnVwZGF0ZRIOLnJlc3QuQUZCcHJveHkaDi5yZXN0LkFGQnBy",
            "b3h5IgASLQoKQUZCZ2V0QnlQSxINLnJlc3QuUEtwcm94eRoOLnJlc3QuQUZC",
            "cHJveHkiABItCgdBRkRmaWxsEg4ucmVzdC5RcnlQcm94eRoOLnJlc3QuQUZE",
            "cHJveHkiADABEi0KCUFGRHVwZGF0ZRIOLnJlc3QuQUZEcHJveHkaDi5yZXN0",
            "LkFGRHByb3h5IgASLQoHQUJCZmlsbBIOLnJlc3QuUXJ5UHJveHkaDi5yZXN0",
            "LkFCQnByb3h5IgAwARItCglBQkJ1cGRhdGUSDi5yZXN0LkFCQnByb3h5Gg4u",
            "cmVzdC5BQkJwcm94eSIAEi0KB0FCRGZpbGwSDi5yZXN0LlFyeVByb3h5Gg4u",
            "cmVzdC5BQkRwcm94eSIAMAESLQoJQUJEdXBkYXRlEg4ucmVzdC5BQkRwcm94",
            "eRoOLnJlc3QuQUJEcHJveHkiABItCgdYR1RmaWxsEg4ucmVzdC5RcnlQcm94",
            "eRoOLnJlc3QuWEdUcHJveHkiADABEi0KCVhHVHVwZGF0ZRIOLnJlc3QuWEdU",
            "cHJveHkaDi5yZXN0LlhHVHByb3h5IgASLQoHWERLZmlsbBIOLnJlc3QuUXJ5",
            "UHJveHkaDi5yZXN0LlhES3Byb3h5IgAwARItCglYREt1cGRhdGUSDi5yZXN0",
            "LlhES3Byb3h5Gg4ucmVzdC5YREtwcm94eSIAEi0KB0tNVGZpbGwSDi5yZXN0",
            "LlFyeVByb3h5Gg4ucmVzdC5LTVRwcm94eSIAMAESLQoJS01UdXBkYXRlEg4u",
            "cmVzdC5LTVRwcm94eRoOLnJlc3QuS01UcHJveHkiAGIGcHJvdG8z"));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { global::Google.Protobuf.WellKnownTypes.WrappersReflection.Descriptor, },
          new pbr::GeneratedClrTypeInfo(null, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::Rest.PKproxy), global::Rest.PKproxy.Parser, new[]{ "PK" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Rest.QryProxy), global::Rest.QryProxy.Parser, new[]{ "Query", "Param" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Rest.TblaProxy), global::Rest.TblaProxy.Parser, new[]{ "RowState", "RowErr", "RowPk", "FldStr", "FldInt", "FldDbl", "FldDcm", "FldDate" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Rest.AHPproxy), global::Rest.AHPproxy.Parser, new[]{ "RowState", "RowErr", "RowPk", "ObjP", "No", "Ad", "HspNo", "Brc", "Alc", "IsW", "HasH" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Rest.AFBproxy), global::Rest.AFBproxy.Parser, new[]{ "RowState", "RowErr", "RowPk", "Trh", "ObjTur", "Drm", "Info", "Brc", "Alc" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Rest.AFDproxy), global::Rest.AFDproxy.Parser, new[]{ "RowState", "RowErr", "RowPk", "ObjAFB", "ObjAHP", "Info", "Tut", "ObjDvz", "Kur", "TutTL" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Rest.ABBproxy), global::Rest.ABBproxy.Parser, new[]{ "RowState", "RowErr", "RowPk", "Trh", "ObjTur", "Drm", "ObjKKK", "BA", "ObjDvz", "Kur", "Tut", "Info" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Rest.ABDproxy), global::Rest.ABDproxy.Parser, new[]{ "RowState", "RowErr", "RowPk", "ObjABB", "ObjNNN", "ObjAHP", "Fyt", "ObjDvz", "Mik", "Kur", "KDY", "Info" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Rest.XGTproxy), global::Rest.XGTproxy.Parser, new[]{ "RowState", "RowErr", "RowPk", "ObjP", "Kd", "Ad" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Rest.XDKproxy), global::Rest.XDKproxy.Parser, new[]{ "RowState", "RowErr", "RowPk", "Trh", "ObjDvz", "Kur", "Dvz" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Rest.KMTproxy), global::Rest.KMTproxy.Parser, new[]{ "RowState", "RowErr", "RowPk", "Ad", "ObjTur", "Tel", "Adres", "Sorumlu", "VrgDN", "ObjAHPbrc", "ObjAHPalc" }, null, null, null)
          }));
    }
    #endregion

  }
  #region Messages
  public sealed partial class PKproxy : pb::IMessage<PKproxy> {
    private static readonly pb::MessageParser<PKproxy> _parser = new pb::MessageParser<PKproxy>(() => new PKproxy());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<PKproxy> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Rest.RestReflection.Descriptor.MessageTypes[0]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PKproxy() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PKproxy(PKproxy other) : this() {
      pK_ = other.pK_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PKproxy Clone() {
      return new PKproxy(this);
    }

    /// <summary>Field number for the "PK" field.</summary>
    public const int PKFieldNumber = 1;
    private ulong pK_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong PK {
      get { return pK_; }
      set {
        pK_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as PKproxy);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(PKproxy other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (PK != other.PK) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (PK != 0UL) hash ^= PK.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (PK != 0UL) {
        output.WriteRawTag(8);
        output.WriteUInt64(PK);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (PK != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(PK);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(PKproxy other) {
      if (other == null) {
        return;
      }
      if (other.PK != 0UL) {
        PK = other.PK;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            PK = input.ReadUInt64();
            break;
          }
        }
      }
    }

  }

  public sealed partial class QryProxy : pb::IMessage<QryProxy> {
    private static readonly pb::MessageParser<QryProxy> _parser = new pb::MessageParser<QryProxy>(() => new QryProxy());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<QryProxy> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Rest.RestReflection.Descriptor.MessageTypes[1]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public QryProxy() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public QryProxy(QryProxy other) : this() {
      query_ = other.query_;
      param_ = other.param_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public QryProxy Clone() {
      return new QryProxy(this);
    }

    /// <summary>Field number for the "query" field.</summary>
    public const int QueryFieldNumber = 1;
    private string query_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Query {
      get { return query_; }
      set {
        query_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "param" field.</summary>
    public const int ParamFieldNumber = 2;
    private string param_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Param {
      get { return param_; }
      set {
        param_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as QryProxy);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(QryProxy other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Query != other.Query) return false;
      if (Param != other.Param) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Query.Length != 0) hash ^= Query.GetHashCode();
      if (Param.Length != 0) hash ^= Param.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Query.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Query);
      }
      if (Param.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(Param);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Query.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Query);
      }
      if (Param.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Param);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(QryProxy other) {
      if (other == null) {
        return;
      }
      if (other.Query.Length != 0) {
        Query = other.Query;
      }
      if (other.Param.Length != 0) {
        Param = other.Param;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            Query = input.ReadString();
            break;
          }
          case 18: {
            Param = input.ReadString();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// Deneme
  /// </summary>
  public sealed partial class TblaProxy : pb::IMessage<TblaProxy> {
    private static readonly pb::MessageParser<TblaProxy> _parser = new pb::MessageParser<TblaProxy>(() => new TblaProxy());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<TblaProxy> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Rest.RestReflection.Descriptor.MessageTypes[2]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TblaProxy() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TblaProxy(TblaProxy other) : this() {
      rowState_ = other.rowState_;
      rowErr_ = other.rowErr_;
      rowPk_ = other.rowPk_;
      fldStr_ = other.fldStr_;
      fldInt_ = other.fldInt_;
      fldDbl_ = other.fldDbl_;
      fldDcm_ = other.fldDcm_;
      fldDate_ = other.fldDate_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TblaProxy Clone() {
      return new TblaProxy(this);
    }

    /// <summary>Field number for the "row_state" field.</summary>
    public const int RowStateFieldNumber = 1;
    private string rowState_ = "";
    /// <summary>
    /// Inserted/Modified/Deleted/Unchanged
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string RowState {
      get { return rowState_; }
      set {
        rowState_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "row_err" field.</summary>
    public const int RowErrFieldNumber = 2;
    private string rowErr_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string RowErr {
      get { return rowErr_; }
      set {
        rowErr_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "row_pk" field.</summary>
    public const int RowPkFieldNumber = 3;
    private ulong rowPk_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong RowPk {
      get { return rowPk_; }
      set {
        rowPk_ = value;
      }
    }

    /// <summary>Field number for the "fldStr" field.</summary>
    public const int FldStrFieldNumber = 4;
    private string fldStr_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string FldStr {
      get { return fldStr_; }
      set {
        fldStr_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "fldInt" field.</summary>
    public const int FldIntFieldNumber = 5;
    private int fldInt_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int FldInt {
      get { return fldInt_; }
      set {
        fldInt_ = value;
      }
    }

    /// <summary>Field number for the "fldDbl" field.</summary>
    public const int FldDblFieldNumber = 6;
    private double fldDbl_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double FldDbl {
      get { return fldDbl_; }
      set {
        fldDbl_ = value;
      }
    }

    /// <summary>Field number for the "fldDcm" field.</summary>
    public const int FldDcmFieldNumber = 7;
    private double fldDcm_;
    /// <summary>
    /// String olabilir
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double FldDcm {
      get { return fldDcm_; }
      set {
        fldDcm_ = value;
      }
    }

    /// <summary>Field number for the "fldDate" field.</summary>
    public const int FldDateFieldNumber = 8;
    private long fldDate_;
    /// <summary>
    /// DateTime.Ticks olarak UInt64 de tut. new DateTime(fldDate) => DateTime 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long FldDate {
      get { return fldDate_; }
      set {
        fldDate_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as TblaProxy);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(TblaProxy other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (RowState != other.RowState) return false;
      if (RowErr != other.RowErr) return false;
      if (RowPk != other.RowPk) return false;
      if (FldStr != other.FldStr) return false;
      if (FldInt != other.FldInt) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(FldDbl, other.FldDbl)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(FldDcm, other.FldDcm)) return false;
      if (FldDate != other.FldDate) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (RowState.Length != 0) hash ^= RowState.GetHashCode();
      if (RowErr.Length != 0) hash ^= RowErr.GetHashCode();
      if (RowPk != 0UL) hash ^= RowPk.GetHashCode();
      if (FldStr.Length != 0) hash ^= FldStr.GetHashCode();
      if (FldInt != 0) hash ^= FldInt.GetHashCode();
      if (FldDbl != 0D) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(FldDbl);
      if (FldDcm != 0D) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(FldDcm);
      if (FldDate != 0L) hash ^= FldDate.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (RowState.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(RowState);
      }
      if (RowErr.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(RowErr);
      }
      if (RowPk != 0UL) {
        output.WriteRawTag(24);
        output.WriteUInt64(RowPk);
      }
      if (FldStr.Length != 0) {
        output.WriteRawTag(34);
        output.WriteString(FldStr);
      }
      if (FldInt != 0) {
        output.WriteRawTag(40);
        output.WriteInt32(FldInt);
      }
      if (FldDbl != 0D) {
        output.WriteRawTag(49);
        output.WriteDouble(FldDbl);
      }
      if (FldDcm != 0D) {
        output.WriteRawTag(57);
        output.WriteDouble(FldDcm);
      }
      if (FldDate != 0L) {
        output.WriteRawTag(64);
        output.WriteInt64(FldDate);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (RowState.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(RowState);
      }
      if (RowErr.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(RowErr);
      }
      if (RowPk != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(RowPk);
      }
      if (FldStr.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(FldStr);
      }
      if (FldInt != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(FldInt);
      }
      if (FldDbl != 0D) {
        size += 1 + 8;
      }
      if (FldDcm != 0D) {
        size += 1 + 8;
      }
      if (FldDate != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(FldDate);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(TblaProxy other) {
      if (other == null) {
        return;
      }
      if (other.RowState.Length != 0) {
        RowState = other.RowState;
      }
      if (other.RowErr.Length != 0) {
        RowErr = other.RowErr;
      }
      if (other.RowPk != 0UL) {
        RowPk = other.RowPk;
      }
      if (other.FldStr.Length != 0) {
        FldStr = other.FldStr;
      }
      if (other.FldInt != 0) {
        FldInt = other.FldInt;
      }
      if (other.FldDbl != 0D) {
        FldDbl = other.FldDbl;
      }
      if (other.FldDcm != 0D) {
        FldDcm = other.FldDcm;
      }
      if (other.FldDate != 0L) {
        FldDate = other.FldDate;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            RowState = input.ReadString();
            break;
          }
          case 18: {
            RowErr = input.ReadString();
            break;
          }
          case 24: {
            RowPk = input.ReadUInt64();
            break;
          }
          case 34: {
            FldStr = input.ReadString();
            break;
          }
          case 40: {
            FldInt = input.ReadInt32();
            break;
          }
          case 49: {
            FldDbl = input.ReadDouble();
            break;
          }
          case 57: {
            FldDcm = input.ReadDouble();
            break;
          }
          case 64: {
            FldDate = input.ReadInt64();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// Muhasebe Hesap Plani
  /// </summary>
  public sealed partial class AHPproxy : pb::IMessage<AHPproxy> {
    private static readonly pb::MessageParser<AHPproxy> _parser = new pb::MessageParser<AHPproxy>(() => new AHPproxy());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<AHPproxy> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Rest.RestReflection.Descriptor.MessageTypes[3]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AHPproxy() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AHPproxy(AHPproxy other) : this() {
      rowState_ = other.rowState_;
      rowErr_ = other.rowErr_;
      rowPk_ = other.rowPk_;
      objP_ = other.objP_;
      no_ = other.no_;
      ad_ = other.ad_;
      hspNo_ = other.hspNo_;
      brc_ = other.brc_;
      alc_ = other.alc_;
      isW_ = other.isW_;
      hasH_ = other.hasH_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AHPproxy Clone() {
      return new AHPproxy(this);
    }

    /// <summary>Field number for the "row_state" field.</summary>
    public const int RowStateFieldNumber = 1;
    private string rowState_ = "";
    /// <summary>
    /// Inserted/Modified/Deleted/Unchanged
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string RowState {
      get { return rowState_; }
      set {
        rowState_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "row_err" field.</summary>
    public const int RowErrFieldNumber = 2;
    private string rowErr_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string RowErr {
      get { return rowErr_; }
      set {
        rowErr_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "row_pk" field.</summary>
    public const int RowPkFieldNumber = 3;
    private ulong rowPk_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong RowPk {
      get { return rowPk_; }
      set {
        rowPk_ = value;
      }
    }

    /// <summary>Field number for the "ObjP" field.</summary>
    public const int ObjPFieldNumber = 4;
    private ulong objP_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong ObjP {
      get { return objP_; }
      set {
        objP_ = value;
      }
    }

    /// <summary>Field number for the "No" field.</summary>
    public const int NoFieldNumber = 5;
    private string no_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string No {
      get { return no_; }
      set {
        no_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "Ad" field.</summary>
    public const int AdFieldNumber = 6;
    private string ad_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Ad {
      get { return ad_; }
      set {
        ad_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "HspNo" field.</summary>
    public const int HspNoFieldNumber = 7;
    private string hspNo_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string HspNo {
      get { return hspNo_; }
      set {
        hspNo_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "Brc" field.</summary>
    public const int BrcFieldNumber = 8;
    private double brc_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double Brc {
      get { return brc_; }
      set {
        brc_ = value;
      }
    }

    /// <summary>Field number for the "Alc" field.</summary>
    public const int AlcFieldNumber = 9;
    private double alc_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double Alc {
      get { return alc_; }
      set {
        alc_ = value;
      }
    }

    /// <summary>Field number for the "IsW" field.</summary>
    public const int IsWFieldNumber = 10;
    private bool isW_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool IsW {
      get { return isW_; }
      set {
        isW_ = value;
      }
    }

    /// <summary>Field number for the "HasH" field.</summary>
    public const int HasHFieldNumber = 11;
    private bool hasH_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasH {
      get { return hasH_; }
      set {
        hasH_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as AHPproxy);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(AHPproxy other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (RowState != other.RowState) return false;
      if (RowErr != other.RowErr) return false;
      if (RowPk != other.RowPk) return false;
      if (ObjP != other.ObjP) return false;
      if (No != other.No) return false;
      if (Ad != other.Ad) return false;
      if (HspNo != other.HspNo) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(Brc, other.Brc)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(Alc, other.Alc)) return false;
      if (IsW != other.IsW) return false;
      if (HasH != other.HasH) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (RowState.Length != 0) hash ^= RowState.GetHashCode();
      if (RowErr.Length != 0) hash ^= RowErr.GetHashCode();
      if (RowPk != 0UL) hash ^= RowPk.GetHashCode();
      if (ObjP != 0UL) hash ^= ObjP.GetHashCode();
      if (No.Length != 0) hash ^= No.GetHashCode();
      if (Ad.Length != 0) hash ^= Ad.GetHashCode();
      if (HspNo.Length != 0) hash ^= HspNo.GetHashCode();
      if (Brc != 0D) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(Brc);
      if (Alc != 0D) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(Alc);
      if (IsW != false) hash ^= IsW.GetHashCode();
      if (HasH != false) hash ^= HasH.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (RowState.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(RowState);
      }
      if (RowErr.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(RowErr);
      }
      if (RowPk != 0UL) {
        output.WriteRawTag(24);
        output.WriteUInt64(RowPk);
      }
      if (ObjP != 0UL) {
        output.WriteRawTag(32);
        output.WriteUInt64(ObjP);
      }
      if (No.Length != 0) {
        output.WriteRawTag(42);
        output.WriteString(No);
      }
      if (Ad.Length != 0) {
        output.WriteRawTag(50);
        output.WriteString(Ad);
      }
      if (HspNo.Length != 0) {
        output.WriteRawTag(58);
        output.WriteString(HspNo);
      }
      if (Brc != 0D) {
        output.WriteRawTag(65);
        output.WriteDouble(Brc);
      }
      if (Alc != 0D) {
        output.WriteRawTag(73);
        output.WriteDouble(Alc);
      }
      if (IsW != false) {
        output.WriteRawTag(80);
        output.WriteBool(IsW);
      }
      if (HasH != false) {
        output.WriteRawTag(88);
        output.WriteBool(HasH);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (RowState.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(RowState);
      }
      if (RowErr.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(RowErr);
      }
      if (RowPk != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(RowPk);
      }
      if (ObjP != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(ObjP);
      }
      if (No.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(No);
      }
      if (Ad.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Ad);
      }
      if (HspNo.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(HspNo);
      }
      if (Brc != 0D) {
        size += 1 + 8;
      }
      if (Alc != 0D) {
        size += 1 + 8;
      }
      if (IsW != false) {
        size += 1 + 1;
      }
      if (HasH != false) {
        size += 1 + 1;
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(AHPproxy other) {
      if (other == null) {
        return;
      }
      if (other.RowState.Length != 0) {
        RowState = other.RowState;
      }
      if (other.RowErr.Length != 0) {
        RowErr = other.RowErr;
      }
      if (other.RowPk != 0UL) {
        RowPk = other.RowPk;
      }
      if (other.ObjP != 0UL) {
        ObjP = other.ObjP;
      }
      if (other.No.Length != 0) {
        No = other.No;
      }
      if (other.Ad.Length != 0) {
        Ad = other.Ad;
      }
      if (other.HspNo.Length != 0) {
        HspNo = other.HspNo;
      }
      if (other.Brc != 0D) {
        Brc = other.Brc;
      }
      if (other.Alc != 0D) {
        Alc = other.Alc;
      }
      if (other.IsW != false) {
        IsW = other.IsW;
      }
      if (other.HasH != false) {
        HasH = other.HasH;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            RowState = input.ReadString();
            break;
          }
          case 18: {
            RowErr = input.ReadString();
            break;
          }
          case 24: {
            RowPk = input.ReadUInt64();
            break;
          }
          case 32: {
            ObjP = input.ReadUInt64();
            break;
          }
          case 42: {
            No = input.ReadString();
            break;
          }
          case 50: {
            Ad = input.ReadString();
            break;
          }
          case 58: {
            HspNo = input.ReadString();
            break;
          }
          case 65: {
            Brc = input.ReadDouble();
            break;
          }
          case 73: {
            Alc = input.ReadDouble();
            break;
          }
          case 80: {
            IsW = input.ReadBool();
            break;
          }
          case 88: {
            HasH = input.ReadBool();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// Muhasebe Fisleri
  /// </summary>
  public sealed partial class AFBproxy : pb::IMessage<AFBproxy> {
    private static readonly pb::MessageParser<AFBproxy> _parser = new pb::MessageParser<AFBproxy>(() => new AFBproxy());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<AFBproxy> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Rest.RestReflection.Descriptor.MessageTypes[4]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AFBproxy() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AFBproxy(AFBproxy other) : this() {
      rowState_ = other.rowState_;
      rowErr_ = other.rowErr_;
      rowPk_ = other.rowPk_;
      trh_ = other.trh_;
      objTur_ = other.objTur_;
      drm_ = other.drm_;
      Info = other.Info;
      brc_ = other.brc_;
      alc_ = other.alc_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AFBproxy Clone() {
      return new AFBproxy(this);
    }

    /// <summary>Field number for the "row_state" field.</summary>
    public const int RowStateFieldNumber = 1;
    private string rowState_ = "";
    /// <summary>
    /// Inserted/Modified/Deleted/Unchanged
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string RowState {
      get { return rowState_; }
      set {
        rowState_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "row_err" field.</summary>
    public const int RowErrFieldNumber = 2;
    private string rowErr_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string RowErr {
      get { return rowErr_; }
      set {
        rowErr_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "row_pk" field.</summary>
    public const int RowPkFieldNumber = 3;
    private ulong rowPk_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong RowPk {
      get { return rowPk_; }
      set {
        rowPk_ = value;
      }
    }

    /// <summary>Field number for the "Trh" field.</summary>
    public const int TrhFieldNumber = 4;
    private long trh_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long Trh {
      get { return trh_; }
      set {
        trh_ = value;
      }
    }

    /// <summary>Field number for the "ObjTur" field.</summary>
    public const int ObjTurFieldNumber = 5;
    private ulong objTur_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong ObjTur {
      get { return objTur_; }
      set {
        objTur_ = value;
      }
    }

    /// <summary>Field number for the "Drm" field.</summary>
    public const int DrmFieldNumber = 6;
    private string drm_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Drm {
      get { return drm_; }
      set {
        drm_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "Info" field.</summary>
    public const int InfoFieldNumber = 7;
    private static readonly pb::FieldCodec<string> _single_info_codec = pb::FieldCodec.ForClassWrapper<string>(58);
    private string info_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Info {
      get { return info_; }
      set {
        info_ = value;
      }
    }

    /// <summary>Field number for the "Brc" field.</summary>
    public const int BrcFieldNumber = 8;
    private double brc_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double Brc {
      get { return brc_; }
      set {
        brc_ = value;
      }
    }

    /// <summary>Field number for the "Alc" field.</summary>
    public const int AlcFieldNumber = 9;
    private double alc_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double Alc {
      get { return alc_; }
      set {
        alc_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as AFBproxy);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(AFBproxy other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (RowState != other.RowState) return false;
      if (RowErr != other.RowErr) return false;
      if (RowPk != other.RowPk) return false;
      if (Trh != other.Trh) return false;
      if (ObjTur != other.ObjTur) return false;
      if (Drm != other.Drm) return false;
      if (Info != other.Info) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(Brc, other.Brc)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(Alc, other.Alc)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (RowState.Length != 0) hash ^= RowState.GetHashCode();
      if (RowErr.Length != 0) hash ^= RowErr.GetHashCode();
      if (RowPk != 0UL) hash ^= RowPk.GetHashCode();
      if (Trh != 0L) hash ^= Trh.GetHashCode();
      if (ObjTur != 0UL) hash ^= ObjTur.GetHashCode();
      if (Drm.Length != 0) hash ^= Drm.GetHashCode();
      if (info_ != null) hash ^= Info.GetHashCode();
      if (Brc != 0D) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(Brc);
      if (Alc != 0D) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(Alc);
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (RowState.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(RowState);
      }
      if (RowErr.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(RowErr);
      }
      if (RowPk != 0UL) {
        output.WriteRawTag(24);
        output.WriteUInt64(RowPk);
      }
      if (Trh != 0L) {
        output.WriteRawTag(32);
        output.WriteInt64(Trh);
      }
      if (ObjTur != 0UL) {
        output.WriteRawTag(40);
        output.WriteUInt64(ObjTur);
      }
      if (Drm.Length != 0) {
        output.WriteRawTag(50);
        output.WriteString(Drm);
      }
      if (info_ != null) {
        _single_info_codec.WriteTagAndValue(output, Info);
      }
      if (Brc != 0D) {
        output.WriteRawTag(65);
        output.WriteDouble(Brc);
      }
      if (Alc != 0D) {
        output.WriteRawTag(73);
        output.WriteDouble(Alc);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (RowState.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(RowState);
      }
      if (RowErr.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(RowErr);
      }
      if (RowPk != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(RowPk);
      }
      if (Trh != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(Trh);
      }
      if (ObjTur != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(ObjTur);
      }
      if (Drm.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Drm);
      }
      if (info_ != null) {
        size += _single_info_codec.CalculateSizeWithTag(Info);
      }
      if (Brc != 0D) {
        size += 1 + 8;
      }
      if (Alc != 0D) {
        size += 1 + 8;
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(AFBproxy other) {
      if (other == null) {
        return;
      }
      if (other.RowState.Length != 0) {
        RowState = other.RowState;
      }
      if (other.RowErr.Length != 0) {
        RowErr = other.RowErr;
      }
      if (other.RowPk != 0UL) {
        RowPk = other.RowPk;
      }
      if (other.Trh != 0L) {
        Trh = other.Trh;
      }
      if (other.ObjTur != 0UL) {
        ObjTur = other.ObjTur;
      }
      if (other.Drm.Length != 0) {
        Drm = other.Drm;
      }
      if (other.info_ != null) {
        if (info_ == null || other.Info != "") {
          Info = other.Info;
        }
      }
      if (other.Brc != 0D) {
        Brc = other.Brc;
      }
      if (other.Alc != 0D) {
        Alc = other.Alc;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            RowState = input.ReadString();
            break;
          }
          case 18: {
            RowErr = input.ReadString();
            break;
          }
          case 24: {
            RowPk = input.ReadUInt64();
            break;
          }
          case 32: {
            Trh = input.ReadInt64();
            break;
          }
          case 40: {
            ObjTur = input.ReadUInt64();
            break;
          }
          case 50: {
            Drm = input.ReadString();
            break;
          }
          case 58: {
            string value = _single_info_codec.Read(input);
            if (info_ == null || value != "") {
              Info = value;
            }
            break;
          }
          case 65: {
            Brc = input.ReadDouble();
            break;
          }
          case 73: {
            Alc = input.ReadDouble();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// Muhasebe Fis Detaylari
  /// </summary>
  public sealed partial class AFDproxy : pb::IMessage<AFDproxy> {
    private static readonly pb::MessageParser<AFDproxy> _parser = new pb::MessageParser<AFDproxy>(() => new AFDproxy());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<AFDproxy> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Rest.RestReflection.Descriptor.MessageTypes[5]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AFDproxy() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AFDproxy(AFDproxy other) : this() {
      rowState_ = other.rowState_;
      rowErr_ = other.rowErr_;
      rowPk_ = other.rowPk_;
      objAFB_ = other.objAFB_;
      objAHP_ = other.objAHP_;
      Info = other.Info;
      tut_ = other.tut_;
      objDvz_ = other.objDvz_;
      kur_ = other.kur_;
      tutTL_ = other.tutTL_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AFDproxy Clone() {
      return new AFDproxy(this);
    }

    /// <summary>Field number for the "row_state" field.</summary>
    public const int RowStateFieldNumber = 1;
    private string rowState_ = "";
    /// <summary>
    /// Inserted/Modified/Deleted/Unchanged
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string RowState {
      get { return rowState_; }
      set {
        rowState_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "row_err" field.</summary>
    public const int RowErrFieldNumber = 2;
    private string rowErr_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string RowErr {
      get { return rowErr_; }
      set {
        rowErr_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "row_pk" field.</summary>
    public const int RowPkFieldNumber = 3;
    private ulong rowPk_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong RowPk {
      get { return rowPk_; }
      set {
        rowPk_ = value;
      }
    }

    /// <summary>Field number for the "ObjAFB" field.</summary>
    public const int ObjAFBFieldNumber = 4;
    private ulong objAFB_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong ObjAFB {
      get { return objAFB_; }
      set {
        objAFB_ = value;
      }
    }

    /// <summary>Field number for the "ObjAHP" field.</summary>
    public const int ObjAHPFieldNumber = 5;
    private ulong objAHP_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong ObjAHP {
      get { return objAHP_; }
      set {
        objAHP_ = value;
      }
    }

    /// <summary>Field number for the "Info" field.</summary>
    public const int InfoFieldNumber = 6;
    private static readonly pb::FieldCodec<string> _single_info_codec = pb::FieldCodec.ForClassWrapper<string>(50);
    private string info_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Info {
      get { return info_; }
      set {
        info_ = value;
      }
    }

    /// <summary>Field number for the "Tut" field.</summary>
    public const int TutFieldNumber = 7;
    private double tut_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double Tut {
      get { return tut_; }
      set {
        tut_ = value;
      }
    }

    /// <summary>Field number for the "ObjDvz" field.</summary>
    public const int ObjDvzFieldNumber = 8;
    private ulong objDvz_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong ObjDvz {
      get { return objDvz_; }
      set {
        objDvz_ = value;
      }
    }

    /// <summary>Field number for the "Kur" field.</summary>
    public const int KurFieldNumber = 9;
    private float kur_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float Kur {
      get { return kur_; }
      set {
        kur_ = value;
      }
    }

    /// <summary>Field number for the "TutTL" field.</summary>
    public const int TutTLFieldNumber = 10;
    private double tutTL_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double TutTL {
      get { return tutTL_; }
      set {
        tutTL_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as AFDproxy);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(AFDproxy other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (RowState != other.RowState) return false;
      if (RowErr != other.RowErr) return false;
      if (RowPk != other.RowPk) return false;
      if (ObjAFB != other.ObjAFB) return false;
      if (ObjAHP != other.ObjAHP) return false;
      if (Info != other.Info) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(Tut, other.Tut)) return false;
      if (ObjDvz != other.ObjDvz) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(Kur, other.Kur)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(TutTL, other.TutTL)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (RowState.Length != 0) hash ^= RowState.GetHashCode();
      if (RowErr.Length != 0) hash ^= RowErr.GetHashCode();
      if (RowPk != 0UL) hash ^= RowPk.GetHashCode();
      if (ObjAFB != 0UL) hash ^= ObjAFB.GetHashCode();
      if (ObjAHP != 0UL) hash ^= ObjAHP.GetHashCode();
      if (info_ != null) hash ^= Info.GetHashCode();
      if (Tut != 0D) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(Tut);
      if (ObjDvz != 0UL) hash ^= ObjDvz.GetHashCode();
      if (Kur != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(Kur);
      if (TutTL != 0D) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(TutTL);
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (RowState.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(RowState);
      }
      if (RowErr.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(RowErr);
      }
      if (RowPk != 0UL) {
        output.WriteRawTag(24);
        output.WriteUInt64(RowPk);
      }
      if (ObjAFB != 0UL) {
        output.WriteRawTag(32);
        output.WriteUInt64(ObjAFB);
      }
      if (ObjAHP != 0UL) {
        output.WriteRawTag(40);
        output.WriteUInt64(ObjAHP);
      }
      if (info_ != null) {
        _single_info_codec.WriteTagAndValue(output, Info);
      }
      if (Tut != 0D) {
        output.WriteRawTag(57);
        output.WriteDouble(Tut);
      }
      if (ObjDvz != 0UL) {
        output.WriteRawTag(64);
        output.WriteUInt64(ObjDvz);
      }
      if (Kur != 0F) {
        output.WriteRawTag(77);
        output.WriteFloat(Kur);
      }
      if (TutTL != 0D) {
        output.WriteRawTag(81);
        output.WriteDouble(TutTL);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (RowState.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(RowState);
      }
      if (RowErr.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(RowErr);
      }
      if (RowPk != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(RowPk);
      }
      if (ObjAFB != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(ObjAFB);
      }
      if (ObjAHP != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(ObjAHP);
      }
      if (info_ != null) {
        size += _single_info_codec.CalculateSizeWithTag(Info);
      }
      if (Tut != 0D) {
        size += 1 + 8;
      }
      if (ObjDvz != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(ObjDvz);
      }
      if (Kur != 0F) {
        size += 1 + 4;
      }
      if (TutTL != 0D) {
        size += 1 + 8;
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(AFDproxy other) {
      if (other == null) {
        return;
      }
      if (other.RowState.Length != 0) {
        RowState = other.RowState;
      }
      if (other.RowErr.Length != 0) {
        RowErr = other.RowErr;
      }
      if (other.RowPk != 0UL) {
        RowPk = other.RowPk;
      }
      if (other.ObjAFB != 0UL) {
        ObjAFB = other.ObjAFB;
      }
      if (other.ObjAHP != 0UL) {
        ObjAHP = other.ObjAHP;
      }
      if (other.info_ != null) {
        if (info_ == null || other.Info != "") {
          Info = other.Info;
        }
      }
      if (other.Tut != 0D) {
        Tut = other.Tut;
      }
      if (other.ObjDvz != 0UL) {
        ObjDvz = other.ObjDvz;
      }
      if (other.Kur != 0F) {
        Kur = other.Kur;
      }
      if (other.TutTL != 0D) {
        TutTL = other.TutTL;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            RowState = input.ReadString();
            break;
          }
          case 18: {
            RowErr = input.ReadString();
            break;
          }
          case 24: {
            RowPk = input.ReadUInt64();
            break;
          }
          case 32: {
            ObjAFB = input.ReadUInt64();
            break;
          }
          case 40: {
            ObjAHP = input.ReadUInt64();
            break;
          }
          case 50: {
            string value = _single_info_codec.Read(input);
            if (info_ == null || value != "") {
              Info = value;
            }
            break;
          }
          case 57: {
            Tut = input.ReadDouble();
            break;
          }
          case 64: {
            ObjDvz = input.ReadUInt64();
            break;
          }
          case 77: {
            Kur = input.ReadFloat();
            break;
          }
          case 81: {
            TutTL = input.ReadDouble();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// Muhasebe Bill/Fatura Baslik
  /// </summary>
  public sealed partial class ABBproxy : pb::IMessage<ABBproxy> {
    private static readonly pb::MessageParser<ABBproxy> _parser = new pb::MessageParser<ABBproxy>(() => new ABBproxy());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ABBproxy> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Rest.RestReflection.Descriptor.MessageTypes[6]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ABBproxy() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ABBproxy(ABBproxy other) : this() {
      rowState_ = other.rowState_;
      rowErr_ = other.rowErr_;
      rowPk_ = other.rowPk_;
      trh_ = other.trh_;
      objTur_ = other.objTur_;
      drm_ = other.drm_;
      objKKK_ = other.objKKK_;
      bA_ = other.bA_;
      objDvz_ = other.objDvz_;
      kur_ = other.kur_;
      tut_ = other.tut_;
      Info = other.Info;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ABBproxy Clone() {
      return new ABBproxy(this);
    }

    /// <summary>Field number for the "row_state" field.</summary>
    public const int RowStateFieldNumber = 1;
    private string rowState_ = "";
    /// <summary>
    /// Inserted/Modified/Deleted/Unchanged
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string RowState {
      get { return rowState_; }
      set {
        rowState_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "row_err" field.</summary>
    public const int RowErrFieldNumber = 2;
    private string rowErr_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string RowErr {
      get { return rowErr_; }
      set {
        rowErr_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "row_pk" field.</summary>
    public const int RowPkFieldNumber = 3;
    private ulong rowPk_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong RowPk {
      get { return rowPk_; }
      set {
        rowPk_ = value;
      }
    }

    /// <summary>Field number for the "Trh" field.</summary>
    public const int TrhFieldNumber = 4;
    private long trh_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long Trh {
      get { return trh_; }
      set {
        trh_ = value;
      }
    }

    /// <summary>Field number for the "ObjTur" field.</summary>
    public const int ObjTurFieldNumber = 5;
    private ulong objTur_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong ObjTur {
      get { return objTur_; }
      set {
        objTur_ = value;
      }
    }

    /// <summary>Field number for the "Drm" field.</summary>
    public const int DrmFieldNumber = 6;
    private string drm_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Drm {
      get { return drm_; }
      set {
        drm_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "ObjKKK" field.</summary>
    public const int ObjKKKFieldNumber = 7;
    private ulong objKKK_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong ObjKKK {
      get { return objKKK_; }
      set {
        objKKK_ = value;
      }
    }

    /// <summary>Field number for the "BA" field.</summary>
    public const int BAFieldNumber = 8;
    private string bA_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string BA {
      get { return bA_; }
      set {
        bA_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "ObjDvz" field.</summary>
    public const int ObjDvzFieldNumber = 9;
    private ulong objDvz_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong ObjDvz {
      get { return objDvz_; }
      set {
        objDvz_ = value;
      }
    }

    /// <summary>Field number for the "Kur" field.</summary>
    public const int KurFieldNumber = 10;
    private float kur_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float Kur {
      get { return kur_; }
      set {
        kur_ = value;
      }
    }

    /// <summary>Field number for the "Tut" field.</summary>
    public const int TutFieldNumber = 11;
    private double tut_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double Tut {
      get { return tut_; }
      set {
        tut_ = value;
      }
    }

    /// <summary>Field number for the "Info" field.</summary>
    public const int InfoFieldNumber = 12;
    private static readonly pb::FieldCodec<string> _single_info_codec = pb::FieldCodec.ForClassWrapper<string>(98);
    private string info_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Info {
      get { return info_; }
      set {
        info_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ABBproxy);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ABBproxy other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (RowState != other.RowState) return false;
      if (RowErr != other.RowErr) return false;
      if (RowPk != other.RowPk) return false;
      if (Trh != other.Trh) return false;
      if (ObjTur != other.ObjTur) return false;
      if (Drm != other.Drm) return false;
      if (ObjKKK != other.ObjKKK) return false;
      if (BA != other.BA) return false;
      if (ObjDvz != other.ObjDvz) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(Kur, other.Kur)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(Tut, other.Tut)) return false;
      if (Info != other.Info) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (RowState.Length != 0) hash ^= RowState.GetHashCode();
      if (RowErr.Length != 0) hash ^= RowErr.GetHashCode();
      if (RowPk != 0UL) hash ^= RowPk.GetHashCode();
      if (Trh != 0L) hash ^= Trh.GetHashCode();
      if (ObjTur != 0UL) hash ^= ObjTur.GetHashCode();
      if (Drm.Length != 0) hash ^= Drm.GetHashCode();
      if (ObjKKK != 0UL) hash ^= ObjKKK.GetHashCode();
      if (BA.Length != 0) hash ^= BA.GetHashCode();
      if (ObjDvz != 0UL) hash ^= ObjDvz.GetHashCode();
      if (Kur != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(Kur);
      if (Tut != 0D) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(Tut);
      if (info_ != null) hash ^= Info.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (RowState.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(RowState);
      }
      if (RowErr.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(RowErr);
      }
      if (RowPk != 0UL) {
        output.WriteRawTag(24);
        output.WriteUInt64(RowPk);
      }
      if (Trh != 0L) {
        output.WriteRawTag(32);
        output.WriteInt64(Trh);
      }
      if (ObjTur != 0UL) {
        output.WriteRawTag(40);
        output.WriteUInt64(ObjTur);
      }
      if (Drm.Length != 0) {
        output.WriteRawTag(50);
        output.WriteString(Drm);
      }
      if (ObjKKK != 0UL) {
        output.WriteRawTag(56);
        output.WriteUInt64(ObjKKK);
      }
      if (BA.Length != 0) {
        output.WriteRawTag(66);
        output.WriteString(BA);
      }
      if (ObjDvz != 0UL) {
        output.WriteRawTag(72);
        output.WriteUInt64(ObjDvz);
      }
      if (Kur != 0F) {
        output.WriteRawTag(85);
        output.WriteFloat(Kur);
      }
      if (Tut != 0D) {
        output.WriteRawTag(89);
        output.WriteDouble(Tut);
      }
      if (info_ != null) {
        _single_info_codec.WriteTagAndValue(output, Info);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (RowState.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(RowState);
      }
      if (RowErr.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(RowErr);
      }
      if (RowPk != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(RowPk);
      }
      if (Trh != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(Trh);
      }
      if (ObjTur != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(ObjTur);
      }
      if (Drm.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Drm);
      }
      if (ObjKKK != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(ObjKKK);
      }
      if (BA.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(BA);
      }
      if (ObjDvz != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(ObjDvz);
      }
      if (Kur != 0F) {
        size += 1 + 4;
      }
      if (Tut != 0D) {
        size += 1 + 8;
      }
      if (info_ != null) {
        size += _single_info_codec.CalculateSizeWithTag(Info);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ABBproxy other) {
      if (other == null) {
        return;
      }
      if (other.RowState.Length != 0) {
        RowState = other.RowState;
      }
      if (other.RowErr.Length != 0) {
        RowErr = other.RowErr;
      }
      if (other.RowPk != 0UL) {
        RowPk = other.RowPk;
      }
      if (other.Trh != 0L) {
        Trh = other.Trh;
      }
      if (other.ObjTur != 0UL) {
        ObjTur = other.ObjTur;
      }
      if (other.Drm.Length != 0) {
        Drm = other.Drm;
      }
      if (other.ObjKKK != 0UL) {
        ObjKKK = other.ObjKKK;
      }
      if (other.BA.Length != 0) {
        BA = other.BA;
      }
      if (other.ObjDvz != 0UL) {
        ObjDvz = other.ObjDvz;
      }
      if (other.Kur != 0F) {
        Kur = other.Kur;
      }
      if (other.Tut != 0D) {
        Tut = other.Tut;
      }
      if (other.info_ != null) {
        if (info_ == null || other.Info != "") {
          Info = other.Info;
        }
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            RowState = input.ReadString();
            break;
          }
          case 18: {
            RowErr = input.ReadString();
            break;
          }
          case 24: {
            RowPk = input.ReadUInt64();
            break;
          }
          case 32: {
            Trh = input.ReadInt64();
            break;
          }
          case 40: {
            ObjTur = input.ReadUInt64();
            break;
          }
          case 50: {
            Drm = input.ReadString();
            break;
          }
          case 56: {
            ObjKKK = input.ReadUInt64();
            break;
          }
          case 66: {
            BA = input.ReadString();
            break;
          }
          case 72: {
            ObjDvz = input.ReadUInt64();
            break;
          }
          case 85: {
            Kur = input.ReadFloat();
            break;
          }
          case 89: {
            Tut = input.ReadDouble();
            break;
          }
          case 98: {
            string value = _single_info_codec.Read(input);
            if (info_ == null || value != "") {
              Info = value;
            }
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// Muhasebe Bill/Fatura Detay
  /// </summary>
  public sealed partial class ABDproxy : pb::IMessage<ABDproxy> {
    private static readonly pb::MessageParser<ABDproxy> _parser = new pb::MessageParser<ABDproxy>(() => new ABDproxy());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ABDproxy> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Rest.RestReflection.Descriptor.MessageTypes[7]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ABDproxy() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ABDproxy(ABDproxy other) : this() {
      rowState_ = other.rowState_;
      rowErr_ = other.rowErr_;
      rowPk_ = other.rowPk_;
      objABB_ = other.objABB_;
      objNNN_ = other.objNNN_;
      objAHP_ = other.objAHP_;
      fyt_ = other.fyt_;
      objDvz_ = other.objDvz_;
      mik_ = other.mik_;
      kur_ = other.kur_;
      kDY_ = other.kDY_;
      Info = other.Info;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ABDproxy Clone() {
      return new ABDproxy(this);
    }

    /// <summary>Field number for the "row_state" field.</summary>
    public const int RowStateFieldNumber = 1;
    private string rowState_ = "";
    /// <summary>
    /// Inserted/Modified/Deleted/Unchanged
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string RowState {
      get { return rowState_; }
      set {
        rowState_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "row_err" field.</summary>
    public const int RowErrFieldNumber = 2;
    private string rowErr_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string RowErr {
      get { return rowErr_; }
      set {
        rowErr_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "row_pk" field.</summary>
    public const int RowPkFieldNumber = 3;
    private ulong rowPk_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong RowPk {
      get { return rowPk_; }
      set {
        rowPk_ = value;
      }
    }

    /// <summary>Field number for the "ObjABB" field.</summary>
    public const int ObjABBFieldNumber = 4;
    private ulong objABB_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong ObjABB {
      get { return objABB_; }
      set {
        objABB_ = value;
      }
    }

    /// <summary>Field number for the "ObjNNN" field.</summary>
    public const int ObjNNNFieldNumber = 5;
    private ulong objNNN_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong ObjNNN {
      get { return objNNN_; }
      set {
        objNNN_ = value;
      }
    }

    /// <summary>Field number for the "ObjAHP" field.</summary>
    public const int ObjAHPFieldNumber = 6;
    private ulong objAHP_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong ObjAHP {
      get { return objAHP_; }
      set {
        objAHP_ = value;
      }
    }

    /// <summary>Field number for the "Fyt" field.</summary>
    public const int FytFieldNumber = 7;
    private double fyt_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double Fyt {
      get { return fyt_; }
      set {
        fyt_ = value;
      }
    }

    /// <summary>Field number for the "ObjDvz" field.</summary>
    public const int ObjDvzFieldNumber = 8;
    private ulong objDvz_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong ObjDvz {
      get { return objDvz_; }
      set {
        objDvz_ = value;
      }
    }

    /// <summary>Field number for the "Mik" field.</summary>
    public const int MikFieldNumber = 9;
    private double mik_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double Mik {
      get { return mik_; }
      set {
        mik_ = value;
      }
    }

    /// <summary>Field number for the "Kur" field.</summary>
    public const int KurFieldNumber = 10;
    private float kur_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float Kur {
      get { return kur_; }
      set {
        kur_ = value;
      }
    }

    /// <summary>Field number for the "KDY" field.</summary>
    public const int KDYFieldNumber = 11;
    private float kDY_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float KDY {
      get { return kDY_; }
      set {
        kDY_ = value;
      }
    }

    /// <summary>Field number for the "Info" field.</summary>
    public const int InfoFieldNumber = 12;
    private static readonly pb::FieldCodec<string> _single_info_codec = pb::FieldCodec.ForClassWrapper<string>(98);
    private string info_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Info {
      get { return info_; }
      set {
        info_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ABDproxy);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ABDproxy other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (RowState != other.RowState) return false;
      if (RowErr != other.RowErr) return false;
      if (RowPk != other.RowPk) return false;
      if (ObjABB != other.ObjABB) return false;
      if (ObjNNN != other.ObjNNN) return false;
      if (ObjAHP != other.ObjAHP) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(Fyt, other.Fyt)) return false;
      if (ObjDvz != other.ObjDvz) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(Mik, other.Mik)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(Kur, other.Kur)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(KDY, other.KDY)) return false;
      if (Info != other.Info) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (RowState.Length != 0) hash ^= RowState.GetHashCode();
      if (RowErr.Length != 0) hash ^= RowErr.GetHashCode();
      if (RowPk != 0UL) hash ^= RowPk.GetHashCode();
      if (ObjABB != 0UL) hash ^= ObjABB.GetHashCode();
      if (ObjNNN != 0UL) hash ^= ObjNNN.GetHashCode();
      if (ObjAHP != 0UL) hash ^= ObjAHP.GetHashCode();
      if (Fyt != 0D) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(Fyt);
      if (ObjDvz != 0UL) hash ^= ObjDvz.GetHashCode();
      if (Mik != 0D) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(Mik);
      if (Kur != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(Kur);
      if (KDY != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(KDY);
      if (info_ != null) hash ^= Info.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (RowState.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(RowState);
      }
      if (RowErr.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(RowErr);
      }
      if (RowPk != 0UL) {
        output.WriteRawTag(24);
        output.WriteUInt64(RowPk);
      }
      if (ObjABB != 0UL) {
        output.WriteRawTag(32);
        output.WriteUInt64(ObjABB);
      }
      if (ObjNNN != 0UL) {
        output.WriteRawTag(40);
        output.WriteUInt64(ObjNNN);
      }
      if (ObjAHP != 0UL) {
        output.WriteRawTag(48);
        output.WriteUInt64(ObjAHP);
      }
      if (Fyt != 0D) {
        output.WriteRawTag(57);
        output.WriteDouble(Fyt);
      }
      if (ObjDvz != 0UL) {
        output.WriteRawTag(64);
        output.WriteUInt64(ObjDvz);
      }
      if (Mik != 0D) {
        output.WriteRawTag(73);
        output.WriteDouble(Mik);
      }
      if (Kur != 0F) {
        output.WriteRawTag(85);
        output.WriteFloat(Kur);
      }
      if (KDY != 0F) {
        output.WriteRawTag(93);
        output.WriteFloat(KDY);
      }
      if (info_ != null) {
        _single_info_codec.WriteTagAndValue(output, Info);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (RowState.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(RowState);
      }
      if (RowErr.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(RowErr);
      }
      if (RowPk != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(RowPk);
      }
      if (ObjABB != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(ObjABB);
      }
      if (ObjNNN != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(ObjNNN);
      }
      if (ObjAHP != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(ObjAHP);
      }
      if (Fyt != 0D) {
        size += 1 + 8;
      }
      if (ObjDvz != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(ObjDvz);
      }
      if (Mik != 0D) {
        size += 1 + 8;
      }
      if (Kur != 0F) {
        size += 1 + 4;
      }
      if (KDY != 0F) {
        size += 1 + 4;
      }
      if (info_ != null) {
        size += _single_info_codec.CalculateSizeWithTag(Info);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ABDproxy other) {
      if (other == null) {
        return;
      }
      if (other.RowState.Length != 0) {
        RowState = other.RowState;
      }
      if (other.RowErr.Length != 0) {
        RowErr = other.RowErr;
      }
      if (other.RowPk != 0UL) {
        RowPk = other.RowPk;
      }
      if (other.ObjABB != 0UL) {
        ObjABB = other.ObjABB;
      }
      if (other.ObjNNN != 0UL) {
        ObjNNN = other.ObjNNN;
      }
      if (other.ObjAHP != 0UL) {
        ObjAHP = other.ObjAHP;
      }
      if (other.Fyt != 0D) {
        Fyt = other.Fyt;
      }
      if (other.ObjDvz != 0UL) {
        ObjDvz = other.ObjDvz;
      }
      if (other.Mik != 0D) {
        Mik = other.Mik;
      }
      if (other.Kur != 0F) {
        Kur = other.Kur;
      }
      if (other.KDY != 0F) {
        KDY = other.KDY;
      }
      if (other.info_ != null) {
        if (info_ == null || other.Info != "") {
          Info = other.Info;
        }
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            RowState = input.ReadString();
            break;
          }
          case 18: {
            RowErr = input.ReadString();
            break;
          }
          case 24: {
            RowPk = input.ReadUInt64();
            break;
          }
          case 32: {
            ObjABB = input.ReadUInt64();
            break;
          }
          case 40: {
            ObjNNN = input.ReadUInt64();
            break;
          }
          case 48: {
            ObjAHP = input.ReadUInt64();
            break;
          }
          case 57: {
            Fyt = input.ReadDouble();
            break;
          }
          case 64: {
            ObjDvz = input.ReadUInt64();
            break;
          }
          case 73: {
            Mik = input.ReadDouble();
            break;
          }
          case 85: {
            Kur = input.ReadFloat();
            break;
          }
          case 93: {
            KDY = input.ReadFloat();
            break;
          }
          case 98: {
            string value = _single_info_codec.Read(input);
            if (info_ == null || value != "") {
              Info = value;
            }
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// GenelTanimlari
  /// </summary>
  public sealed partial class XGTproxy : pb::IMessage<XGTproxy> {
    private static readonly pb::MessageParser<XGTproxy> _parser = new pb::MessageParser<XGTproxy>(() => new XGTproxy());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<XGTproxy> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Rest.RestReflection.Descriptor.MessageTypes[8]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public XGTproxy() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public XGTproxy(XGTproxy other) : this() {
      rowState_ = other.rowState_;
      rowErr_ = other.rowErr_;
      rowPk_ = other.rowPk_;
      objP_ = other.objP_;
      kd_ = other.kd_;
      ad_ = other.ad_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public XGTproxy Clone() {
      return new XGTproxy(this);
    }

    /// <summary>Field number for the "row_state" field.</summary>
    public const int RowStateFieldNumber = 1;
    private string rowState_ = "";
    /// <summary>
    /// Inserted/Modified/Deleted/Unchanged
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string RowState {
      get { return rowState_; }
      set {
        rowState_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "row_err" field.</summary>
    public const int RowErrFieldNumber = 2;
    private string rowErr_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string RowErr {
      get { return rowErr_; }
      set {
        rowErr_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "row_pk" field.</summary>
    public const int RowPkFieldNumber = 3;
    private ulong rowPk_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong RowPk {
      get { return rowPk_; }
      set {
        rowPk_ = value;
      }
    }

    /// <summary>Field number for the "ObjP" field.</summary>
    public const int ObjPFieldNumber = 4;
    private ulong objP_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong ObjP {
      get { return objP_; }
      set {
        objP_ = value;
      }
    }

    /// <summary>Field number for the "Kd" field.</summary>
    public const int KdFieldNumber = 5;
    private string kd_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Kd {
      get { return kd_; }
      set {
        kd_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "Ad" field.</summary>
    public const int AdFieldNumber = 6;
    private string ad_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Ad {
      get { return ad_; }
      set {
        ad_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as XGTproxy);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(XGTproxy other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (RowState != other.RowState) return false;
      if (RowErr != other.RowErr) return false;
      if (RowPk != other.RowPk) return false;
      if (ObjP != other.ObjP) return false;
      if (Kd != other.Kd) return false;
      if (Ad != other.Ad) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (RowState.Length != 0) hash ^= RowState.GetHashCode();
      if (RowErr.Length != 0) hash ^= RowErr.GetHashCode();
      if (RowPk != 0UL) hash ^= RowPk.GetHashCode();
      if (ObjP != 0UL) hash ^= ObjP.GetHashCode();
      if (Kd.Length != 0) hash ^= Kd.GetHashCode();
      if (Ad.Length != 0) hash ^= Ad.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (RowState.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(RowState);
      }
      if (RowErr.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(RowErr);
      }
      if (RowPk != 0UL) {
        output.WriteRawTag(24);
        output.WriteUInt64(RowPk);
      }
      if (ObjP != 0UL) {
        output.WriteRawTag(32);
        output.WriteUInt64(ObjP);
      }
      if (Kd.Length != 0) {
        output.WriteRawTag(42);
        output.WriteString(Kd);
      }
      if (Ad.Length != 0) {
        output.WriteRawTag(50);
        output.WriteString(Ad);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (RowState.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(RowState);
      }
      if (RowErr.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(RowErr);
      }
      if (RowPk != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(RowPk);
      }
      if (ObjP != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(ObjP);
      }
      if (Kd.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Kd);
      }
      if (Ad.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Ad);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(XGTproxy other) {
      if (other == null) {
        return;
      }
      if (other.RowState.Length != 0) {
        RowState = other.RowState;
      }
      if (other.RowErr.Length != 0) {
        RowErr = other.RowErr;
      }
      if (other.RowPk != 0UL) {
        RowPk = other.RowPk;
      }
      if (other.ObjP != 0UL) {
        ObjP = other.ObjP;
      }
      if (other.Kd.Length != 0) {
        Kd = other.Kd;
      }
      if (other.Ad.Length != 0) {
        Ad = other.Ad;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            RowState = input.ReadString();
            break;
          }
          case 18: {
            RowErr = input.ReadString();
            break;
          }
          case 24: {
            RowPk = input.ReadUInt64();
            break;
          }
          case 32: {
            ObjP = input.ReadUInt64();
            break;
          }
          case 42: {
            Kd = input.ReadString();
            break;
          }
          case 50: {
            Ad = input.ReadString();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// DovizKurlari
  /// </summary>
  public sealed partial class XDKproxy : pb::IMessage<XDKproxy> {
    private static readonly pb::MessageParser<XDKproxy> _parser = new pb::MessageParser<XDKproxy>(() => new XDKproxy());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<XDKproxy> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Rest.RestReflection.Descriptor.MessageTypes[9]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public XDKproxy() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public XDKproxy(XDKproxy other) : this() {
      rowState_ = other.rowState_;
      rowErr_ = other.rowErr_;
      rowPk_ = other.rowPk_;
      trh_ = other.trh_;
      objDvz_ = other.objDvz_;
      kur_ = other.kur_;
      dvz_ = other.dvz_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public XDKproxy Clone() {
      return new XDKproxy(this);
    }

    /// <summary>Field number for the "row_state" field.</summary>
    public const int RowStateFieldNumber = 1;
    private string rowState_ = "";
    /// <summary>
    /// Inserted/Modified/Deleted/Unchanged
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string RowState {
      get { return rowState_; }
      set {
        rowState_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "row_err" field.</summary>
    public const int RowErrFieldNumber = 2;
    private string rowErr_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string RowErr {
      get { return rowErr_; }
      set {
        rowErr_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "row_pk" field.</summary>
    public const int RowPkFieldNumber = 3;
    private ulong rowPk_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong RowPk {
      get { return rowPk_; }
      set {
        rowPk_ = value;
      }
    }

    /// <summary>Field number for the "Trh" field.</summary>
    public const int TrhFieldNumber = 4;
    private long trh_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long Trh {
      get { return trh_; }
      set {
        trh_ = value;
      }
    }

    /// <summary>Field number for the "ObjDvz" field.</summary>
    public const int ObjDvzFieldNumber = 5;
    private ulong objDvz_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong ObjDvz {
      get { return objDvz_; }
      set {
        objDvz_ = value;
      }
    }

    /// <summary>Field number for the "Kur" field.</summary>
    public const int KurFieldNumber = 6;
    private float kur_;
    /// <summary>
    /// Dovizin TRL karsiligi
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float Kur {
      get { return kur_; }
      set {
        kur_ = value;
      }
    }

    /// <summary>Field number for the "Dvz" field.</summary>
    public const int DvzFieldNumber = 7;
    private string dvz_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Dvz {
      get { return dvz_; }
      set {
        dvz_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as XDKproxy);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(XDKproxy other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (RowState != other.RowState) return false;
      if (RowErr != other.RowErr) return false;
      if (RowPk != other.RowPk) return false;
      if (Trh != other.Trh) return false;
      if (ObjDvz != other.ObjDvz) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(Kur, other.Kur)) return false;
      if (Dvz != other.Dvz) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (RowState.Length != 0) hash ^= RowState.GetHashCode();
      if (RowErr.Length != 0) hash ^= RowErr.GetHashCode();
      if (RowPk != 0UL) hash ^= RowPk.GetHashCode();
      if (Trh != 0L) hash ^= Trh.GetHashCode();
      if (ObjDvz != 0UL) hash ^= ObjDvz.GetHashCode();
      if (Kur != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(Kur);
      if (Dvz.Length != 0) hash ^= Dvz.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (RowState.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(RowState);
      }
      if (RowErr.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(RowErr);
      }
      if (RowPk != 0UL) {
        output.WriteRawTag(24);
        output.WriteUInt64(RowPk);
      }
      if (Trh != 0L) {
        output.WriteRawTag(32);
        output.WriteInt64(Trh);
      }
      if (ObjDvz != 0UL) {
        output.WriteRawTag(40);
        output.WriteUInt64(ObjDvz);
      }
      if (Kur != 0F) {
        output.WriteRawTag(53);
        output.WriteFloat(Kur);
      }
      if (Dvz.Length != 0) {
        output.WriteRawTag(58);
        output.WriteString(Dvz);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (RowState.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(RowState);
      }
      if (RowErr.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(RowErr);
      }
      if (RowPk != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(RowPk);
      }
      if (Trh != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(Trh);
      }
      if (ObjDvz != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(ObjDvz);
      }
      if (Kur != 0F) {
        size += 1 + 4;
      }
      if (Dvz.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Dvz);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(XDKproxy other) {
      if (other == null) {
        return;
      }
      if (other.RowState.Length != 0) {
        RowState = other.RowState;
      }
      if (other.RowErr.Length != 0) {
        RowErr = other.RowErr;
      }
      if (other.RowPk != 0UL) {
        RowPk = other.RowPk;
      }
      if (other.Trh != 0L) {
        Trh = other.Trh;
      }
      if (other.ObjDvz != 0UL) {
        ObjDvz = other.ObjDvz;
      }
      if (other.Kur != 0F) {
        Kur = other.Kur;
      }
      if (other.Dvz.Length != 0) {
        Dvz = other.Dvz;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            RowState = input.ReadString();
            break;
          }
          case 18: {
            RowErr = input.ReadString();
            break;
          }
          case 24: {
            RowPk = input.ReadUInt64();
            break;
          }
          case 32: {
            Trh = input.ReadInt64();
            break;
          }
          case 40: {
            ObjDvz = input.ReadUInt64();
            break;
          }
          case 53: {
            Kur = input.ReadFloat();
            break;
          }
          case 58: {
            Dvz = input.ReadString();
            break;
          }
        }
      }
    }

  }

  public sealed partial class KMTproxy : pb::IMessage<KMTproxy> {
    private static readonly pb::MessageParser<KMTproxy> _parser = new pb::MessageParser<KMTproxy>(() => new KMTproxy());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<KMTproxy> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Rest.RestReflection.Descriptor.MessageTypes[10]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public KMTproxy() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public KMTproxy(KMTproxy other) : this() {
      rowState_ = other.rowState_;
      rowErr_ = other.rowErr_;
      rowPk_ = other.rowPk_;
      Ad = other.Ad;
      objTur_ = other.objTur_;
      Tel = other.Tel;
      Adres = other.Adres;
      Sorumlu = other.Sorumlu;
      VrgDN = other.VrgDN;
      objAHPbrc_ = other.objAHPbrc_;
      objAHPalc_ = other.objAHPalc_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public KMTproxy Clone() {
      return new KMTproxy(this);
    }

    /// <summary>Field number for the "row_state" field.</summary>
    public const int RowStateFieldNumber = 1;
    private string rowState_ = "";
    /// <summary>
    /// Inserted/Modified/Deleted/Unchanged
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string RowState {
      get { return rowState_; }
      set {
        rowState_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "row_err" field.</summary>
    public const int RowErrFieldNumber = 2;
    private string rowErr_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string RowErr {
      get { return rowErr_; }
      set {
        rowErr_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "row_pk" field.</summary>
    public const int RowPkFieldNumber = 3;
    private ulong rowPk_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong RowPk {
      get { return rowPk_; }
      set {
        rowPk_ = value;
      }
    }

    /// <summary>Field number for the "Ad" field.</summary>
    public const int AdFieldNumber = 4;
    private static readonly pb::FieldCodec<string> _single_ad_codec = pb::FieldCodec.ForClassWrapper<string>(34);
    private string ad_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Ad {
      get { return ad_; }
      set {
        ad_ = value;
      }
    }

    /// <summary>Field number for the "ObjTur" field.</summary>
    public const int ObjTurFieldNumber = 5;
    private ulong objTur_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong ObjTur {
      get { return objTur_; }
      set {
        objTur_ = value;
      }
    }

    /// <summary>Field number for the "Tel" field.</summary>
    public const int TelFieldNumber = 6;
    private static readonly pb::FieldCodec<string> _single_tel_codec = pb::FieldCodec.ForClassWrapper<string>(50);
    private string tel_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Tel {
      get { return tel_; }
      set {
        tel_ = value;
      }
    }

    /// <summary>Field number for the "Adres" field.</summary>
    public const int AdresFieldNumber = 7;
    private static readonly pb::FieldCodec<string> _single_adres_codec = pb::FieldCodec.ForClassWrapper<string>(58);
    private string adres_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Adres {
      get { return adres_; }
      set {
        adres_ = value;
      }
    }

    /// <summary>Field number for the "Sorumlu" field.</summary>
    public const int SorumluFieldNumber = 8;
    private static readonly pb::FieldCodec<string> _single_sorumlu_codec = pb::FieldCodec.ForClassWrapper<string>(66);
    private string sorumlu_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Sorumlu {
      get { return sorumlu_; }
      set {
        sorumlu_ = value;
      }
    }

    /// <summary>Field number for the "VrgDN" field.</summary>
    public const int VrgDNFieldNumber = 9;
    private static readonly pb::FieldCodec<string> _single_vrgDN_codec = pb::FieldCodec.ForClassWrapper<string>(74);
    private string vrgDN_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string VrgDN {
      get { return vrgDN_; }
      set {
        vrgDN_ = value;
      }
    }

    /// <summary>Field number for the "ObjAHPbrc" field.</summary>
    public const int ObjAHPbrcFieldNumber = 10;
    private ulong objAHPbrc_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong ObjAHPbrc {
      get { return objAHPbrc_; }
      set {
        objAHPbrc_ = value;
      }
    }

    /// <summary>Field number for the "ObjAHPalc" field.</summary>
    public const int ObjAHPalcFieldNumber = 11;
    private ulong objAHPalc_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong ObjAHPalc {
      get { return objAHPalc_; }
      set {
        objAHPalc_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as KMTproxy);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(KMTproxy other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (RowState != other.RowState) return false;
      if (RowErr != other.RowErr) return false;
      if (RowPk != other.RowPk) return false;
      if (Ad != other.Ad) return false;
      if (ObjTur != other.ObjTur) return false;
      if (Tel != other.Tel) return false;
      if (Adres != other.Adres) return false;
      if (Sorumlu != other.Sorumlu) return false;
      if (VrgDN != other.VrgDN) return false;
      if (ObjAHPbrc != other.ObjAHPbrc) return false;
      if (ObjAHPalc != other.ObjAHPalc) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (RowState.Length != 0) hash ^= RowState.GetHashCode();
      if (RowErr.Length != 0) hash ^= RowErr.GetHashCode();
      if (RowPk != 0UL) hash ^= RowPk.GetHashCode();
      if (ad_ != null) hash ^= Ad.GetHashCode();
      if (ObjTur != 0UL) hash ^= ObjTur.GetHashCode();
      if (tel_ != null) hash ^= Tel.GetHashCode();
      if (adres_ != null) hash ^= Adres.GetHashCode();
      if (sorumlu_ != null) hash ^= Sorumlu.GetHashCode();
      if (vrgDN_ != null) hash ^= VrgDN.GetHashCode();
      if (ObjAHPbrc != 0UL) hash ^= ObjAHPbrc.GetHashCode();
      if (ObjAHPalc != 0UL) hash ^= ObjAHPalc.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (RowState.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(RowState);
      }
      if (RowErr.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(RowErr);
      }
      if (RowPk != 0UL) {
        output.WriteRawTag(24);
        output.WriteUInt64(RowPk);
      }
      if (ad_ != null) {
        _single_ad_codec.WriteTagAndValue(output, Ad);
      }
      if (ObjTur != 0UL) {
        output.WriteRawTag(40);
        output.WriteUInt64(ObjTur);
      }
      if (tel_ != null) {
        _single_tel_codec.WriteTagAndValue(output, Tel);
      }
      if (adres_ != null) {
        _single_adres_codec.WriteTagAndValue(output, Adres);
      }
      if (sorumlu_ != null) {
        _single_sorumlu_codec.WriteTagAndValue(output, Sorumlu);
      }
      if (vrgDN_ != null) {
        _single_vrgDN_codec.WriteTagAndValue(output, VrgDN);
      }
      if (ObjAHPbrc != 0UL) {
        output.WriteRawTag(80);
        output.WriteUInt64(ObjAHPbrc);
      }
      if (ObjAHPalc != 0UL) {
        output.WriteRawTag(88);
        output.WriteUInt64(ObjAHPalc);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (RowState.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(RowState);
      }
      if (RowErr.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(RowErr);
      }
      if (RowPk != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(RowPk);
      }
      if (ad_ != null) {
        size += _single_ad_codec.CalculateSizeWithTag(Ad);
      }
      if (ObjTur != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(ObjTur);
      }
      if (tel_ != null) {
        size += _single_tel_codec.CalculateSizeWithTag(Tel);
      }
      if (adres_ != null) {
        size += _single_adres_codec.CalculateSizeWithTag(Adres);
      }
      if (sorumlu_ != null) {
        size += _single_sorumlu_codec.CalculateSizeWithTag(Sorumlu);
      }
      if (vrgDN_ != null) {
        size += _single_vrgDN_codec.CalculateSizeWithTag(VrgDN);
      }
      if (ObjAHPbrc != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(ObjAHPbrc);
      }
      if (ObjAHPalc != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(ObjAHPalc);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(KMTproxy other) {
      if (other == null) {
        return;
      }
      if (other.RowState.Length != 0) {
        RowState = other.RowState;
      }
      if (other.RowErr.Length != 0) {
        RowErr = other.RowErr;
      }
      if (other.RowPk != 0UL) {
        RowPk = other.RowPk;
      }
      if (other.ad_ != null) {
        if (ad_ == null || other.Ad != "") {
          Ad = other.Ad;
        }
      }
      if (other.ObjTur != 0UL) {
        ObjTur = other.ObjTur;
      }
      if (other.tel_ != null) {
        if (tel_ == null || other.Tel != "") {
          Tel = other.Tel;
        }
      }
      if (other.adres_ != null) {
        if (adres_ == null || other.Adres != "") {
          Adres = other.Adres;
        }
      }
      if (other.sorumlu_ != null) {
        if (sorumlu_ == null || other.Sorumlu != "") {
          Sorumlu = other.Sorumlu;
        }
      }
      if (other.vrgDN_ != null) {
        if (vrgDN_ == null || other.VrgDN != "") {
          VrgDN = other.VrgDN;
        }
      }
      if (other.ObjAHPbrc != 0UL) {
        ObjAHPbrc = other.ObjAHPbrc;
      }
      if (other.ObjAHPalc != 0UL) {
        ObjAHPalc = other.ObjAHPalc;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            RowState = input.ReadString();
            break;
          }
          case 18: {
            RowErr = input.ReadString();
            break;
          }
          case 24: {
            RowPk = input.ReadUInt64();
            break;
          }
          case 34: {
            string value = _single_ad_codec.Read(input);
            if (ad_ == null || value != "") {
              Ad = value;
            }
            break;
          }
          case 40: {
            ObjTur = input.ReadUInt64();
            break;
          }
          case 50: {
            string value = _single_tel_codec.Read(input);
            if (tel_ == null || value != "") {
              Tel = value;
            }
            break;
          }
          case 58: {
            string value = _single_adres_codec.Read(input);
            if (adres_ == null || value != "") {
              Adres = value;
            }
            break;
          }
          case 66: {
            string value = _single_sorumlu_codec.Read(input);
            if (sorumlu_ == null || value != "") {
              Sorumlu = value;
            }
            break;
          }
          case 74: {
            string value = _single_vrgDN_codec.Read(input);
            if (vrgDN_ == null || value != "") {
              VrgDN = value;
            }
            break;
          }
          case 80: {
            ObjAHPbrc = input.ReadUInt64();
            break;
          }
          case 88: {
            ObjAHPalc = input.ReadUInt64();
            break;
          }
        }
      }
    }

  }

  #endregion

}

#endregion Designer generated code
