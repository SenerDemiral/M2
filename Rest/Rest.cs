// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: protos/rest.proto
// </auto-generated>
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace Rest {

  /// <summary>Holder for reflection information generated from protos/rest.proto</summary>
  public static partial class RestReflection {

    #region Descriptor
    /// <summary>File descriptor for protos/rest.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static RestReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "ChFwcm90b3MvcmVzdC5wcm90bxIEcmVzdBoeZ29vZ2xlL3Byb3RvYnVmL3dy",
            "YXBwZXJzLnByb3RvIhUKB1BLcHJveHkSCgoCUEsYASABKAQiMwoKUXJ5QlJw",
            "cm94eRIJCgFNGAEgASgEEgwKBE10eXAYAiABKAkSDAoERHR5cBgDIAEoCSIl",
            "CgpRcnlNRHByb3h5EgkKAU0YASABKAQSDAoETXR5cBgCIAEoCSIkCglRcnlQ",
            "cHJveHkSCQoBUBgBIAEoBBIMCgRQdHlwGAIgASgJIigKCFFyeVByb3h5Eg0K",
            "BXF1ZXJ5GAEgASgJEg0KBXBhcmFtGAIgASgJIoYBCgtOZVRyZWVQcm94eRIJ",
            "CgFMGAEgASgFEgkKAVAYAiABKAQSCQoBSxgDIAEoBBIJCgFBGAQgASgJEgkK",
            "AU4YBSABKAQSCQoBTRgGIAEoARIKCgJNVBgHIAEoARIJCgFGGAggASgBEg4K",
            "Bkhhc0tpZBgJIAEoCBIOCgZVcmV0ZW4YCiABKAkiVAoTTm9kZXNJblBhcmVu",
            "dHNQcm94eRILCgNLTm8YASABKAQSCwoDUE5vGAIgASgEEgsKA0tBZBgDIAEo",
            "CRILCgNQQWQYBCABKAkSCQoBTRgFIAEoASKQAQoJVGJsYVByb3h5EhEKCXJv",
            "d19zdGF0ZRgBIAEoCRIPCgdyb3dfZXJyGAIgASgJEg4KBnJvd19waxgDIAEo",
            "BBIOCgZmbGRTdHIYBCABKAkSDgoGZmxkSW50GAUgASgFEg4KBmZsZERibBgG",
            "IAEoARIOCgZmbGREY20YByABKAESDwoHZmxkRGF0ZRgIIAEoAyIyCgdCYXNl",
            "Um93Eg0KBVN0YXRlGAEgASgJEgsKA0VychgCIAEoCRILCgNVc3IYAyABKAQi",
            "2QEKCEFCS3Byb3h5Eg4KBlJvd1N0ZRgBIAEoCRIOCgZSb3dFcnIYAiABKAkS",
            "DgoGUm93VXNyGAMgASgEEg4KBlJvd0tleRgEIAEoBBIoCgJLZBgFIAEoCzIc",
            "Lmdvb2dsZS5wcm90b2J1Zi5TdHJpbmdWYWx1ZRIoCgJBZBgGIAEoCzIcLmdv",
            "b2dsZS5wcm90b2J1Zi5TdHJpbmdWYWx1ZRIqCgRJbmZvGAcgASgLMhwuZ29v",
            "Z2xlLnByb3RvYnVmLlN0cmluZ1ZhbHVlEg0KBUlzQnJjGAggASgIIsoBCghB",
            "Vktwcm94eRIOCgZSb3dTdGUYASABKAkSDgoGUm93RXJyGAIgASgJEg4KBlJv",
            "d1VzchgDIAEoBBIOCgZSb3dLZXkYBCABKAQSKAoCS2QYBSABKAsyHC5nb29n",
            "bGUucHJvdG9idWYuU3RyaW5nVmFsdWUSKAoCQWQYBiABKAsyHC5nb29nbGUu",
            "cHJvdG9idWYuU3RyaW5nVmFsdWUSKgoESW5mbxgHIAEoCzIcLmdvb2dsZS5w",
            "cm90b2J1Zi5TdHJpbmdWYWx1ZSJyCglBTjJIcHJveHkSDgoGUm93U3RlGAEg",
            "ASgJEg4KBlJvd0VychgCIAEoCRIOCgZSb3dVc3IYAyABKAQSDgoGUm93S2V5",
            "GAQgASgEEgsKA05OVBgFIAEoBBILCgNBQksYBiABKAQSCwoDQUhQGAcgASgE",
            "IpkCCghBSFBwcm94eRIOCgZSb3dTdGUYASABKAkSDgoGUm93RXJyGAIgASgJ",
            "Eg4KBlJvd1VzchgDIAEoBBIOCgZSb3dLZXkYBCABKAQSCQoBUBgFIAEoBBIo",
            "CgJLZBgGIAEoCzIcLmdvb2dsZS5wcm90b2J1Zi5TdHJpbmdWYWx1ZRIoCgJB",
            "ZBgHIAEoCzIcLmdvb2dsZS5wcm90b2J1Zi5TdHJpbmdWYWx1ZRIqCgRJbmZv",
            "GAggASgLMhwuZ29vZ2xlLnByb3RvYnVmLlN0cmluZ1ZhbHVlEg0KBUhzcE5v",
            "GAkgASgJEgsKA0JyYxgKIAEoARILCgNBbGMYCyABKAESCwoDSXNXGAwgASgI",
            "EgwKBEhhc0gYDSABKAgimAIKCEFWTXByb3h5Eg4KBlJvd1N0ZRgBIAEoCRIO",
            "CgZSb3dFcnIYAiABKAkSDgoGUm93VXNyGAMgASgEEg4KBlJvd0tleRgEIAEo",
            "BBILCgNPUkcYBSABKAQSCwoDVHJoGAYgASgDEgsKA0FWSxgHIAEoBBILCgNE",
            "cm0YCCABKAkSKAoCS2QYCSABKAsyHC5nb29nbGUucHJvdG9idWYuU3RyaW5n",
            "VmFsdWUSKAoCQWQYCiABKAsyHC5nb29nbGUucHJvdG9idWYuU3RyaW5nVmFs",
            "dWUSKgoESW5mbxgLIAEoCzIcLmdvb2dsZS5wcm90b2J1Zi5TdHJpbmdWYWx1",
            "ZRILCgNCcmMYDCABKAESCwoDQWxjGA0gASgBIpoCCghBVkRwcm94eRIOCgZS",
            "b3dTdGUYASABKAkSDgoGUm93RXJyGAIgASgJEg4KBlJvd1VzchgDIAEoBBIO",
            "CgZSb3dLZXkYBCABKAQSCwoDQVZNGAUgASgEEgsKA0FIUBgGIAEoBBIoCgJL",
            "ZBgHIAEoCzIcLmdvb2dsZS5wcm90b2J1Zi5TdHJpbmdWYWx1ZRIoCgJBZBgI",
            "IAEoCzIcLmdvb2dsZS5wcm90b2J1Zi5TdHJpbmdWYWx1ZRIqCgRJbmZvGAkg",
            "ASgLMhwuZ29vZ2xlLnByb3RvYnVmLlN0cmluZ1ZhbHVlEgsKA1R1dBgKIAEo",
            "ARILCgNEVlQYCyABKAQSCwoDS3VyGAwgASgCEg0KBVR1dFRMGA0gASgBIrEC",
            "CghBQk1wcm94eRIOCgZSb3dTdGUYASABKAkSDgoGUm93RXJyGAIgASgJEg4K",
            "BlJvd1VzchgDIAEoBBIOCgZSb3dLZXkYBCABKAQSCwoDVHJoGAUgASgDEgsK",
            "A0FCSxgGIAEoBBILCgNEcm0YByABKAkSCwoDS0ZUGAggASgEEgoKAkJBGAkg",
            "ASgJEgsKA0RWVBgKIAEoBBILCgNLdXIYCyABKAISCwoDVHV0GAwgASgBEigK",
            "AktkGA0gASgLMhwuZ29vZ2xlLnByb3RvYnVmLlN0cmluZ1ZhbHVlEigKAkFk",
            "GA4gASgLMhwuZ29vZ2xlLnByb3RvYnVmLlN0cmluZ1ZhbHVlEioKBEluZm8Y",
            "DyABKAsyHC5nb29nbGUucHJvdG9idWYuU3RyaW5nVmFsdWUisgIKCEFCRHBy",
            "b3h5Eg4KBlJvd1N0ZRgBIAEoCRIOCgZSb3dFcnIYAiABKAkSDgoGUm93VXNy",
            "GAMgASgEEg4KBlJvd0tleRgEIAEoBBILCgNBQk0YBSABKAQSCwoDTk5UGAYg",
            "ASgEEgsKA0FIUBgHIAEoBBILCgNGeXQYCCABKAESCwoDRFZUGAkgASgEEgsK",
            "A01paxgKIAEoARILCgNLdXIYCyABKAISCwoDS0RZGAwgASgFEigKAktkGA0g",
            "ASgLMhwuZ29vZ2xlLnByb3RvYnVmLlN0cmluZ1ZhbHVlEigKAkFkGA4gASgL",
            "MhwuZ29vZ2xlLnByb3RvYnVmLlN0cmluZ1ZhbHVlEioKBEluZm8YDyABKAsy",
            "HC5nb29nbGUucHJvdG9idWYuU3RyaW5nVmFsdWUiiwIKCFRPTXByb3h5Eg4K",
            "BlJvd1N0ZRgBIAEoCRIOCgZSb3dFcnIYAiABKAkSDgoGUm93VXNyGAMgASgE",
            "Eg4KBlJvd0tleRgEIAEoBBILCgNUcmgYBSABKAMSCwoDS05EGAYgASgEEgsK",
            "A0RybRgHIAEoCRILCgNPUkcYCCABKAQSCwoDRFNUGAkgASgEEigKAktkGAog",
            "ASgLMhwuZ29vZ2xlLnByb3RvYnVmLlN0cmluZ1ZhbHVlEigKAkFkGAsgASgL",
            "MhwuZ29vZ2xlLnByb3RvYnVmLlN0cmluZ1ZhbHVlEioKBGluZm8YDCABKAsy",
            "HC5nb29nbGUucHJvdG9idWYuU3RyaW5nVmFsdWUi1wEKCFRPRHByb3h5Eg4K",
            "BlJvd1N0ZRgBIAEoCRIOCgZSb3dFcnIYAiABKAkSDgoGUm93VXNyGAMgASgE",
            "Eg4KBlJvd0tleRgEIAEoBBILCgNUT00YBSABKAQSKAoCS2QYBiABKAsyHC5n",
            "b29nbGUucHJvdG9idWYuU3RyaW5nVmFsdWUSKAoCQWQYByABKAsyHC5nb29n",
            "bGUucHJvdG9idWYuU3RyaW5nVmFsdWUSKgoEaW5mbxgIIAEoCzIcLmdvb2ds",
            "ZS5wcm90b2J1Zi5TdHJpbmdWYWx1ZSLxAQoIVFdNcHJveHkSDgoGUm93U3Rl",
            "GAEgASgJEg4KBlJvd0VychgCIAEoCRIOCgZSb3dVc3IYAyABKAQSDgoGUm93",
            "S2V5GAQgASgEEgsKA1RyaBgFIAEoAxILCgNLTkQYBiABKAQSCwoDRHJtGAcg",
            "ASgJEigKAktkGAggASgLMhwuZ29vZ2xlLnByb3RvYnVmLlN0cmluZ1ZhbHVl",
            "EigKAkFkGAkgASgLMhwuZ29vZ2xlLnByb3RvYnVmLlN0cmluZ1ZhbHVlEioK",
            "BGluZm8YCiABKAsyHC5nb29nbGUucHJvdG9idWYuU3RyaW5nVmFsdWUi1wEK",
            "CFRXRHByb3h5Eg4KBlJvd1N0ZRgBIAEoCRIOCgZSb3dFcnIYAiABKAkSDgoG",
            "Um93VXNyGAMgASgEEg4KBlJvd0tleRgEIAEoBBILCgNUV00YBSABKAQSKAoC",
            "S2QYBiABKAsyHC5nb29nbGUucHJvdG9idWYuU3RyaW5nVmFsdWUSKAoCQWQY",
            "ByABKAsyHC5nb29nbGUucHJvdG9idWYuU3RyaW5nVmFsdWUSKgoEaW5mbxgI",
            "IAEoCzIcLmdvb2dsZS5wcm90b2J1Zi5TdHJpbmdWYWx1ZSLkAQoITk5UcHJv",
            "eHkSDgoGUm93U3RlGAEgASgJEg4KBlJvd0VychgCIAEoCRIOCgZSb3dVc3IY",
            "AyABKAQSDgoGUm93S2V5GAQgASgEEigKAktkGAUgASgLMhwuZ29vZ2xlLnBy",
            "b3RvYnVmLlN0cmluZ1ZhbHVlEigKAkFkGAYgASgLMhwuZ29vZ2xlLnByb3Rv",
            "YnVmLlN0cmluZ1ZhbHVlEioKBEluZm8YByABKAsyHC5nb29nbGUucHJvdG9i",
            "dWYuU3RyaW5nVmFsdWUSCwoDQlJNGAggASgEEgsKA0Z5dBgJIAEoASJvCghO",
            "TlJwcm94eRIOCgZSb3dTdGUYASABKAkSDgoGUm93RXJyGAIgASgJEg4KBlJv",
            "d1VzchgDIAEoBBIOCgZSb3dLZXkYBCABKAQSCgoCTlAYBSABKAQSCgoCTkMY",
            "BiABKAQSCwoDTWlrGAcgASgBIi0KDk5lUGFyZW50c1Byb3h5EgoKAk5lGAEg",
            "ASgEEg8KB1BhcmVudHMYAiABKAkibwoHQlJwcm94eRIOCgZSb3dTdGUYASAB",
            "KAkSDgoGUm93RXJyGAIgASgJEg4KBlJvd1VzchgDIAEoBBIOCgZSb3dLZXkY",
            "BCABKAQSCQoBUBgFIAEoBBIJCgFDGAYgASgEEg4KBk90aGVycxgHIAEoCSIv",
            "Cg5CUnBhcmVudHNQcm94eRIMCgROb2RlGAEgASgEEg8KB1BhcmVudHMYAiAB",
            "KAkingMKCEtGVHByb3h5Eg4KBlJvd1N0ZRgBIAEoCRIOCgZSb3dFcnIYAiAB",
            "KAkSDgoGUm93VXNyGAMgASgEEg4KBlJvd0tleRgEIAEoBBIoCgJLZBgFIAEo",
            "CzIcLmdvb2dsZS5wcm90b2J1Zi5TdHJpbmdWYWx1ZRIoCgJBZBgGIAEoCzIc",
            "Lmdvb2dsZS5wcm90b2J1Zi5TdHJpbmdWYWx1ZRIqCgRJbmZvGAcgASgLMhwu",
            "Z29vZ2xlLnByb3RvYnVmLlN0cmluZ1ZhbHVlEikKA1RlbBgIIAEoCzIcLmdv",
            "b2dsZS5wcm90b2J1Zi5TdHJpbmdWYWx1ZRIrCgVBZHJlcxgJIAEoCzIcLmdv",
            "b2dsZS5wcm90b2J1Zi5TdHJpbmdWYWx1ZRItCgdTb3J1bWx1GAogASgLMhwu",
            "Z29vZ2xlLnByb3RvYnVmLlN0cmluZ1ZhbHVlEisKBVZyZ0ROGAsgASgLMhwu",
            "Z29vZ2xlLnByb3RvYnVmLlN0cmluZ1ZhbHVlEg4KBkFIUGJyYxgMIAEoBBIO",
            "CgZBSFBhbGMYDSABKAQi1QEKCEtDVHByb3h5Eg4KBlJvd1N0ZRgBIAEoCRIO",
            "CgZSb3dFcnIYAiABKAkSDgoGUm93VXNyGAMgASgEEg4KBlJvd0tleRgEIAEo",
            "BBIJCgFNGAUgASgEEigKAktkGAYgASgLMhwuZ29vZ2xlLnByb3RvYnVmLlN0",
            "cmluZ1ZhbHVlEigKAkFkGAcgASgLMhwuZ29vZ2xlLnByb3RvYnVmLlN0cmlu",
            "Z1ZhbHVlEioKBGluZm8YCCABKAsyHC5nb29nbGUucHJvdG9idWYuU3RyaW5n",
            "VmFsdWUiygEKCEtEVHByb3h5Eg4KBlJvd1N0ZRgBIAEoCRIOCgZSb3dFcnIY",
            "AiABKAkSDgoGUm93VXNyGAMgASgEEg4KBlJvd0tleRgEIAEoBBIoCgJLZBgF",
            "IAEoCzIcLmdvb2dsZS5wcm90b2J1Zi5TdHJpbmdWYWx1ZRIoCgJBZBgGIAEo",
            "CzIcLmdvb2dsZS5wcm90b2J1Zi5TdHJpbmdWYWx1ZRIqCgRpbmZvGAcgASgL",
            "MhwuZ29vZ2xlLnByb3RvYnVmLlN0cmluZ1ZhbHVlIkUKDEtEVHRyZWVQcm94",
            "eRIJCgFMGAEgASgFEgkKAVAYAiABKAQSCQoBSxgDIAEoBBIJCgFBGAQgASgJ",
            "EgkKAU4YBSABKAQiygEKCEtQVHByb3h5Eg4KBlJvd1N0ZRgBIAEoCRIOCgZS",
            "b3dFcnIYAiABKAkSDgoGUm93VXNyGAMgASgEEg4KBlJvd0tleRgEIAEoBBIo",
            "CgJLZBgFIAEoCzIcLmdvb2dsZS5wcm90b2J1Zi5TdHJpbmdWYWx1ZRIoCgJB",
            "ZBgGIAEoCzIcLmdvb2dsZS5wcm90b2J1Zi5TdHJpbmdWYWx1ZRIqCgRpbmZv",
            "GAcgASgLMhwuZ29vZ2xlLnByb3RvYnVmLlN0cmluZ1ZhbHVlItUBCghLSFRw",
            "cm94eRIOCgZSb3dTdGUYASABKAkSDgoGUm93RXJyGAIgASgJEg4KBlJvd1Vz",
            "chgDIAEoBBIOCgZSb3dLZXkYBCABKAQSCQoBTRgFIAEoBBIoCgJLZBgGIAEo",
            "CzIcLmdvb2dsZS5wcm90b2J1Zi5TdHJpbmdWYWx1ZRIoCgJBZBgHIAEoCzIc",
            "Lmdvb2dsZS5wcm90b2J1Zi5TdHJpbmdWYWx1ZRIqCgRpbmZvGAggASgLMhwu",
            "Z29vZ2xlLnByb3RvYnVmLlN0cmluZ1ZhbHVlIm0KCFhHVHByb3h5Eg4KBlJv",
            "d1N0ZRgBIAEoCRIOCgZSb3dFcnIYAiABKAkSDgoGUm93VXNyGAMgASgEEg4K",
            "BlJvd0tleRgEIAEoBBIJCgFQGAUgASgEEgoKAktkGAYgASgJEgoKAkFkGAcg",
            "ASgJIn4KCFhES3Byb3h5Eg4KBlJvd1N0ZRgBIAEoCRIOCgZSb3dFcnIYAiAB",
            "KAkSDgoGUm93VXNyGAMgASgEEg4KBlJvd0tleRgEIAEoBBILCgNUcmgYBSAB",
            "KAMSCwoDRFZUGAYgASgEEgsKA0t1chgHIAEoAhILCgNEdnoYCCABKAkicAoI",
            "VVVVcHJveHkSDgoGUm93U3RlGAEgASgJEg4KBlJvd0VychgCIAEoCRIOCgZS",
            "b3dVc3IYAyABKAQSDgoGUm93S2V5GAQgASgEEgsKA1VZVBgFIAEoBBIKCgJB",
            "ZBgGIAEoCRILCgNQd2QYByABKAkiVgoIVVlUcHJveHkSDgoGUm93U3RlGAEg",
            "ASgJEg4KBlJvd0VychgCIAEoCRIOCgZSb3dVc3IYAyABKAQSDgoGUm93S2V5",
            "GAQgASgEEgoKAkFkGAUgASgJImAKCFVZSHByb3h5Eg4KBlJvd1N0ZRgBIAEo",
            "CRIOCgZSb3dFcnIYAiABKAkSDgoGUm93VXNyGAMgASgEEg4KBlJvd0tleRgE",
            "IAEoBBIJCgFQGAUgASgEEgkKAUsYBiABKAQy/xUKBUNSVURzEi8KCFRibGFG",
            "aWxsEg4ucmVzdC5RcnlQcm94eRoPLnJlc3QuVGJsYVByb3h5IgAwARIwCgpU",
            "YmxhVXBkYXRlEg8ucmVzdC5UYmxhUHJveHkaDy5yZXN0LlRibGFQcm94eSIA",
            "Ei0KB0FCS2ZpbGwSDi5yZXN0LlFyeVByb3h5Gg4ucmVzdC5BQktwcm94eSIA",
            "MAESLQoJQUJLdXBkYXRlEg4ucmVzdC5BQktwcm94eRoOLnJlc3QuQUJLcHJv",
            "eHkiABItCgdBVktmaWxsEg4ucmVzdC5RcnlQcm94eRoOLnJlc3QuQVZLcHJv",
            "eHkiADABEi0KCUFWS3VwZGF0ZRIOLnJlc3QuQVZLcHJveHkaDi5yZXN0LkFW",
            "S3Byb3h5IgASLwoIQU4ySGZpbGwSDi5yZXN0LlFyeVByb3h5Gg8ucmVzdC5B",
            "TjJIcHJveHkiADABEjAKCkFOMkh1cGRhdGUSDy5yZXN0LkFOMkhwcm94eRoP",
            "LnJlc3QuQU4ySHByb3h5IgASLQoHQUhQZmlsbBIOLnJlc3QuUXJ5UHJveHka",
            "Di5yZXN0LkFIUHByb3h5IgAwARItCglBSFB1cGRhdGUSDi5yZXN0LkFIUHBy",
            "b3h5Gg4ucmVzdC5BSFBwcm94eSIAEi0KB0FWTWZpbGwSDi5yZXN0LlFyeVBy",
            "b3h5Gg4ucmVzdC5BVk1wcm94eSIAMAESLQoJQVZNdXBkYXRlEg4ucmVzdC5B",
            "Vk1wcm94eRoOLnJlc3QuQVZNcHJveHkiABIvCgdBVkRmaWxsEhAucmVzdC5R",
            "cnlNRHByb3h5Gg4ucmVzdC5BVkRwcm94eSIAMAESLQoJQVZEdXBkYXRlEg4u",
            "cmVzdC5BVkRwcm94eRoOLnJlc3QuQVZEcHJveHkiABItCgdBQk1maWxsEg4u",
            "cmVzdC5RcnlQcm94eRoOLnJlc3QuQUJNcHJveHkiADABEi0KCUFCTXVwZGF0",
            "ZRIOLnJlc3QuQUJNcHJveHkaDi5yZXN0LkFCTXByb3h5IgASLwoHQUJEZmls",
            "bBIQLnJlc3QuUXJ5TURwcm94eRoOLnJlc3QuQUJEcHJveHkiADABEi0KCUFC",
            "RHVwZGF0ZRIOLnJlc3QuQUJEcHJveHkaDi5yZXN0LkFCRHByb3h5IgASLQoH",
            "VE9NZmlsbBIOLnJlc3QuUXJ5UHJveHkaDi5yZXN0LlRPTXByb3h5IgAwARIt",
            "CglUT011cGRhdGUSDi5yZXN0LlRPTXByb3h5Gg4ucmVzdC5UT01wcm94eSIA",
            "Ei8KB1RPRGZpbGwSEC5yZXN0LlFyeU1EcHJveHkaDi5yZXN0LlRPRHByb3h5",
            "IgAwARItCglUT0R1cGRhdGUSDi5yZXN0LlRPRHByb3h5Gg4ucmVzdC5UT0Rw",
            "cm94eSIAEi0KB1RXTWZpbGwSDi5yZXN0LlFyeVByb3h5Gg4ucmVzdC5UV01w",
            "cm94eSIAMAESLQoJVFdNdXBkYXRlEg4ucmVzdC5UV01wcm94eRoOLnJlc3Qu",
            "VFdNcHJveHkiABIvCgdUV0RmaWxsEhAucmVzdC5RcnlNRHByb3h5Gg4ucmVz",
            "dC5UV0Rwcm94eSIAMAESLQoJVFdEdXBkYXRlEg4ucmVzdC5UV0Rwcm94eRoO",
            "LnJlc3QuVFdEcHJveHkiABItCgdYR1RmaWxsEg4ucmVzdC5RcnlQcm94eRoO",
            "LnJlc3QuWEdUcHJveHkiADABEi0KCVhHVHVwZGF0ZRIOLnJlc3QuWEdUcHJv",
            "eHkaDi5yZXN0LlhHVHByb3h5IgASLQoHWERLZmlsbBIOLnJlc3QuUXJ5UHJv",
            "eHkaDi5yZXN0LlhES3Byb3h5IgAwARItCglYREt1cGRhdGUSDi5yZXN0LlhE",
            "S3Byb3h5Gg4ucmVzdC5YREtwcm94eSIAEi0KB1VVVWZpbGwSDi5yZXN0LlFy",
            "eVByb3h5Gg4ucmVzdC5VVVVwcm94eSIAMAESLQoJVVVVdXBkYXRlEg4ucmVz",
            "dC5VVVVwcm94eRoOLnJlc3QuVVVVcHJveHkiABItCgdVWVRmaWxsEg4ucmVz",
            "dC5RcnlQcm94eRoOLnJlc3QuVVlUcHJveHkiADABEi0KCVVZVHVwZGF0ZRIO",
            "LnJlc3QuVVlUcHJveHkaDi5yZXN0LlVZVHByb3h5IgASLQoHVVlIZmlsbBIO",
            "LnJlc3QuUXJ5UHJveHkaDi5yZXN0LlVZSHByb3h5IgAwARItCglVWUh1cGRh",
            "dGUSDi5yZXN0LlVZSHByb3h5Gg4ucmVzdC5VWUhwcm94eSIAEi0KB05OVGZp",
            "bGwSDi5yZXN0LlFyeVByb3h5Gg4ucmVzdC5OTlRwcm94eSIAMAESLQoJTk5U",
            "dXBkYXRlEg4ucmVzdC5OTlRwcm94eRoOLnJlc3QuTk5UcHJveHkiABIsCgdO",
            "TlJmaWxsEg0ucmVzdC5QS3Byb3h5Gg4ucmVzdC5OTlJwcm94eSIAMAESLQoJ",
            "Tk5SdXBkYXRlEg4ucmVzdC5OTlJwcm94eRoOLnJlc3QuTk5ScHJveHkiABI4",
            "Cg1OZVBhcmVudHNGaWxsEg0ucmVzdC5QS3Byb3h5GhQucmVzdC5OZVBhcmVu",
            "dHNQcm94eSIAMAESMQoITmVVcEZpbGwSDi5yZXN0LlFyeVByb3h5GhEucmVz",
            "dC5OZVRyZWVQcm94eSIAMAESMwoKTmVEb3duRmlsbBIOLnJlc3QuUXJ5UHJv",
            "eHkaES5yZXN0Lk5lVHJlZVByb3h5IgAwARJDChJOb2Rlc0luUGFyZW50c0Zp",
            "bGwSDi5yZXN0LlFyeVByb3h5GhkucmVzdC5Ob2Rlc0luUGFyZW50c1Byb3h5",
            "IgAwARItCgdLRlRmaWxsEg4ucmVzdC5RcnlQcm94eRoOLnJlc3QuS0ZUcHJv",
            "eHkiADABEi0KCUtGVHVwZGF0ZRIOLnJlc3QuS0ZUcHJveHkaDi5yZXN0LktG",
            "VHByb3h5IgASLgoHS0NUZmlsbBIPLnJlc3QuUXJ5UHByb3h5Gg4ucmVzdC5L",
            "Q1Rwcm94eSIAMAESLQoJS0NUdXBkYXRlEg4ucmVzdC5LQ1Rwcm94eRoOLnJl",
            "c3QuS0NUcHJveHkiABItCgdLUFRmaWxsEg4ucmVzdC5RcnlQcm94eRoOLnJl",
            "c3QuS1BUcHJveHkiADABEi0KCUtQVHVwZGF0ZRIOLnJlc3QuS1BUcHJveHka",
            "Di5yZXN0LktQVHByb3h5IgASLQoHS0RUZmlsbBIOLnJlc3QuUXJ5UHJveHka",
            "Di5yZXN0LktEVHByb3h5IgAwARItCglLRFR1cGRhdGUSDi5yZXN0LktEVHBy",
            "b3h5Gg4ucmVzdC5LRFRwcm94eSIAEjkKD0tEVHRyZWVEb3duRmlsbBIOLnJl",
            "c3QuUXJ5UHJveHkaEi5yZXN0LktEVHRyZWVQcm94eSIAMAESLgoHS0hUZmls",
            "bBIPLnJlc3QuUXJ5UHByb3h5Gg4ucmVzdC5LSFRwcm94eSIAMAESLQoJS0hU",
            "dXBkYXRlEg4ucmVzdC5LSFRwcm94eRoOLnJlc3QuS0hUcHJveHkiABItCgZC",
            "UmZpbGwSEC5yZXN0LlFyeUJScHJveHkaDS5yZXN0LkJScHJveHkiADABEioK",
            "CEJSdXBkYXRlEg0ucmVzdC5CUnByb3h5Gg0ucmVzdC5CUnByb3h5IgASOAoN",
            "QlJwYXJlbnRzRmlsbBINLnJlc3QuUEtwcm94eRoULnJlc3QuQlJwYXJlbnRz",
            "UHJveHkiADABYgZwcm90bzM="));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { global::Google.Protobuf.WellKnownTypes.WrappersReflection.Descriptor, },
          new pbr::GeneratedClrTypeInfo(null, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::Rest.PKproxy), global::Rest.PKproxy.Parser, new[]{ "PK" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Rest.QryBRproxy), global::Rest.QryBRproxy.Parser, new[]{ "M", "Mtyp", "Dtyp" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Rest.QryMDproxy), global::Rest.QryMDproxy.Parser, new[]{ "M", "Mtyp" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Rest.QryPproxy), global::Rest.QryPproxy.Parser, new[]{ "P", "Ptyp" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Rest.QryProxy), global::Rest.QryProxy.Parser, new[]{ "Query", "Param" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Rest.NeTreeProxy), global::Rest.NeTreeProxy.Parser, new[]{ "L", "P", "K", "A", "N", "M", "MT", "F", "HasKid", "Ureten" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Rest.NodesInParentsProxy), global::Rest.NodesInParentsProxy.Parser, new[]{ "KNo", "PNo", "KAd", "PAd", "M" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Rest.TblaProxy), global::Rest.TblaProxy.Parser, new[]{ "RowState", "RowErr", "RowPk", "FldStr", "FldInt", "FldDbl", "FldDcm", "FldDate" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Rest.BaseRow), global::Rest.BaseRow.Parser, new[]{ "State", "Err", "Usr" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Rest.ABKproxy), global::Rest.ABKproxy.Parser, new[]{ "RowSte", "RowErr", "RowUsr", "RowKey", "Kd", "Ad", "Info", "IsBrc" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Rest.AVKproxy), global::Rest.AVKproxy.Parser, new[]{ "RowSte", "RowErr", "RowUsr", "RowKey", "Kd", "Ad", "Info" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Rest.AN2Hproxy), global::Rest.AN2Hproxy.Parser, new[]{ "RowSte", "RowErr", "RowUsr", "RowKey", "NNT", "ABK", "AHP" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Rest.AHPproxy), global::Rest.AHPproxy.Parser, new[]{ "RowSte", "RowErr", "RowUsr", "RowKey", "P", "Kd", "Ad", "Info", "HspNo", "Brc", "Alc", "IsW", "HasH" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Rest.AVMproxy), global::Rest.AVMproxy.Parser, new[]{ "RowSte", "RowErr", "RowUsr", "RowKey", "ORG", "Trh", "AVK", "Drm", "Kd", "Ad", "Info", "Brc", "Alc" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Rest.AVDproxy), global::Rest.AVDproxy.Parser, new[]{ "RowSte", "RowErr", "RowUsr", "RowKey", "AVM", "AHP", "Kd", "Ad", "Info", "Tut", "DVT", "Kur", "TutTL" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Rest.ABMproxy), global::Rest.ABMproxy.Parser, new[]{ "RowSte", "RowErr", "RowUsr", "RowKey", "Trh", "ABK", "Drm", "KFT", "BA", "DVT", "Kur", "Tut", "Kd", "Ad", "Info" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Rest.ABDproxy), global::Rest.ABDproxy.Parser, new[]{ "RowSte", "RowErr", "RowUsr", "RowKey", "ABM", "NNT", "AHP", "Fyt", "DVT", "Mik", "Kur", "KDY", "Kd", "Ad", "Info" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Rest.TOMproxy), global::Rest.TOMproxy.Parser, new[]{ "RowSte", "RowErr", "RowUsr", "RowKey", "Trh", "KND", "Drm", "ORG", "DST", "Kd", "Ad", "Info" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Rest.TODproxy), global::Rest.TODproxy.Parser, new[]{ "RowSte", "RowErr", "RowUsr", "RowKey", "TOM", "Kd", "Ad", "Info" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Rest.TWMproxy), global::Rest.TWMproxy.Parser, new[]{ "RowSte", "RowErr", "RowUsr", "RowKey", "Trh", "KND", "Drm", "Kd", "Ad", "Info" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Rest.TWDproxy), global::Rest.TWDproxy.Parser, new[]{ "RowSte", "RowErr", "RowUsr", "RowKey", "TWM", "Kd", "Ad", "Info" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Rest.NNTproxy), global::Rest.NNTproxy.Parser, new[]{ "RowSte", "RowErr", "RowUsr", "RowKey", "Kd", "Ad", "Info", "BRM", "Fyt" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Rest.NNRproxy), global::Rest.NNRproxy.Parser, new[]{ "RowSte", "RowErr", "RowUsr", "RowKey", "NP", "NC", "Mik" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Rest.NeParentsProxy), global::Rest.NeParentsProxy.Parser, new[]{ "Ne", "Parents" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Rest.BRproxy), global::Rest.BRproxy.Parser, new[]{ "RowSte", "RowErr", "RowUsr", "RowKey", "P", "C", "Others" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Rest.BRparentsProxy), global::Rest.BRparentsProxy.Parser, new[]{ "Node", "Parents" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Rest.KFTproxy), global::Rest.KFTproxy.Parser, new[]{ "RowSte", "RowErr", "RowUsr", "RowKey", "Kd", "Ad", "Info", "Tel", "Adres", "Sorumlu", "VrgDN", "AHPbrc", "AHPalc" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Rest.KCTproxy), global::Rest.KCTproxy.Parser, new[]{ "RowSte", "RowErr", "RowUsr", "RowKey", "M", "Kd", "Ad", "Info" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Rest.KDTproxy), global::Rest.KDTproxy.Parser, new[]{ "RowSte", "RowErr", "RowUsr", "RowKey", "Kd", "Ad", "Info" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Rest.KDTtreeProxy), global::Rest.KDTtreeProxy.Parser, new[]{ "L", "P", "K", "A", "N" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Rest.KPTproxy), global::Rest.KPTproxy.Parser, new[]{ "RowSte", "RowErr", "RowUsr", "RowKey", "Kd", "Ad", "Info" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Rest.KHTproxy), global::Rest.KHTproxy.Parser, new[]{ "RowSte", "RowErr", "RowUsr", "RowKey", "M", "Kd", "Ad", "Info" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Rest.XGTproxy), global::Rest.XGTproxy.Parser, new[]{ "RowSte", "RowErr", "RowUsr", "RowKey", "P", "Kd", "Ad" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Rest.XDKproxy), global::Rest.XDKproxy.Parser, new[]{ "RowSte", "RowErr", "RowUsr", "RowKey", "Trh", "DVT", "Kur", "Dvz" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Rest.UUUproxy), global::Rest.UUUproxy.Parser, new[]{ "RowSte", "RowErr", "RowUsr", "RowKey", "UYT", "Ad", "Pwd" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Rest.UYTproxy), global::Rest.UYTproxy.Parser, new[]{ "RowSte", "RowErr", "RowUsr", "RowKey", "Ad" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Rest.UYHproxy), global::Rest.UYHproxy.Parser, new[]{ "RowSte", "RowErr", "RowUsr", "RowKey", "P", "K" }, null, null, null)
          }));
    }
    #endregion

  }
  #region Messages
  public sealed partial class PKproxy : pb::IMessage<PKproxy> {
    private static readonly pb::MessageParser<PKproxy> _parser = new pb::MessageParser<PKproxy>(() => new PKproxy());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<PKproxy> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Rest.RestReflection.Descriptor.MessageTypes[0]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PKproxy() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PKproxy(PKproxy other) : this() {
      pK_ = other.pK_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PKproxy Clone() {
      return new PKproxy(this);
    }

    /// <summary>Field number for the "PK" field.</summary>
    public const int PKFieldNumber = 1;
    private ulong pK_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong PK {
      get { return pK_; }
      set {
        pK_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as PKproxy);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(PKproxy other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (PK != other.PK) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (PK != 0UL) hash ^= PK.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (PK != 0UL) {
        output.WriteRawTag(8);
        output.WriteUInt64(PK);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (PK != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(PK);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(PKproxy other) {
      if (other == null) {
        return;
      }
      if (other.PK != 0UL) {
        PK = other.PK;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            PK = input.ReadUInt64();
            break;
          }
        }
      }
    }

  }

  public sealed partial class QryBRproxy : pb::IMessage<QryBRproxy> {
    private static readonly pb::MessageParser<QryBRproxy> _parser = new pb::MessageParser<QryBRproxy>(() => new QryBRproxy());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<QryBRproxy> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Rest.RestReflection.Descriptor.MessageTypes[1]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public QryBRproxy() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public QryBRproxy(QryBRproxy other) : this() {
      m_ = other.m_;
      mtyp_ = other.mtyp_;
      dtyp_ = other.dtyp_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public QryBRproxy Clone() {
      return new QryBRproxy(this);
    }

    /// <summary>Field number for the "M" field.</summary>
    public const int MFieldNumber = 1;
    private ulong m_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong M {
      get { return m_; }
      set {
        m_ = value;
      }
    }

    /// <summary>Field number for the "Mtyp" field.</summary>
    public const int MtypFieldNumber = 2;
    private string mtyp_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Mtyp {
      get { return mtyp_; }
      set {
        mtyp_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "Dtyp" field.</summary>
    public const int DtypFieldNumber = 3;
    private string dtyp_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Dtyp {
      get { return dtyp_; }
      set {
        dtyp_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as QryBRproxy);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(QryBRproxy other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (M != other.M) return false;
      if (Mtyp != other.Mtyp) return false;
      if (Dtyp != other.Dtyp) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (M != 0UL) hash ^= M.GetHashCode();
      if (Mtyp.Length != 0) hash ^= Mtyp.GetHashCode();
      if (Dtyp.Length != 0) hash ^= Dtyp.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (M != 0UL) {
        output.WriteRawTag(8);
        output.WriteUInt64(M);
      }
      if (Mtyp.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(Mtyp);
      }
      if (Dtyp.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(Dtyp);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (M != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(M);
      }
      if (Mtyp.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Mtyp);
      }
      if (Dtyp.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Dtyp);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(QryBRproxy other) {
      if (other == null) {
        return;
      }
      if (other.M != 0UL) {
        M = other.M;
      }
      if (other.Mtyp.Length != 0) {
        Mtyp = other.Mtyp;
      }
      if (other.Dtyp.Length != 0) {
        Dtyp = other.Dtyp;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            M = input.ReadUInt64();
            break;
          }
          case 18: {
            Mtyp = input.ReadString();
            break;
          }
          case 26: {
            Dtyp = input.ReadString();
            break;
          }
        }
      }
    }

  }

  public sealed partial class QryMDproxy : pb::IMessage<QryMDproxy> {
    private static readonly pb::MessageParser<QryMDproxy> _parser = new pb::MessageParser<QryMDproxy>(() => new QryMDproxy());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<QryMDproxy> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Rest.RestReflection.Descriptor.MessageTypes[2]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public QryMDproxy() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public QryMDproxy(QryMDproxy other) : this() {
      m_ = other.m_;
      mtyp_ = other.mtyp_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public QryMDproxy Clone() {
      return new QryMDproxy(this);
    }

    /// <summary>Field number for the "M" field.</summary>
    public const int MFieldNumber = 1;
    private ulong m_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong M {
      get { return m_; }
      set {
        m_ = value;
      }
    }

    /// <summary>Field number for the "Mtyp" field.</summary>
    public const int MtypFieldNumber = 2;
    private string mtyp_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Mtyp {
      get { return mtyp_; }
      set {
        mtyp_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as QryMDproxy);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(QryMDproxy other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (M != other.M) return false;
      if (Mtyp != other.Mtyp) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (M != 0UL) hash ^= M.GetHashCode();
      if (Mtyp.Length != 0) hash ^= Mtyp.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (M != 0UL) {
        output.WriteRawTag(8);
        output.WriteUInt64(M);
      }
      if (Mtyp.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(Mtyp);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (M != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(M);
      }
      if (Mtyp.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Mtyp);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(QryMDproxy other) {
      if (other == null) {
        return;
      }
      if (other.M != 0UL) {
        M = other.M;
      }
      if (other.Mtyp.Length != 0) {
        Mtyp = other.Mtyp;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            M = input.ReadUInt64();
            break;
          }
          case 18: {
            Mtyp = input.ReadString();
            break;
          }
        }
      }
    }

  }

  public sealed partial class QryPproxy : pb::IMessage<QryPproxy> {
    private static readonly pb::MessageParser<QryPproxy> _parser = new pb::MessageParser<QryPproxy>(() => new QryPproxy());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<QryPproxy> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Rest.RestReflection.Descriptor.MessageTypes[3]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public QryPproxy() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public QryPproxy(QryPproxy other) : this() {
      p_ = other.p_;
      ptyp_ = other.ptyp_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public QryPproxy Clone() {
      return new QryPproxy(this);
    }

    /// <summary>Field number for the "P" field.</summary>
    public const int PFieldNumber = 1;
    private ulong p_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong P {
      get { return p_; }
      set {
        p_ = value;
      }
    }

    /// <summary>Field number for the "Ptyp" field.</summary>
    public const int PtypFieldNumber = 2;
    private string ptyp_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Ptyp {
      get { return ptyp_; }
      set {
        ptyp_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as QryPproxy);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(QryPproxy other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (P != other.P) return false;
      if (Ptyp != other.Ptyp) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (P != 0UL) hash ^= P.GetHashCode();
      if (Ptyp.Length != 0) hash ^= Ptyp.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (P != 0UL) {
        output.WriteRawTag(8);
        output.WriteUInt64(P);
      }
      if (Ptyp.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(Ptyp);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (P != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(P);
      }
      if (Ptyp.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Ptyp);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(QryPproxy other) {
      if (other == null) {
        return;
      }
      if (other.P != 0UL) {
        P = other.P;
      }
      if (other.Ptyp.Length != 0) {
        Ptyp = other.Ptyp;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            P = input.ReadUInt64();
            break;
          }
          case 18: {
            Ptyp = input.ReadString();
            break;
          }
        }
      }
    }

  }

  public sealed partial class QryProxy : pb::IMessage<QryProxy> {
    private static readonly pb::MessageParser<QryProxy> _parser = new pb::MessageParser<QryProxy>(() => new QryProxy());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<QryProxy> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Rest.RestReflection.Descriptor.MessageTypes[4]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public QryProxy() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public QryProxy(QryProxy other) : this() {
      query_ = other.query_;
      param_ = other.param_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public QryProxy Clone() {
      return new QryProxy(this);
    }

    /// <summary>Field number for the "query" field.</summary>
    public const int QueryFieldNumber = 1;
    private string query_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Query {
      get { return query_; }
      set {
        query_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "param" field.</summary>
    public const int ParamFieldNumber = 2;
    private string param_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Param {
      get { return param_; }
      set {
        param_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as QryProxy);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(QryProxy other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Query != other.Query) return false;
      if (Param != other.Param) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Query.Length != 0) hash ^= Query.GetHashCode();
      if (Param.Length != 0) hash ^= Param.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Query.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Query);
      }
      if (Param.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(Param);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Query.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Query);
      }
      if (Param.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Param);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(QryProxy other) {
      if (other == null) {
        return;
      }
      if (other.Query.Length != 0) {
        Query = other.Query;
      }
      if (other.Param.Length != 0) {
        Param = other.Param;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            Query = input.ReadString();
            break;
          }
          case 18: {
            Param = input.ReadString();
            break;
          }
        }
      }
    }

  }

  public sealed partial class NeTreeProxy : pb::IMessage<NeTreeProxy> {
    private static readonly pb::MessageParser<NeTreeProxy> _parser = new pb::MessageParser<NeTreeProxy>(() => new NeTreeProxy());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<NeTreeProxy> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Rest.RestReflection.Descriptor.MessageTypes[5]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public NeTreeProxy() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public NeTreeProxy(NeTreeProxy other) : this() {
      l_ = other.l_;
      p_ = other.p_;
      k_ = other.k_;
      a_ = other.a_;
      n_ = other.n_;
      m_ = other.m_;
      mT_ = other.mT_;
      f_ = other.f_;
      hasKid_ = other.hasKid_;
      ureten_ = other.ureten_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public NeTreeProxy Clone() {
      return new NeTreeProxy(this);
    }

    /// <summary>Field number for the "L" field.</summary>
    public const int LFieldNumber = 1;
    private int l_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int L {
      get { return l_; }
      set {
        l_ = value;
      }
    }

    /// <summary>Field number for the "P" field.</summary>
    public const int PFieldNumber = 2;
    private ulong p_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong P {
      get { return p_; }
      set {
        p_ = value;
      }
    }

    /// <summary>Field number for the "K" field.</summary>
    public const int KFieldNumber = 3;
    private ulong k_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong K {
      get { return k_; }
      set {
        k_ = value;
      }
    }

    /// <summary>Field number for the "A" field.</summary>
    public const int AFieldNumber = 4;
    private string a_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string A {
      get { return a_; }
      set {
        a_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "N" field.</summary>
    public const int NFieldNumber = 5;
    private ulong n_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong N {
      get { return n_; }
      set {
        n_ = value;
      }
    }

    /// <summary>Field number for the "M" field.</summary>
    public const int MFieldNumber = 6;
    private double m_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double M {
      get { return m_; }
      set {
        m_ = value;
      }
    }

    /// <summary>Field number for the "MT" field.</summary>
    public const int MTFieldNumber = 7;
    private double mT_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double MT {
      get { return mT_; }
      set {
        mT_ = value;
      }
    }

    /// <summary>Field number for the "F" field.</summary>
    public const int FFieldNumber = 8;
    private double f_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double F {
      get { return f_; }
      set {
        f_ = value;
      }
    }

    /// <summary>Field number for the "HasKid" field.</summary>
    public const int HasKidFieldNumber = 9;
    private bool hasKid_;
    /// <summary>
    /// HasKid
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasKid {
      get { return hasKid_; }
      set {
        hasKid_ = value;
      }
    }

    /// <summary>Field number for the "Ureten" field.</summary>
    public const int UretenFieldNumber = 10;
    private string ureten_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Ureten {
      get { return ureten_; }
      set {
        ureten_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as NeTreeProxy);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(NeTreeProxy other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (L != other.L) return false;
      if (P != other.P) return false;
      if (K != other.K) return false;
      if (A != other.A) return false;
      if (N != other.N) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(M, other.M)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(MT, other.MT)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(F, other.F)) return false;
      if (HasKid != other.HasKid) return false;
      if (Ureten != other.Ureten) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (L != 0) hash ^= L.GetHashCode();
      if (P != 0UL) hash ^= P.GetHashCode();
      if (K != 0UL) hash ^= K.GetHashCode();
      if (A.Length != 0) hash ^= A.GetHashCode();
      if (N != 0UL) hash ^= N.GetHashCode();
      if (M != 0D) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(M);
      if (MT != 0D) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(MT);
      if (F != 0D) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(F);
      if (HasKid != false) hash ^= HasKid.GetHashCode();
      if (Ureten.Length != 0) hash ^= Ureten.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (L != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(L);
      }
      if (P != 0UL) {
        output.WriteRawTag(16);
        output.WriteUInt64(P);
      }
      if (K != 0UL) {
        output.WriteRawTag(24);
        output.WriteUInt64(K);
      }
      if (A.Length != 0) {
        output.WriteRawTag(34);
        output.WriteString(A);
      }
      if (N != 0UL) {
        output.WriteRawTag(40);
        output.WriteUInt64(N);
      }
      if (M != 0D) {
        output.WriteRawTag(49);
        output.WriteDouble(M);
      }
      if (MT != 0D) {
        output.WriteRawTag(57);
        output.WriteDouble(MT);
      }
      if (F != 0D) {
        output.WriteRawTag(65);
        output.WriteDouble(F);
      }
      if (HasKid != false) {
        output.WriteRawTag(72);
        output.WriteBool(HasKid);
      }
      if (Ureten.Length != 0) {
        output.WriteRawTag(82);
        output.WriteString(Ureten);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (L != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(L);
      }
      if (P != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(P);
      }
      if (K != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(K);
      }
      if (A.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(A);
      }
      if (N != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(N);
      }
      if (M != 0D) {
        size += 1 + 8;
      }
      if (MT != 0D) {
        size += 1 + 8;
      }
      if (F != 0D) {
        size += 1 + 8;
      }
      if (HasKid != false) {
        size += 1 + 1;
      }
      if (Ureten.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Ureten);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(NeTreeProxy other) {
      if (other == null) {
        return;
      }
      if (other.L != 0) {
        L = other.L;
      }
      if (other.P != 0UL) {
        P = other.P;
      }
      if (other.K != 0UL) {
        K = other.K;
      }
      if (other.A.Length != 0) {
        A = other.A;
      }
      if (other.N != 0UL) {
        N = other.N;
      }
      if (other.M != 0D) {
        M = other.M;
      }
      if (other.MT != 0D) {
        MT = other.MT;
      }
      if (other.F != 0D) {
        F = other.F;
      }
      if (other.HasKid != false) {
        HasKid = other.HasKid;
      }
      if (other.Ureten.Length != 0) {
        Ureten = other.Ureten;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            L = input.ReadInt32();
            break;
          }
          case 16: {
            P = input.ReadUInt64();
            break;
          }
          case 24: {
            K = input.ReadUInt64();
            break;
          }
          case 34: {
            A = input.ReadString();
            break;
          }
          case 40: {
            N = input.ReadUInt64();
            break;
          }
          case 49: {
            M = input.ReadDouble();
            break;
          }
          case 57: {
            MT = input.ReadDouble();
            break;
          }
          case 65: {
            F = input.ReadDouble();
            break;
          }
          case 72: {
            HasKid = input.ReadBool();
            break;
          }
          case 82: {
            Ureten = input.ReadString();
            break;
          }
        }
      }
    }

  }

  public sealed partial class NodesInParentsProxy : pb::IMessage<NodesInParentsProxy> {
    private static readonly pb::MessageParser<NodesInParentsProxy> _parser = new pb::MessageParser<NodesInParentsProxy>(() => new NodesInParentsProxy());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<NodesInParentsProxy> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Rest.RestReflection.Descriptor.MessageTypes[6]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public NodesInParentsProxy() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public NodesInParentsProxy(NodesInParentsProxy other) : this() {
      kNo_ = other.kNo_;
      pNo_ = other.pNo_;
      kAd_ = other.kAd_;
      pAd_ = other.pAd_;
      m_ = other.m_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public NodesInParentsProxy Clone() {
      return new NodesInParentsProxy(this);
    }

    /// <summary>Field number for the "KNo" field.</summary>
    public const int KNoFieldNumber = 1;
    private ulong kNo_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong KNo {
      get { return kNo_; }
      set {
        kNo_ = value;
      }
    }

    /// <summary>Field number for the "PNo" field.</summary>
    public const int PNoFieldNumber = 2;
    private ulong pNo_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong PNo {
      get { return pNo_; }
      set {
        pNo_ = value;
      }
    }

    /// <summary>Field number for the "KAd" field.</summary>
    public const int KAdFieldNumber = 3;
    private string kAd_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string KAd {
      get { return kAd_; }
      set {
        kAd_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "PAd" field.</summary>
    public const int PAdFieldNumber = 4;
    private string pAd_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string PAd {
      get { return pAd_; }
      set {
        pAd_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "M" field.</summary>
    public const int MFieldNumber = 5;
    private double m_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double M {
      get { return m_; }
      set {
        m_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as NodesInParentsProxy);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(NodesInParentsProxy other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (KNo != other.KNo) return false;
      if (PNo != other.PNo) return false;
      if (KAd != other.KAd) return false;
      if (PAd != other.PAd) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(M, other.M)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (KNo != 0UL) hash ^= KNo.GetHashCode();
      if (PNo != 0UL) hash ^= PNo.GetHashCode();
      if (KAd.Length != 0) hash ^= KAd.GetHashCode();
      if (PAd.Length != 0) hash ^= PAd.GetHashCode();
      if (M != 0D) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(M);
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (KNo != 0UL) {
        output.WriteRawTag(8);
        output.WriteUInt64(KNo);
      }
      if (PNo != 0UL) {
        output.WriteRawTag(16);
        output.WriteUInt64(PNo);
      }
      if (KAd.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(KAd);
      }
      if (PAd.Length != 0) {
        output.WriteRawTag(34);
        output.WriteString(PAd);
      }
      if (M != 0D) {
        output.WriteRawTag(41);
        output.WriteDouble(M);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (KNo != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(KNo);
      }
      if (PNo != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(PNo);
      }
      if (KAd.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(KAd);
      }
      if (PAd.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(PAd);
      }
      if (M != 0D) {
        size += 1 + 8;
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(NodesInParentsProxy other) {
      if (other == null) {
        return;
      }
      if (other.KNo != 0UL) {
        KNo = other.KNo;
      }
      if (other.PNo != 0UL) {
        PNo = other.PNo;
      }
      if (other.KAd.Length != 0) {
        KAd = other.KAd;
      }
      if (other.PAd.Length != 0) {
        PAd = other.PAd;
      }
      if (other.M != 0D) {
        M = other.M;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            KNo = input.ReadUInt64();
            break;
          }
          case 16: {
            PNo = input.ReadUInt64();
            break;
          }
          case 26: {
            KAd = input.ReadString();
            break;
          }
          case 34: {
            PAd = input.ReadString();
            break;
          }
          case 41: {
            M = input.ReadDouble();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// Deneme
  /// </summary>
  public sealed partial class TblaProxy : pb::IMessage<TblaProxy> {
    private static readonly pb::MessageParser<TblaProxy> _parser = new pb::MessageParser<TblaProxy>(() => new TblaProxy());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<TblaProxy> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Rest.RestReflection.Descriptor.MessageTypes[7]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TblaProxy() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TblaProxy(TblaProxy other) : this() {
      rowState_ = other.rowState_;
      rowErr_ = other.rowErr_;
      rowPk_ = other.rowPk_;
      fldStr_ = other.fldStr_;
      fldInt_ = other.fldInt_;
      fldDbl_ = other.fldDbl_;
      fldDcm_ = other.fldDcm_;
      fldDate_ = other.fldDate_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TblaProxy Clone() {
      return new TblaProxy(this);
    }

    /// <summary>Field number for the "row_state" field.</summary>
    public const int RowStateFieldNumber = 1;
    private string rowState_ = "";
    /// <summary>
    /// Inserted/Modified/Deleted/Unchanged
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string RowState {
      get { return rowState_; }
      set {
        rowState_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "row_err" field.</summary>
    public const int RowErrFieldNumber = 2;
    private string rowErr_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string RowErr {
      get { return rowErr_; }
      set {
        rowErr_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "row_pk" field.</summary>
    public const int RowPkFieldNumber = 3;
    private ulong rowPk_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong RowPk {
      get { return rowPk_; }
      set {
        rowPk_ = value;
      }
    }

    /// <summary>Field number for the "fldStr" field.</summary>
    public const int FldStrFieldNumber = 4;
    private string fldStr_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string FldStr {
      get { return fldStr_; }
      set {
        fldStr_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "fldInt" field.</summary>
    public const int FldIntFieldNumber = 5;
    private int fldInt_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int FldInt {
      get { return fldInt_; }
      set {
        fldInt_ = value;
      }
    }

    /// <summary>Field number for the "fldDbl" field.</summary>
    public const int FldDblFieldNumber = 6;
    private double fldDbl_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double FldDbl {
      get { return fldDbl_; }
      set {
        fldDbl_ = value;
      }
    }

    /// <summary>Field number for the "fldDcm" field.</summary>
    public const int FldDcmFieldNumber = 7;
    private double fldDcm_;
    /// <summary>
    /// String olabilir
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double FldDcm {
      get { return fldDcm_; }
      set {
        fldDcm_ = value;
      }
    }

    /// <summary>Field number for the "fldDate" field.</summary>
    public const int FldDateFieldNumber = 8;
    private long fldDate_;
    /// <summary>
    /// DateTime.Ticks olarak UInt64 de tut. new DateTime(fldDate) => DateTime 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long FldDate {
      get { return fldDate_; }
      set {
        fldDate_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as TblaProxy);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(TblaProxy other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (RowState != other.RowState) return false;
      if (RowErr != other.RowErr) return false;
      if (RowPk != other.RowPk) return false;
      if (FldStr != other.FldStr) return false;
      if (FldInt != other.FldInt) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(FldDbl, other.FldDbl)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(FldDcm, other.FldDcm)) return false;
      if (FldDate != other.FldDate) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (RowState.Length != 0) hash ^= RowState.GetHashCode();
      if (RowErr.Length != 0) hash ^= RowErr.GetHashCode();
      if (RowPk != 0UL) hash ^= RowPk.GetHashCode();
      if (FldStr.Length != 0) hash ^= FldStr.GetHashCode();
      if (FldInt != 0) hash ^= FldInt.GetHashCode();
      if (FldDbl != 0D) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(FldDbl);
      if (FldDcm != 0D) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(FldDcm);
      if (FldDate != 0L) hash ^= FldDate.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (RowState.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(RowState);
      }
      if (RowErr.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(RowErr);
      }
      if (RowPk != 0UL) {
        output.WriteRawTag(24);
        output.WriteUInt64(RowPk);
      }
      if (FldStr.Length != 0) {
        output.WriteRawTag(34);
        output.WriteString(FldStr);
      }
      if (FldInt != 0) {
        output.WriteRawTag(40);
        output.WriteInt32(FldInt);
      }
      if (FldDbl != 0D) {
        output.WriteRawTag(49);
        output.WriteDouble(FldDbl);
      }
      if (FldDcm != 0D) {
        output.WriteRawTag(57);
        output.WriteDouble(FldDcm);
      }
      if (FldDate != 0L) {
        output.WriteRawTag(64);
        output.WriteInt64(FldDate);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (RowState.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(RowState);
      }
      if (RowErr.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(RowErr);
      }
      if (RowPk != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(RowPk);
      }
      if (FldStr.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(FldStr);
      }
      if (FldInt != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(FldInt);
      }
      if (FldDbl != 0D) {
        size += 1 + 8;
      }
      if (FldDcm != 0D) {
        size += 1 + 8;
      }
      if (FldDate != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(FldDate);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(TblaProxy other) {
      if (other == null) {
        return;
      }
      if (other.RowState.Length != 0) {
        RowState = other.RowState;
      }
      if (other.RowErr.Length != 0) {
        RowErr = other.RowErr;
      }
      if (other.RowPk != 0UL) {
        RowPk = other.RowPk;
      }
      if (other.FldStr.Length != 0) {
        FldStr = other.FldStr;
      }
      if (other.FldInt != 0) {
        FldInt = other.FldInt;
      }
      if (other.FldDbl != 0D) {
        FldDbl = other.FldDbl;
      }
      if (other.FldDcm != 0D) {
        FldDcm = other.FldDcm;
      }
      if (other.FldDate != 0L) {
        FldDate = other.FldDate;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            RowState = input.ReadString();
            break;
          }
          case 18: {
            RowErr = input.ReadString();
            break;
          }
          case 24: {
            RowPk = input.ReadUInt64();
            break;
          }
          case 34: {
            FldStr = input.ReadString();
            break;
          }
          case 40: {
            FldInt = input.ReadInt32();
            break;
          }
          case 49: {
            FldDbl = input.ReadDouble();
            break;
          }
          case 57: {
            FldDcm = input.ReadDouble();
            break;
          }
          case 64: {
            FldDate = input.ReadInt64();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// Base
  /// </summary>
  public sealed partial class BaseRow : pb::IMessage<BaseRow> {
    private static readonly pb::MessageParser<BaseRow> _parser = new pb::MessageParser<BaseRow>(() => new BaseRow());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<BaseRow> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Rest.RestReflection.Descriptor.MessageTypes[8]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public BaseRow() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public BaseRow(BaseRow other) : this() {
      state_ = other.state_;
      err_ = other.err_;
      usr_ = other.usr_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public BaseRow Clone() {
      return new BaseRow(this);
    }

    /// <summary>Field number for the "State" field.</summary>
    public const int StateFieldNumber = 1;
    private string state_ = "";
    /// <summary>
    /// Inserted/Modified/Deleted/Unchanged
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string State {
      get { return state_; }
      set {
        state_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "Err" field.</summary>
    public const int ErrFieldNumber = 2;
    private string err_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Err {
      get { return err_; }
      set {
        err_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "Usr" field.</summary>
    public const int UsrFieldNumber = 3;
    private ulong usr_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong Usr {
      get { return usr_; }
      set {
        usr_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as BaseRow);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(BaseRow other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (State != other.State) return false;
      if (Err != other.Err) return false;
      if (Usr != other.Usr) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (State.Length != 0) hash ^= State.GetHashCode();
      if (Err.Length != 0) hash ^= Err.GetHashCode();
      if (Usr != 0UL) hash ^= Usr.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (State.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(State);
      }
      if (Err.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(Err);
      }
      if (Usr != 0UL) {
        output.WriteRawTag(24);
        output.WriteUInt64(Usr);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (State.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(State);
      }
      if (Err.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Err);
      }
      if (Usr != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(Usr);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(BaseRow other) {
      if (other == null) {
        return;
      }
      if (other.State.Length != 0) {
        State = other.State;
      }
      if (other.Err.Length != 0) {
        Err = other.Err;
      }
      if (other.Usr != 0UL) {
        Usr = other.Usr;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            State = input.ReadString();
            break;
          }
          case 18: {
            Err = input.ReadString();
            break;
          }
          case 24: {
            Usr = input.ReadUInt64();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// Acc BillKind/FaturaTuru
  /// </summary>
  public sealed partial class ABKproxy : pb::IMessage<ABKproxy> {
    private static readonly pb::MessageParser<ABKproxy> _parser = new pb::MessageParser<ABKproxy>(() => new ABKproxy());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ABKproxy> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Rest.RestReflection.Descriptor.MessageTypes[9]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ABKproxy() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ABKproxy(ABKproxy other) : this() {
      rowSte_ = other.rowSte_;
      rowErr_ = other.rowErr_;
      rowUsr_ = other.rowUsr_;
      rowKey_ = other.rowKey_;
      Kd = other.Kd;
      Ad = other.Ad;
      Info = other.Info;
      isBrc_ = other.isBrc_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ABKproxy Clone() {
      return new ABKproxy(this);
    }

    /// <summary>Field number for the "RowSte" field.</summary>
    public const int RowSteFieldNumber = 1;
    private string rowSte_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string RowSte {
      get { return rowSte_; }
      set {
        rowSte_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "RowErr" field.</summary>
    public const int RowErrFieldNumber = 2;
    private string rowErr_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string RowErr {
      get { return rowErr_; }
      set {
        rowErr_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "RowUsr" field.</summary>
    public const int RowUsrFieldNumber = 3;
    private ulong rowUsr_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong RowUsr {
      get { return rowUsr_; }
      set {
        rowUsr_ = value;
      }
    }

    /// <summary>Field number for the "RowKey" field.</summary>
    public const int RowKeyFieldNumber = 4;
    private ulong rowKey_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong RowKey {
      get { return rowKey_; }
      set {
        rowKey_ = value;
      }
    }

    /// <summary>Field number for the "Kd" field.</summary>
    public const int KdFieldNumber = 5;
    private static readonly pb::FieldCodec<string> _single_kd_codec = pb::FieldCodec.ForClassWrapper<string>(42);
    private string kd_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Kd {
      get { return kd_; }
      set {
        kd_ = value;
      }
    }

    /// <summary>Field number for the "Ad" field.</summary>
    public const int AdFieldNumber = 6;
    private static readonly pb::FieldCodec<string> _single_ad_codec = pb::FieldCodec.ForClassWrapper<string>(50);
    private string ad_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Ad {
      get { return ad_; }
      set {
        ad_ = value;
      }
    }

    /// <summary>Field number for the "Info" field.</summary>
    public const int InfoFieldNumber = 7;
    private static readonly pb::FieldCodec<string> _single_info_codec = pb::FieldCodec.ForClassWrapper<string>(58);
    private string info_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Info {
      get { return info_; }
      set {
        info_ = value;
      }
    }

    /// <summary>Field number for the "IsBrc" field.</summary>
    public const int IsBrcFieldNumber = 8;
    private bool isBrc_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool IsBrc {
      get { return isBrc_; }
      set {
        isBrc_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ABKproxy);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ABKproxy other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (RowSte != other.RowSte) return false;
      if (RowErr != other.RowErr) return false;
      if (RowUsr != other.RowUsr) return false;
      if (RowKey != other.RowKey) return false;
      if (Kd != other.Kd) return false;
      if (Ad != other.Ad) return false;
      if (Info != other.Info) return false;
      if (IsBrc != other.IsBrc) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (RowSte.Length != 0) hash ^= RowSte.GetHashCode();
      if (RowErr.Length != 0) hash ^= RowErr.GetHashCode();
      if (RowUsr != 0UL) hash ^= RowUsr.GetHashCode();
      if (RowKey != 0UL) hash ^= RowKey.GetHashCode();
      if (kd_ != null) hash ^= Kd.GetHashCode();
      if (ad_ != null) hash ^= Ad.GetHashCode();
      if (info_ != null) hash ^= Info.GetHashCode();
      if (IsBrc != false) hash ^= IsBrc.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (RowSte.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(RowSte);
      }
      if (RowErr.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(RowErr);
      }
      if (RowUsr != 0UL) {
        output.WriteRawTag(24);
        output.WriteUInt64(RowUsr);
      }
      if (RowKey != 0UL) {
        output.WriteRawTag(32);
        output.WriteUInt64(RowKey);
      }
      if (kd_ != null) {
        _single_kd_codec.WriteTagAndValue(output, Kd);
      }
      if (ad_ != null) {
        _single_ad_codec.WriteTagAndValue(output, Ad);
      }
      if (info_ != null) {
        _single_info_codec.WriteTagAndValue(output, Info);
      }
      if (IsBrc != false) {
        output.WriteRawTag(64);
        output.WriteBool(IsBrc);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (RowSte.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(RowSte);
      }
      if (RowErr.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(RowErr);
      }
      if (RowUsr != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(RowUsr);
      }
      if (RowKey != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(RowKey);
      }
      if (kd_ != null) {
        size += _single_kd_codec.CalculateSizeWithTag(Kd);
      }
      if (ad_ != null) {
        size += _single_ad_codec.CalculateSizeWithTag(Ad);
      }
      if (info_ != null) {
        size += _single_info_codec.CalculateSizeWithTag(Info);
      }
      if (IsBrc != false) {
        size += 1 + 1;
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ABKproxy other) {
      if (other == null) {
        return;
      }
      if (other.RowSte.Length != 0) {
        RowSte = other.RowSte;
      }
      if (other.RowErr.Length != 0) {
        RowErr = other.RowErr;
      }
      if (other.RowUsr != 0UL) {
        RowUsr = other.RowUsr;
      }
      if (other.RowKey != 0UL) {
        RowKey = other.RowKey;
      }
      if (other.kd_ != null) {
        if (kd_ == null || other.Kd != "") {
          Kd = other.Kd;
        }
      }
      if (other.ad_ != null) {
        if (ad_ == null || other.Ad != "") {
          Ad = other.Ad;
        }
      }
      if (other.info_ != null) {
        if (info_ == null || other.Info != "") {
          Info = other.Info;
        }
      }
      if (other.IsBrc != false) {
        IsBrc = other.IsBrc;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            RowSte = input.ReadString();
            break;
          }
          case 18: {
            RowErr = input.ReadString();
            break;
          }
          case 24: {
            RowUsr = input.ReadUInt64();
            break;
          }
          case 32: {
            RowKey = input.ReadUInt64();
            break;
          }
          case 42: {
            string value = _single_kd_codec.Read(input);
            if (kd_ == null || value != "") {
              Kd = value;
            }
            break;
          }
          case 50: {
            string value = _single_ad_codec.Read(input);
            if (ad_ == null || value != "") {
              Ad = value;
            }
            break;
          }
          case 58: {
            string value = _single_info_codec.Read(input);
            if (info_ == null || value != "") {
              Info = value;
            }
            break;
          }
          case 64: {
            IsBrc = input.ReadBool();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// Acc VoucherKind/FisTuru
  /// </summary>
  public sealed partial class AVKproxy : pb::IMessage<AVKproxy> {
    private static readonly pb::MessageParser<AVKproxy> _parser = new pb::MessageParser<AVKproxy>(() => new AVKproxy());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<AVKproxy> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Rest.RestReflection.Descriptor.MessageTypes[10]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AVKproxy() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AVKproxy(AVKproxy other) : this() {
      rowSte_ = other.rowSte_;
      rowErr_ = other.rowErr_;
      rowUsr_ = other.rowUsr_;
      rowKey_ = other.rowKey_;
      Kd = other.Kd;
      Ad = other.Ad;
      Info = other.Info;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AVKproxy Clone() {
      return new AVKproxy(this);
    }

    /// <summary>Field number for the "RowSte" field.</summary>
    public const int RowSteFieldNumber = 1;
    private string rowSte_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string RowSte {
      get { return rowSte_; }
      set {
        rowSte_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "RowErr" field.</summary>
    public const int RowErrFieldNumber = 2;
    private string rowErr_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string RowErr {
      get { return rowErr_; }
      set {
        rowErr_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "RowUsr" field.</summary>
    public const int RowUsrFieldNumber = 3;
    private ulong rowUsr_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong RowUsr {
      get { return rowUsr_; }
      set {
        rowUsr_ = value;
      }
    }

    /// <summary>Field number for the "RowKey" field.</summary>
    public const int RowKeyFieldNumber = 4;
    private ulong rowKey_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong RowKey {
      get { return rowKey_; }
      set {
        rowKey_ = value;
      }
    }

    /// <summary>Field number for the "Kd" field.</summary>
    public const int KdFieldNumber = 5;
    private static readonly pb::FieldCodec<string> _single_kd_codec = pb::FieldCodec.ForClassWrapper<string>(42);
    private string kd_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Kd {
      get { return kd_; }
      set {
        kd_ = value;
      }
    }

    /// <summary>Field number for the "Ad" field.</summary>
    public const int AdFieldNumber = 6;
    private static readonly pb::FieldCodec<string> _single_ad_codec = pb::FieldCodec.ForClassWrapper<string>(50);
    private string ad_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Ad {
      get { return ad_; }
      set {
        ad_ = value;
      }
    }

    /// <summary>Field number for the "Info" field.</summary>
    public const int InfoFieldNumber = 7;
    private static readonly pb::FieldCodec<string> _single_info_codec = pb::FieldCodec.ForClassWrapper<string>(58);
    private string info_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Info {
      get { return info_; }
      set {
        info_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as AVKproxy);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(AVKproxy other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (RowSte != other.RowSte) return false;
      if (RowErr != other.RowErr) return false;
      if (RowUsr != other.RowUsr) return false;
      if (RowKey != other.RowKey) return false;
      if (Kd != other.Kd) return false;
      if (Ad != other.Ad) return false;
      if (Info != other.Info) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (RowSte.Length != 0) hash ^= RowSte.GetHashCode();
      if (RowErr.Length != 0) hash ^= RowErr.GetHashCode();
      if (RowUsr != 0UL) hash ^= RowUsr.GetHashCode();
      if (RowKey != 0UL) hash ^= RowKey.GetHashCode();
      if (kd_ != null) hash ^= Kd.GetHashCode();
      if (ad_ != null) hash ^= Ad.GetHashCode();
      if (info_ != null) hash ^= Info.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (RowSte.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(RowSte);
      }
      if (RowErr.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(RowErr);
      }
      if (RowUsr != 0UL) {
        output.WriteRawTag(24);
        output.WriteUInt64(RowUsr);
      }
      if (RowKey != 0UL) {
        output.WriteRawTag(32);
        output.WriteUInt64(RowKey);
      }
      if (kd_ != null) {
        _single_kd_codec.WriteTagAndValue(output, Kd);
      }
      if (ad_ != null) {
        _single_ad_codec.WriteTagAndValue(output, Ad);
      }
      if (info_ != null) {
        _single_info_codec.WriteTagAndValue(output, Info);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (RowSte.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(RowSte);
      }
      if (RowErr.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(RowErr);
      }
      if (RowUsr != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(RowUsr);
      }
      if (RowKey != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(RowKey);
      }
      if (kd_ != null) {
        size += _single_kd_codec.CalculateSizeWithTag(Kd);
      }
      if (ad_ != null) {
        size += _single_ad_codec.CalculateSizeWithTag(Ad);
      }
      if (info_ != null) {
        size += _single_info_codec.CalculateSizeWithTag(Info);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(AVKproxy other) {
      if (other == null) {
        return;
      }
      if (other.RowSte.Length != 0) {
        RowSte = other.RowSte;
      }
      if (other.RowErr.Length != 0) {
        RowErr = other.RowErr;
      }
      if (other.RowUsr != 0UL) {
        RowUsr = other.RowUsr;
      }
      if (other.RowKey != 0UL) {
        RowKey = other.RowKey;
      }
      if (other.kd_ != null) {
        if (kd_ == null || other.Kd != "") {
          Kd = other.Kd;
        }
      }
      if (other.ad_ != null) {
        if (ad_ == null || other.Ad != "") {
          Ad = other.Ad;
        }
      }
      if (other.info_ != null) {
        if (info_ == null || other.Info != "") {
          Info = other.Info;
        }
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            RowSte = input.ReadString();
            break;
          }
          case 18: {
            RowErr = input.ReadString();
            break;
          }
          case 24: {
            RowUsr = input.ReadUInt64();
            break;
          }
          case 32: {
            RowKey = input.ReadUInt64();
            break;
          }
          case 42: {
            string value = _single_kd_codec.Read(input);
            if (kd_ == null || value != "") {
              Kd = value;
            }
            break;
          }
          case 50: {
            string value = _single_ad_codec.Read(input);
            if (ad_ == null || value != "") {
              Ad = value;
            }
            break;
          }
          case 58: {
            string value = _single_info_codec.Read(input);
            if (info_ == null || value != "") {
              Info = value;
            }
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// Acc Ne->Hsp NeHesapKarsiliklari
  /// </summary>
  public sealed partial class AN2Hproxy : pb::IMessage<AN2Hproxy> {
    private static readonly pb::MessageParser<AN2Hproxy> _parser = new pb::MessageParser<AN2Hproxy>(() => new AN2Hproxy());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<AN2Hproxy> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Rest.RestReflection.Descriptor.MessageTypes[11]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AN2Hproxy() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AN2Hproxy(AN2Hproxy other) : this() {
      rowSte_ = other.rowSte_;
      rowErr_ = other.rowErr_;
      rowUsr_ = other.rowUsr_;
      rowKey_ = other.rowKey_;
      nNT_ = other.nNT_;
      aBK_ = other.aBK_;
      aHP_ = other.aHP_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AN2Hproxy Clone() {
      return new AN2Hproxy(this);
    }

    /// <summary>Field number for the "RowSte" field.</summary>
    public const int RowSteFieldNumber = 1;
    private string rowSte_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string RowSte {
      get { return rowSte_; }
      set {
        rowSte_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "RowErr" field.</summary>
    public const int RowErrFieldNumber = 2;
    private string rowErr_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string RowErr {
      get { return rowErr_; }
      set {
        rowErr_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "RowUsr" field.</summary>
    public const int RowUsrFieldNumber = 3;
    private ulong rowUsr_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong RowUsr {
      get { return rowUsr_; }
      set {
        rowUsr_ = value;
      }
    }

    /// <summary>Field number for the "RowKey" field.</summary>
    public const int RowKeyFieldNumber = 4;
    private ulong rowKey_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong RowKey {
      get { return rowKey_; }
      set {
        rowKey_ = value;
      }
    }

    /// <summary>Field number for the "NNT" field.</summary>
    public const int NNTFieldNumber = 5;
    private ulong nNT_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong NNT {
      get { return nNT_; }
      set {
        nNT_ = value;
      }
    }

    /// <summary>Field number for the "ABK" field.</summary>
    public const int ABKFieldNumber = 6;
    private ulong aBK_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong ABK {
      get { return aBK_; }
      set {
        aBK_ = value;
      }
    }

    /// <summary>Field number for the "AHP" field.</summary>
    public const int AHPFieldNumber = 7;
    private ulong aHP_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong AHP {
      get { return aHP_; }
      set {
        aHP_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as AN2Hproxy);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(AN2Hproxy other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (RowSte != other.RowSte) return false;
      if (RowErr != other.RowErr) return false;
      if (RowUsr != other.RowUsr) return false;
      if (RowKey != other.RowKey) return false;
      if (NNT != other.NNT) return false;
      if (ABK != other.ABK) return false;
      if (AHP != other.AHP) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (RowSte.Length != 0) hash ^= RowSte.GetHashCode();
      if (RowErr.Length != 0) hash ^= RowErr.GetHashCode();
      if (RowUsr != 0UL) hash ^= RowUsr.GetHashCode();
      if (RowKey != 0UL) hash ^= RowKey.GetHashCode();
      if (NNT != 0UL) hash ^= NNT.GetHashCode();
      if (ABK != 0UL) hash ^= ABK.GetHashCode();
      if (AHP != 0UL) hash ^= AHP.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (RowSte.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(RowSte);
      }
      if (RowErr.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(RowErr);
      }
      if (RowUsr != 0UL) {
        output.WriteRawTag(24);
        output.WriteUInt64(RowUsr);
      }
      if (RowKey != 0UL) {
        output.WriteRawTag(32);
        output.WriteUInt64(RowKey);
      }
      if (NNT != 0UL) {
        output.WriteRawTag(40);
        output.WriteUInt64(NNT);
      }
      if (ABK != 0UL) {
        output.WriteRawTag(48);
        output.WriteUInt64(ABK);
      }
      if (AHP != 0UL) {
        output.WriteRawTag(56);
        output.WriteUInt64(AHP);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (RowSte.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(RowSte);
      }
      if (RowErr.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(RowErr);
      }
      if (RowUsr != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(RowUsr);
      }
      if (RowKey != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(RowKey);
      }
      if (NNT != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(NNT);
      }
      if (ABK != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(ABK);
      }
      if (AHP != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(AHP);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(AN2Hproxy other) {
      if (other == null) {
        return;
      }
      if (other.RowSte.Length != 0) {
        RowSte = other.RowSte;
      }
      if (other.RowErr.Length != 0) {
        RowErr = other.RowErr;
      }
      if (other.RowUsr != 0UL) {
        RowUsr = other.RowUsr;
      }
      if (other.RowKey != 0UL) {
        RowKey = other.RowKey;
      }
      if (other.NNT != 0UL) {
        NNT = other.NNT;
      }
      if (other.ABK != 0UL) {
        ABK = other.ABK;
      }
      if (other.AHP != 0UL) {
        AHP = other.AHP;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            RowSte = input.ReadString();
            break;
          }
          case 18: {
            RowErr = input.ReadString();
            break;
          }
          case 24: {
            RowUsr = input.ReadUInt64();
            break;
          }
          case 32: {
            RowKey = input.ReadUInt64();
            break;
          }
          case 40: {
            NNT = input.ReadUInt64();
            break;
          }
          case 48: {
            ABK = input.ReadUInt64();
            break;
          }
          case 56: {
            AHP = input.ReadUInt64();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// Muhasebe Hesap Plani
  /// </summary>
  public sealed partial class AHPproxy : pb::IMessage<AHPproxy> {
    private static readonly pb::MessageParser<AHPproxy> _parser = new pb::MessageParser<AHPproxy>(() => new AHPproxy());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<AHPproxy> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Rest.RestReflection.Descriptor.MessageTypes[12]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AHPproxy() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AHPproxy(AHPproxy other) : this() {
      rowSte_ = other.rowSte_;
      rowErr_ = other.rowErr_;
      rowUsr_ = other.rowUsr_;
      rowKey_ = other.rowKey_;
      p_ = other.p_;
      Kd = other.Kd;
      Ad = other.Ad;
      Info = other.Info;
      hspNo_ = other.hspNo_;
      brc_ = other.brc_;
      alc_ = other.alc_;
      isW_ = other.isW_;
      hasH_ = other.hasH_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AHPproxy Clone() {
      return new AHPproxy(this);
    }

    /// <summary>Field number for the "RowSte" field.</summary>
    public const int RowSteFieldNumber = 1;
    private string rowSte_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string RowSte {
      get { return rowSte_; }
      set {
        rowSte_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "RowErr" field.</summary>
    public const int RowErrFieldNumber = 2;
    private string rowErr_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string RowErr {
      get { return rowErr_; }
      set {
        rowErr_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "RowUsr" field.</summary>
    public const int RowUsrFieldNumber = 3;
    private ulong rowUsr_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong RowUsr {
      get { return rowUsr_; }
      set {
        rowUsr_ = value;
      }
    }

    /// <summary>Field number for the "RowKey" field.</summary>
    public const int RowKeyFieldNumber = 4;
    private ulong rowKey_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong RowKey {
      get { return rowKey_; }
      set {
        rowKey_ = value;
      }
    }

    /// <summary>Field number for the "P" field.</summary>
    public const int PFieldNumber = 5;
    private ulong p_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong P {
      get { return p_; }
      set {
        p_ = value;
      }
    }

    /// <summary>Field number for the "Kd" field.</summary>
    public const int KdFieldNumber = 6;
    private static readonly pb::FieldCodec<string> _single_kd_codec = pb::FieldCodec.ForClassWrapper<string>(50);
    private string kd_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Kd {
      get { return kd_; }
      set {
        kd_ = value;
      }
    }

    /// <summary>Field number for the "Ad" field.</summary>
    public const int AdFieldNumber = 7;
    private static readonly pb::FieldCodec<string> _single_ad_codec = pb::FieldCodec.ForClassWrapper<string>(58);
    private string ad_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Ad {
      get { return ad_; }
      set {
        ad_ = value;
      }
    }

    /// <summary>Field number for the "Info" field.</summary>
    public const int InfoFieldNumber = 8;
    private static readonly pb::FieldCodec<string> _single_info_codec = pb::FieldCodec.ForClassWrapper<string>(66);
    private string info_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Info {
      get { return info_; }
      set {
        info_ = value;
      }
    }

    /// <summary>Field number for the "HspNo" field.</summary>
    public const int HspNoFieldNumber = 9;
    private string hspNo_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string HspNo {
      get { return hspNo_; }
      set {
        hspNo_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "Brc" field.</summary>
    public const int BrcFieldNumber = 10;
    private double brc_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double Brc {
      get { return brc_; }
      set {
        brc_ = value;
      }
    }

    /// <summary>Field number for the "Alc" field.</summary>
    public const int AlcFieldNumber = 11;
    private double alc_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double Alc {
      get { return alc_; }
      set {
        alc_ = value;
      }
    }

    /// <summary>Field number for the "IsW" field.</summary>
    public const int IsWFieldNumber = 12;
    private bool isW_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool IsW {
      get { return isW_; }
      set {
        isW_ = value;
      }
    }

    /// <summary>Field number for the "HasH" field.</summary>
    public const int HasHFieldNumber = 13;
    private bool hasH_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasH {
      get { return hasH_; }
      set {
        hasH_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as AHPproxy);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(AHPproxy other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (RowSte != other.RowSte) return false;
      if (RowErr != other.RowErr) return false;
      if (RowUsr != other.RowUsr) return false;
      if (RowKey != other.RowKey) return false;
      if (P != other.P) return false;
      if (Kd != other.Kd) return false;
      if (Ad != other.Ad) return false;
      if (Info != other.Info) return false;
      if (HspNo != other.HspNo) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(Brc, other.Brc)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(Alc, other.Alc)) return false;
      if (IsW != other.IsW) return false;
      if (HasH != other.HasH) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (RowSte.Length != 0) hash ^= RowSte.GetHashCode();
      if (RowErr.Length != 0) hash ^= RowErr.GetHashCode();
      if (RowUsr != 0UL) hash ^= RowUsr.GetHashCode();
      if (RowKey != 0UL) hash ^= RowKey.GetHashCode();
      if (P != 0UL) hash ^= P.GetHashCode();
      if (kd_ != null) hash ^= Kd.GetHashCode();
      if (ad_ != null) hash ^= Ad.GetHashCode();
      if (info_ != null) hash ^= Info.GetHashCode();
      if (HspNo.Length != 0) hash ^= HspNo.GetHashCode();
      if (Brc != 0D) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(Brc);
      if (Alc != 0D) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(Alc);
      if (IsW != false) hash ^= IsW.GetHashCode();
      if (HasH != false) hash ^= HasH.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (RowSte.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(RowSte);
      }
      if (RowErr.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(RowErr);
      }
      if (RowUsr != 0UL) {
        output.WriteRawTag(24);
        output.WriteUInt64(RowUsr);
      }
      if (RowKey != 0UL) {
        output.WriteRawTag(32);
        output.WriteUInt64(RowKey);
      }
      if (P != 0UL) {
        output.WriteRawTag(40);
        output.WriteUInt64(P);
      }
      if (kd_ != null) {
        _single_kd_codec.WriteTagAndValue(output, Kd);
      }
      if (ad_ != null) {
        _single_ad_codec.WriteTagAndValue(output, Ad);
      }
      if (info_ != null) {
        _single_info_codec.WriteTagAndValue(output, Info);
      }
      if (HspNo.Length != 0) {
        output.WriteRawTag(74);
        output.WriteString(HspNo);
      }
      if (Brc != 0D) {
        output.WriteRawTag(81);
        output.WriteDouble(Brc);
      }
      if (Alc != 0D) {
        output.WriteRawTag(89);
        output.WriteDouble(Alc);
      }
      if (IsW != false) {
        output.WriteRawTag(96);
        output.WriteBool(IsW);
      }
      if (HasH != false) {
        output.WriteRawTag(104);
        output.WriteBool(HasH);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (RowSte.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(RowSte);
      }
      if (RowErr.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(RowErr);
      }
      if (RowUsr != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(RowUsr);
      }
      if (RowKey != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(RowKey);
      }
      if (P != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(P);
      }
      if (kd_ != null) {
        size += _single_kd_codec.CalculateSizeWithTag(Kd);
      }
      if (ad_ != null) {
        size += _single_ad_codec.CalculateSizeWithTag(Ad);
      }
      if (info_ != null) {
        size += _single_info_codec.CalculateSizeWithTag(Info);
      }
      if (HspNo.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(HspNo);
      }
      if (Brc != 0D) {
        size += 1 + 8;
      }
      if (Alc != 0D) {
        size += 1 + 8;
      }
      if (IsW != false) {
        size += 1 + 1;
      }
      if (HasH != false) {
        size += 1 + 1;
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(AHPproxy other) {
      if (other == null) {
        return;
      }
      if (other.RowSte.Length != 0) {
        RowSte = other.RowSte;
      }
      if (other.RowErr.Length != 0) {
        RowErr = other.RowErr;
      }
      if (other.RowUsr != 0UL) {
        RowUsr = other.RowUsr;
      }
      if (other.RowKey != 0UL) {
        RowKey = other.RowKey;
      }
      if (other.P != 0UL) {
        P = other.P;
      }
      if (other.kd_ != null) {
        if (kd_ == null || other.Kd != "") {
          Kd = other.Kd;
        }
      }
      if (other.ad_ != null) {
        if (ad_ == null || other.Ad != "") {
          Ad = other.Ad;
        }
      }
      if (other.info_ != null) {
        if (info_ == null || other.Info != "") {
          Info = other.Info;
        }
      }
      if (other.HspNo.Length != 0) {
        HspNo = other.HspNo;
      }
      if (other.Brc != 0D) {
        Brc = other.Brc;
      }
      if (other.Alc != 0D) {
        Alc = other.Alc;
      }
      if (other.IsW != false) {
        IsW = other.IsW;
      }
      if (other.HasH != false) {
        HasH = other.HasH;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            RowSte = input.ReadString();
            break;
          }
          case 18: {
            RowErr = input.ReadString();
            break;
          }
          case 24: {
            RowUsr = input.ReadUInt64();
            break;
          }
          case 32: {
            RowKey = input.ReadUInt64();
            break;
          }
          case 40: {
            P = input.ReadUInt64();
            break;
          }
          case 50: {
            string value = _single_kd_codec.Read(input);
            if (kd_ == null || value != "") {
              Kd = value;
            }
            break;
          }
          case 58: {
            string value = _single_ad_codec.Read(input);
            if (ad_ == null || value != "") {
              Ad = value;
            }
            break;
          }
          case 66: {
            string value = _single_info_codec.Read(input);
            if (info_ == null || value != "") {
              Info = value;
            }
            break;
          }
          case 74: {
            HspNo = input.ReadString();
            break;
          }
          case 81: {
            Brc = input.ReadDouble();
            break;
          }
          case 89: {
            Alc = input.ReadDouble();
            break;
          }
          case 96: {
            IsW = input.ReadBool();
            break;
          }
          case 104: {
            HasH = input.ReadBool();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// Muhasebe Voucher/Fisleri
  /// </summary>
  public sealed partial class AVMproxy : pb::IMessage<AVMproxy> {
    private static readonly pb::MessageParser<AVMproxy> _parser = new pb::MessageParser<AVMproxy>(() => new AVMproxy());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<AVMproxy> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Rest.RestReflection.Descriptor.MessageTypes[13]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AVMproxy() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AVMproxy(AVMproxy other) : this() {
      rowSte_ = other.rowSte_;
      rowErr_ = other.rowErr_;
      rowUsr_ = other.rowUsr_;
      rowKey_ = other.rowKey_;
      oRG_ = other.oRG_;
      trh_ = other.trh_;
      aVK_ = other.aVK_;
      drm_ = other.drm_;
      Kd = other.Kd;
      Ad = other.Ad;
      Info = other.Info;
      brc_ = other.brc_;
      alc_ = other.alc_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AVMproxy Clone() {
      return new AVMproxy(this);
    }

    /// <summary>Field number for the "RowSte" field.</summary>
    public const int RowSteFieldNumber = 1;
    private string rowSte_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string RowSte {
      get { return rowSte_; }
      set {
        rowSte_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "RowErr" field.</summary>
    public const int RowErrFieldNumber = 2;
    private string rowErr_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string RowErr {
      get { return rowErr_; }
      set {
        rowErr_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "RowUsr" field.</summary>
    public const int RowUsrFieldNumber = 3;
    private ulong rowUsr_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong RowUsr {
      get { return rowUsr_; }
      set {
        rowUsr_ = value;
      }
    }

    /// <summary>Field number for the "RowKey" field.</summary>
    public const int RowKeyFieldNumber = 4;
    private ulong rowKey_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong RowKey {
      get { return rowKey_; }
      set {
        rowKey_ = value;
      }
    }

    /// <summary>Field number for the "ORG" field.</summary>
    public const int ORGFieldNumber = 5;
    private ulong oRG_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong ORG {
      get { return oRG_; }
      set {
        oRG_ = value;
      }
    }

    /// <summary>Field number for the "Trh" field.</summary>
    public const int TrhFieldNumber = 6;
    private long trh_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long Trh {
      get { return trh_; }
      set {
        trh_ = value;
      }
    }

    /// <summary>Field number for the "AVK" field.</summary>
    public const int AVKFieldNumber = 7;
    private ulong aVK_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong AVK {
      get { return aVK_; }
      set {
        aVK_ = value;
      }
    }

    /// <summary>Field number for the "Drm" field.</summary>
    public const int DrmFieldNumber = 8;
    private string drm_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Drm {
      get { return drm_; }
      set {
        drm_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "Kd" field.</summary>
    public const int KdFieldNumber = 9;
    private static readonly pb::FieldCodec<string> _single_kd_codec = pb::FieldCodec.ForClassWrapper<string>(74);
    private string kd_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Kd {
      get { return kd_; }
      set {
        kd_ = value;
      }
    }

    /// <summary>Field number for the "Ad" field.</summary>
    public const int AdFieldNumber = 10;
    private static readonly pb::FieldCodec<string> _single_ad_codec = pb::FieldCodec.ForClassWrapper<string>(82);
    private string ad_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Ad {
      get { return ad_; }
      set {
        ad_ = value;
      }
    }

    /// <summary>Field number for the "Info" field.</summary>
    public const int InfoFieldNumber = 11;
    private static readonly pb::FieldCodec<string> _single_info_codec = pb::FieldCodec.ForClassWrapper<string>(90);
    private string info_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Info {
      get { return info_; }
      set {
        info_ = value;
      }
    }

    /// <summary>Field number for the "Brc" field.</summary>
    public const int BrcFieldNumber = 12;
    private double brc_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double Brc {
      get { return brc_; }
      set {
        brc_ = value;
      }
    }

    /// <summary>Field number for the "Alc" field.</summary>
    public const int AlcFieldNumber = 13;
    private double alc_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double Alc {
      get { return alc_; }
      set {
        alc_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as AVMproxy);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(AVMproxy other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (RowSte != other.RowSte) return false;
      if (RowErr != other.RowErr) return false;
      if (RowUsr != other.RowUsr) return false;
      if (RowKey != other.RowKey) return false;
      if (ORG != other.ORG) return false;
      if (Trh != other.Trh) return false;
      if (AVK != other.AVK) return false;
      if (Drm != other.Drm) return false;
      if (Kd != other.Kd) return false;
      if (Ad != other.Ad) return false;
      if (Info != other.Info) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(Brc, other.Brc)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(Alc, other.Alc)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (RowSte.Length != 0) hash ^= RowSte.GetHashCode();
      if (RowErr.Length != 0) hash ^= RowErr.GetHashCode();
      if (RowUsr != 0UL) hash ^= RowUsr.GetHashCode();
      if (RowKey != 0UL) hash ^= RowKey.GetHashCode();
      if (ORG != 0UL) hash ^= ORG.GetHashCode();
      if (Trh != 0L) hash ^= Trh.GetHashCode();
      if (AVK != 0UL) hash ^= AVK.GetHashCode();
      if (Drm.Length != 0) hash ^= Drm.GetHashCode();
      if (kd_ != null) hash ^= Kd.GetHashCode();
      if (ad_ != null) hash ^= Ad.GetHashCode();
      if (info_ != null) hash ^= Info.GetHashCode();
      if (Brc != 0D) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(Brc);
      if (Alc != 0D) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(Alc);
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (RowSte.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(RowSte);
      }
      if (RowErr.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(RowErr);
      }
      if (RowUsr != 0UL) {
        output.WriteRawTag(24);
        output.WriteUInt64(RowUsr);
      }
      if (RowKey != 0UL) {
        output.WriteRawTag(32);
        output.WriteUInt64(RowKey);
      }
      if (ORG != 0UL) {
        output.WriteRawTag(40);
        output.WriteUInt64(ORG);
      }
      if (Trh != 0L) {
        output.WriteRawTag(48);
        output.WriteInt64(Trh);
      }
      if (AVK != 0UL) {
        output.WriteRawTag(56);
        output.WriteUInt64(AVK);
      }
      if (Drm.Length != 0) {
        output.WriteRawTag(66);
        output.WriteString(Drm);
      }
      if (kd_ != null) {
        _single_kd_codec.WriteTagAndValue(output, Kd);
      }
      if (ad_ != null) {
        _single_ad_codec.WriteTagAndValue(output, Ad);
      }
      if (info_ != null) {
        _single_info_codec.WriteTagAndValue(output, Info);
      }
      if (Brc != 0D) {
        output.WriteRawTag(97);
        output.WriteDouble(Brc);
      }
      if (Alc != 0D) {
        output.WriteRawTag(105);
        output.WriteDouble(Alc);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (RowSte.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(RowSte);
      }
      if (RowErr.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(RowErr);
      }
      if (RowUsr != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(RowUsr);
      }
      if (RowKey != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(RowKey);
      }
      if (ORG != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(ORG);
      }
      if (Trh != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(Trh);
      }
      if (AVK != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(AVK);
      }
      if (Drm.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Drm);
      }
      if (kd_ != null) {
        size += _single_kd_codec.CalculateSizeWithTag(Kd);
      }
      if (ad_ != null) {
        size += _single_ad_codec.CalculateSizeWithTag(Ad);
      }
      if (info_ != null) {
        size += _single_info_codec.CalculateSizeWithTag(Info);
      }
      if (Brc != 0D) {
        size += 1 + 8;
      }
      if (Alc != 0D) {
        size += 1 + 8;
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(AVMproxy other) {
      if (other == null) {
        return;
      }
      if (other.RowSte.Length != 0) {
        RowSte = other.RowSte;
      }
      if (other.RowErr.Length != 0) {
        RowErr = other.RowErr;
      }
      if (other.RowUsr != 0UL) {
        RowUsr = other.RowUsr;
      }
      if (other.RowKey != 0UL) {
        RowKey = other.RowKey;
      }
      if (other.ORG != 0UL) {
        ORG = other.ORG;
      }
      if (other.Trh != 0L) {
        Trh = other.Trh;
      }
      if (other.AVK != 0UL) {
        AVK = other.AVK;
      }
      if (other.Drm.Length != 0) {
        Drm = other.Drm;
      }
      if (other.kd_ != null) {
        if (kd_ == null || other.Kd != "") {
          Kd = other.Kd;
        }
      }
      if (other.ad_ != null) {
        if (ad_ == null || other.Ad != "") {
          Ad = other.Ad;
        }
      }
      if (other.info_ != null) {
        if (info_ == null || other.Info != "") {
          Info = other.Info;
        }
      }
      if (other.Brc != 0D) {
        Brc = other.Brc;
      }
      if (other.Alc != 0D) {
        Alc = other.Alc;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            RowSte = input.ReadString();
            break;
          }
          case 18: {
            RowErr = input.ReadString();
            break;
          }
          case 24: {
            RowUsr = input.ReadUInt64();
            break;
          }
          case 32: {
            RowKey = input.ReadUInt64();
            break;
          }
          case 40: {
            ORG = input.ReadUInt64();
            break;
          }
          case 48: {
            Trh = input.ReadInt64();
            break;
          }
          case 56: {
            AVK = input.ReadUInt64();
            break;
          }
          case 66: {
            Drm = input.ReadString();
            break;
          }
          case 74: {
            string value = _single_kd_codec.Read(input);
            if (kd_ == null || value != "") {
              Kd = value;
            }
            break;
          }
          case 82: {
            string value = _single_ad_codec.Read(input);
            if (ad_ == null || value != "") {
              Ad = value;
            }
            break;
          }
          case 90: {
            string value = _single_info_codec.Read(input);
            if (info_ == null || value != "") {
              Info = value;
            }
            break;
          }
          case 97: {
            Brc = input.ReadDouble();
            break;
          }
          case 105: {
            Alc = input.ReadDouble();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// Muhasebe Voucher/Fis Detaylari
  /// </summary>
  public sealed partial class AVDproxy : pb::IMessage<AVDproxy> {
    private static readonly pb::MessageParser<AVDproxy> _parser = new pb::MessageParser<AVDproxy>(() => new AVDproxy());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<AVDproxy> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Rest.RestReflection.Descriptor.MessageTypes[14]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AVDproxy() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AVDproxy(AVDproxy other) : this() {
      rowSte_ = other.rowSte_;
      rowErr_ = other.rowErr_;
      rowUsr_ = other.rowUsr_;
      rowKey_ = other.rowKey_;
      aVM_ = other.aVM_;
      aHP_ = other.aHP_;
      Kd = other.Kd;
      Ad = other.Ad;
      Info = other.Info;
      tut_ = other.tut_;
      dVT_ = other.dVT_;
      kur_ = other.kur_;
      tutTL_ = other.tutTL_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AVDproxy Clone() {
      return new AVDproxy(this);
    }

    /// <summary>Field number for the "RowSte" field.</summary>
    public const int RowSteFieldNumber = 1;
    private string rowSte_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string RowSte {
      get { return rowSte_; }
      set {
        rowSte_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "RowErr" field.</summary>
    public const int RowErrFieldNumber = 2;
    private string rowErr_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string RowErr {
      get { return rowErr_; }
      set {
        rowErr_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "RowUsr" field.</summary>
    public const int RowUsrFieldNumber = 3;
    private ulong rowUsr_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong RowUsr {
      get { return rowUsr_; }
      set {
        rowUsr_ = value;
      }
    }

    /// <summary>Field number for the "RowKey" field.</summary>
    public const int RowKeyFieldNumber = 4;
    private ulong rowKey_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong RowKey {
      get { return rowKey_; }
      set {
        rowKey_ = value;
      }
    }

    /// <summary>Field number for the "AVM" field.</summary>
    public const int AVMFieldNumber = 5;
    private ulong aVM_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong AVM {
      get { return aVM_; }
      set {
        aVM_ = value;
      }
    }

    /// <summary>Field number for the "AHP" field.</summary>
    public const int AHPFieldNumber = 6;
    private ulong aHP_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong AHP {
      get { return aHP_; }
      set {
        aHP_ = value;
      }
    }

    /// <summary>Field number for the "Kd" field.</summary>
    public const int KdFieldNumber = 7;
    private static readonly pb::FieldCodec<string> _single_kd_codec = pb::FieldCodec.ForClassWrapper<string>(58);
    private string kd_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Kd {
      get { return kd_; }
      set {
        kd_ = value;
      }
    }

    /// <summary>Field number for the "Ad" field.</summary>
    public const int AdFieldNumber = 8;
    private static readonly pb::FieldCodec<string> _single_ad_codec = pb::FieldCodec.ForClassWrapper<string>(66);
    private string ad_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Ad {
      get { return ad_; }
      set {
        ad_ = value;
      }
    }

    /// <summary>Field number for the "Info" field.</summary>
    public const int InfoFieldNumber = 9;
    private static readonly pb::FieldCodec<string> _single_info_codec = pb::FieldCodec.ForClassWrapper<string>(74);
    private string info_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Info {
      get { return info_; }
      set {
        info_ = value;
      }
    }

    /// <summary>Field number for the "Tut" field.</summary>
    public const int TutFieldNumber = 10;
    private double tut_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double Tut {
      get { return tut_; }
      set {
        tut_ = value;
      }
    }

    /// <summary>Field number for the "DVT" field.</summary>
    public const int DVTFieldNumber = 11;
    private ulong dVT_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong DVT {
      get { return dVT_; }
      set {
        dVT_ = value;
      }
    }

    /// <summary>Field number for the "Kur" field.</summary>
    public const int KurFieldNumber = 12;
    private float kur_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float Kur {
      get { return kur_; }
      set {
        kur_ = value;
      }
    }

    /// <summary>Field number for the "TutTL" field.</summary>
    public const int TutTLFieldNumber = 13;
    private double tutTL_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double TutTL {
      get { return tutTL_; }
      set {
        tutTL_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as AVDproxy);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(AVDproxy other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (RowSte != other.RowSte) return false;
      if (RowErr != other.RowErr) return false;
      if (RowUsr != other.RowUsr) return false;
      if (RowKey != other.RowKey) return false;
      if (AVM != other.AVM) return false;
      if (AHP != other.AHP) return false;
      if (Kd != other.Kd) return false;
      if (Ad != other.Ad) return false;
      if (Info != other.Info) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(Tut, other.Tut)) return false;
      if (DVT != other.DVT) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(Kur, other.Kur)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(TutTL, other.TutTL)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (RowSte.Length != 0) hash ^= RowSte.GetHashCode();
      if (RowErr.Length != 0) hash ^= RowErr.GetHashCode();
      if (RowUsr != 0UL) hash ^= RowUsr.GetHashCode();
      if (RowKey != 0UL) hash ^= RowKey.GetHashCode();
      if (AVM != 0UL) hash ^= AVM.GetHashCode();
      if (AHP != 0UL) hash ^= AHP.GetHashCode();
      if (kd_ != null) hash ^= Kd.GetHashCode();
      if (ad_ != null) hash ^= Ad.GetHashCode();
      if (info_ != null) hash ^= Info.GetHashCode();
      if (Tut != 0D) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(Tut);
      if (DVT != 0UL) hash ^= DVT.GetHashCode();
      if (Kur != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(Kur);
      if (TutTL != 0D) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(TutTL);
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (RowSte.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(RowSte);
      }
      if (RowErr.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(RowErr);
      }
      if (RowUsr != 0UL) {
        output.WriteRawTag(24);
        output.WriteUInt64(RowUsr);
      }
      if (RowKey != 0UL) {
        output.WriteRawTag(32);
        output.WriteUInt64(RowKey);
      }
      if (AVM != 0UL) {
        output.WriteRawTag(40);
        output.WriteUInt64(AVM);
      }
      if (AHP != 0UL) {
        output.WriteRawTag(48);
        output.WriteUInt64(AHP);
      }
      if (kd_ != null) {
        _single_kd_codec.WriteTagAndValue(output, Kd);
      }
      if (ad_ != null) {
        _single_ad_codec.WriteTagAndValue(output, Ad);
      }
      if (info_ != null) {
        _single_info_codec.WriteTagAndValue(output, Info);
      }
      if (Tut != 0D) {
        output.WriteRawTag(81);
        output.WriteDouble(Tut);
      }
      if (DVT != 0UL) {
        output.WriteRawTag(88);
        output.WriteUInt64(DVT);
      }
      if (Kur != 0F) {
        output.WriteRawTag(101);
        output.WriteFloat(Kur);
      }
      if (TutTL != 0D) {
        output.WriteRawTag(105);
        output.WriteDouble(TutTL);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (RowSte.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(RowSte);
      }
      if (RowErr.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(RowErr);
      }
      if (RowUsr != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(RowUsr);
      }
      if (RowKey != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(RowKey);
      }
      if (AVM != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(AVM);
      }
      if (AHP != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(AHP);
      }
      if (kd_ != null) {
        size += _single_kd_codec.CalculateSizeWithTag(Kd);
      }
      if (ad_ != null) {
        size += _single_ad_codec.CalculateSizeWithTag(Ad);
      }
      if (info_ != null) {
        size += _single_info_codec.CalculateSizeWithTag(Info);
      }
      if (Tut != 0D) {
        size += 1 + 8;
      }
      if (DVT != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(DVT);
      }
      if (Kur != 0F) {
        size += 1 + 4;
      }
      if (TutTL != 0D) {
        size += 1 + 8;
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(AVDproxy other) {
      if (other == null) {
        return;
      }
      if (other.RowSte.Length != 0) {
        RowSte = other.RowSte;
      }
      if (other.RowErr.Length != 0) {
        RowErr = other.RowErr;
      }
      if (other.RowUsr != 0UL) {
        RowUsr = other.RowUsr;
      }
      if (other.RowKey != 0UL) {
        RowKey = other.RowKey;
      }
      if (other.AVM != 0UL) {
        AVM = other.AVM;
      }
      if (other.AHP != 0UL) {
        AHP = other.AHP;
      }
      if (other.kd_ != null) {
        if (kd_ == null || other.Kd != "") {
          Kd = other.Kd;
        }
      }
      if (other.ad_ != null) {
        if (ad_ == null || other.Ad != "") {
          Ad = other.Ad;
        }
      }
      if (other.info_ != null) {
        if (info_ == null || other.Info != "") {
          Info = other.Info;
        }
      }
      if (other.Tut != 0D) {
        Tut = other.Tut;
      }
      if (other.DVT != 0UL) {
        DVT = other.DVT;
      }
      if (other.Kur != 0F) {
        Kur = other.Kur;
      }
      if (other.TutTL != 0D) {
        TutTL = other.TutTL;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            RowSte = input.ReadString();
            break;
          }
          case 18: {
            RowErr = input.ReadString();
            break;
          }
          case 24: {
            RowUsr = input.ReadUInt64();
            break;
          }
          case 32: {
            RowKey = input.ReadUInt64();
            break;
          }
          case 40: {
            AVM = input.ReadUInt64();
            break;
          }
          case 48: {
            AHP = input.ReadUInt64();
            break;
          }
          case 58: {
            string value = _single_kd_codec.Read(input);
            if (kd_ == null || value != "") {
              Kd = value;
            }
            break;
          }
          case 66: {
            string value = _single_ad_codec.Read(input);
            if (ad_ == null || value != "") {
              Ad = value;
            }
            break;
          }
          case 74: {
            string value = _single_info_codec.Read(input);
            if (info_ == null || value != "") {
              Info = value;
            }
            break;
          }
          case 81: {
            Tut = input.ReadDouble();
            break;
          }
          case 88: {
            DVT = input.ReadUInt64();
            break;
          }
          case 101: {
            Kur = input.ReadFloat();
            break;
          }
          case 105: {
            TutTL = input.ReadDouble();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// Muhasebe Bill/Fatura Master
  /// </summary>
  public sealed partial class ABMproxy : pb::IMessage<ABMproxy> {
    private static readonly pb::MessageParser<ABMproxy> _parser = new pb::MessageParser<ABMproxy>(() => new ABMproxy());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ABMproxy> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Rest.RestReflection.Descriptor.MessageTypes[15]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ABMproxy() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ABMproxy(ABMproxy other) : this() {
      rowSte_ = other.rowSte_;
      rowErr_ = other.rowErr_;
      rowUsr_ = other.rowUsr_;
      rowKey_ = other.rowKey_;
      trh_ = other.trh_;
      aBK_ = other.aBK_;
      drm_ = other.drm_;
      kFT_ = other.kFT_;
      bA_ = other.bA_;
      dVT_ = other.dVT_;
      kur_ = other.kur_;
      tut_ = other.tut_;
      Kd = other.Kd;
      Ad = other.Ad;
      Info = other.Info;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ABMproxy Clone() {
      return new ABMproxy(this);
    }

    /// <summary>Field number for the "RowSte" field.</summary>
    public const int RowSteFieldNumber = 1;
    private string rowSte_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string RowSte {
      get { return rowSte_; }
      set {
        rowSte_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "RowErr" field.</summary>
    public const int RowErrFieldNumber = 2;
    private string rowErr_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string RowErr {
      get { return rowErr_; }
      set {
        rowErr_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "RowUsr" field.</summary>
    public const int RowUsrFieldNumber = 3;
    private ulong rowUsr_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong RowUsr {
      get { return rowUsr_; }
      set {
        rowUsr_ = value;
      }
    }

    /// <summary>Field number for the "RowKey" field.</summary>
    public const int RowKeyFieldNumber = 4;
    private ulong rowKey_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong RowKey {
      get { return rowKey_; }
      set {
        rowKey_ = value;
      }
    }

    /// <summary>Field number for the "Trh" field.</summary>
    public const int TrhFieldNumber = 5;
    private long trh_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long Trh {
      get { return trh_; }
      set {
        trh_ = value;
      }
    }

    /// <summary>Field number for the "ABK" field.</summary>
    public const int ABKFieldNumber = 6;
    private ulong aBK_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong ABK {
      get { return aBK_; }
      set {
        aBK_ = value;
      }
    }

    /// <summary>Field number for the "Drm" field.</summary>
    public const int DrmFieldNumber = 7;
    private string drm_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Drm {
      get { return drm_; }
      set {
        drm_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "KFT" field.</summary>
    public const int KFTFieldNumber = 8;
    private ulong kFT_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong KFT {
      get { return kFT_; }
      set {
        kFT_ = value;
      }
    }

    /// <summary>Field number for the "BA" field.</summary>
    public const int BAFieldNumber = 9;
    private string bA_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string BA {
      get { return bA_; }
      set {
        bA_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "DVT" field.</summary>
    public const int DVTFieldNumber = 10;
    private ulong dVT_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong DVT {
      get { return dVT_; }
      set {
        dVT_ = value;
      }
    }

    /// <summary>Field number for the "Kur" field.</summary>
    public const int KurFieldNumber = 11;
    private float kur_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float Kur {
      get { return kur_; }
      set {
        kur_ = value;
      }
    }

    /// <summary>Field number for the "Tut" field.</summary>
    public const int TutFieldNumber = 12;
    private double tut_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double Tut {
      get { return tut_; }
      set {
        tut_ = value;
      }
    }

    /// <summary>Field number for the "Kd" field.</summary>
    public const int KdFieldNumber = 13;
    private static readonly pb::FieldCodec<string> _single_kd_codec = pb::FieldCodec.ForClassWrapper<string>(106);
    private string kd_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Kd {
      get { return kd_; }
      set {
        kd_ = value;
      }
    }

    /// <summary>Field number for the "Ad" field.</summary>
    public const int AdFieldNumber = 14;
    private static readonly pb::FieldCodec<string> _single_ad_codec = pb::FieldCodec.ForClassWrapper<string>(114);
    private string ad_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Ad {
      get { return ad_; }
      set {
        ad_ = value;
      }
    }

    /// <summary>Field number for the "Info" field.</summary>
    public const int InfoFieldNumber = 15;
    private static readonly pb::FieldCodec<string> _single_info_codec = pb::FieldCodec.ForClassWrapper<string>(122);
    private string info_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Info {
      get { return info_; }
      set {
        info_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ABMproxy);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ABMproxy other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (RowSte != other.RowSte) return false;
      if (RowErr != other.RowErr) return false;
      if (RowUsr != other.RowUsr) return false;
      if (RowKey != other.RowKey) return false;
      if (Trh != other.Trh) return false;
      if (ABK != other.ABK) return false;
      if (Drm != other.Drm) return false;
      if (KFT != other.KFT) return false;
      if (BA != other.BA) return false;
      if (DVT != other.DVT) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(Kur, other.Kur)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(Tut, other.Tut)) return false;
      if (Kd != other.Kd) return false;
      if (Ad != other.Ad) return false;
      if (Info != other.Info) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (RowSte.Length != 0) hash ^= RowSte.GetHashCode();
      if (RowErr.Length != 0) hash ^= RowErr.GetHashCode();
      if (RowUsr != 0UL) hash ^= RowUsr.GetHashCode();
      if (RowKey != 0UL) hash ^= RowKey.GetHashCode();
      if (Trh != 0L) hash ^= Trh.GetHashCode();
      if (ABK != 0UL) hash ^= ABK.GetHashCode();
      if (Drm.Length != 0) hash ^= Drm.GetHashCode();
      if (KFT != 0UL) hash ^= KFT.GetHashCode();
      if (BA.Length != 0) hash ^= BA.GetHashCode();
      if (DVT != 0UL) hash ^= DVT.GetHashCode();
      if (Kur != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(Kur);
      if (Tut != 0D) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(Tut);
      if (kd_ != null) hash ^= Kd.GetHashCode();
      if (ad_ != null) hash ^= Ad.GetHashCode();
      if (info_ != null) hash ^= Info.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (RowSte.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(RowSte);
      }
      if (RowErr.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(RowErr);
      }
      if (RowUsr != 0UL) {
        output.WriteRawTag(24);
        output.WriteUInt64(RowUsr);
      }
      if (RowKey != 0UL) {
        output.WriteRawTag(32);
        output.WriteUInt64(RowKey);
      }
      if (Trh != 0L) {
        output.WriteRawTag(40);
        output.WriteInt64(Trh);
      }
      if (ABK != 0UL) {
        output.WriteRawTag(48);
        output.WriteUInt64(ABK);
      }
      if (Drm.Length != 0) {
        output.WriteRawTag(58);
        output.WriteString(Drm);
      }
      if (KFT != 0UL) {
        output.WriteRawTag(64);
        output.WriteUInt64(KFT);
      }
      if (BA.Length != 0) {
        output.WriteRawTag(74);
        output.WriteString(BA);
      }
      if (DVT != 0UL) {
        output.WriteRawTag(80);
        output.WriteUInt64(DVT);
      }
      if (Kur != 0F) {
        output.WriteRawTag(93);
        output.WriteFloat(Kur);
      }
      if (Tut != 0D) {
        output.WriteRawTag(97);
        output.WriteDouble(Tut);
      }
      if (kd_ != null) {
        _single_kd_codec.WriteTagAndValue(output, Kd);
      }
      if (ad_ != null) {
        _single_ad_codec.WriteTagAndValue(output, Ad);
      }
      if (info_ != null) {
        _single_info_codec.WriteTagAndValue(output, Info);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (RowSte.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(RowSte);
      }
      if (RowErr.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(RowErr);
      }
      if (RowUsr != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(RowUsr);
      }
      if (RowKey != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(RowKey);
      }
      if (Trh != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(Trh);
      }
      if (ABK != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(ABK);
      }
      if (Drm.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Drm);
      }
      if (KFT != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(KFT);
      }
      if (BA.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(BA);
      }
      if (DVT != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(DVT);
      }
      if (Kur != 0F) {
        size += 1 + 4;
      }
      if (Tut != 0D) {
        size += 1 + 8;
      }
      if (kd_ != null) {
        size += _single_kd_codec.CalculateSizeWithTag(Kd);
      }
      if (ad_ != null) {
        size += _single_ad_codec.CalculateSizeWithTag(Ad);
      }
      if (info_ != null) {
        size += _single_info_codec.CalculateSizeWithTag(Info);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ABMproxy other) {
      if (other == null) {
        return;
      }
      if (other.RowSte.Length != 0) {
        RowSte = other.RowSte;
      }
      if (other.RowErr.Length != 0) {
        RowErr = other.RowErr;
      }
      if (other.RowUsr != 0UL) {
        RowUsr = other.RowUsr;
      }
      if (other.RowKey != 0UL) {
        RowKey = other.RowKey;
      }
      if (other.Trh != 0L) {
        Trh = other.Trh;
      }
      if (other.ABK != 0UL) {
        ABK = other.ABK;
      }
      if (other.Drm.Length != 0) {
        Drm = other.Drm;
      }
      if (other.KFT != 0UL) {
        KFT = other.KFT;
      }
      if (other.BA.Length != 0) {
        BA = other.BA;
      }
      if (other.DVT != 0UL) {
        DVT = other.DVT;
      }
      if (other.Kur != 0F) {
        Kur = other.Kur;
      }
      if (other.Tut != 0D) {
        Tut = other.Tut;
      }
      if (other.kd_ != null) {
        if (kd_ == null || other.Kd != "") {
          Kd = other.Kd;
        }
      }
      if (other.ad_ != null) {
        if (ad_ == null || other.Ad != "") {
          Ad = other.Ad;
        }
      }
      if (other.info_ != null) {
        if (info_ == null || other.Info != "") {
          Info = other.Info;
        }
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            RowSte = input.ReadString();
            break;
          }
          case 18: {
            RowErr = input.ReadString();
            break;
          }
          case 24: {
            RowUsr = input.ReadUInt64();
            break;
          }
          case 32: {
            RowKey = input.ReadUInt64();
            break;
          }
          case 40: {
            Trh = input.ReadInt64();
            break;
          }
          case 48: {
            ABK = input.ReadUInt64();
            break;
          }
          case 58: {
            Drm = input.ReadString();
            break;
          }
          case 64: {
            KFT = input.ReadUInt64();
            break;
          }
          case 74: {
            BA = input.ReadString();
            break;
          }
          case 80: {
            DVT = input.ReadUInt64();
            break;
          }
          case 93: {
            Kur = input.ReadFloat();
            break;
          }
          case 97: {
            Tut = input.ReadDouble();
            break;
          }
          case 106: {
            string value = _single_kd_codec.Read(input);
            if (kd_ == null || value != "") {
              Kd = value;
            }
            break;
          }
          case 114: {
            string value = _single_ad_codec.Read(input);
            if (ad_ == null || value != "") {
              Ad = value;
            }
            break;
          }
          case 122: {
            string value = _single_info_codec.Read(input);
            if (info_ == null || value != "") {
              Info = value;
            }
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// Muhasebe Bill/Fatura Detay
  /// </summary>
  public sealed partial class ABDproxy : pb::IMessage<ABDproxy> {
    private static readonly pb::MessageParser<ABDproxy> _parser = new pb::MessageParser<ABDproxy>(() => new ABDproxy());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ABDproxy> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Rest.RestReflection.Descriptor.MessageTypes[16]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ABDproxy() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ABDproxy(ABDproxy other) : this() {
      rowSte_ = other.rowSte_;
      rowErr_ = other.rowErr_;
      rowUsr_ = other.rowUsr_;
      rowKey_ = other.rowKey_;
      aBM_ = other.aBM_;
      nNT_ = other.nNT_;
      aHP_ = other.aHP_;
      fyt_ = other.fyt_;
      dVT_ = other.dVT_;
      mik_ = other.mik_;
      kur_ = other.kur_;
      kDY_ = other.kDY_;
      Kd = other.Kd;
      Ad = other.Ad;
      Info = other.Info;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ABDproxy Clone() {
      return new ABDproxy(this);
    }

    /// <summary>Field number for the "RowSte" field.</summary>
    public const int RowSteFieldNumber = 1;
    private string rowSte_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string RowSte {
      get { return rowSte_; }
      set {
        rowSte_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "RowErr" field.</summary>
    public const int RowErrFieldNumber = 2;
    private string rowErr_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string RowErr {
      get { return rowErr_; }
      set {
        rowErr_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "RowUsr" field.</summary>
    public const int RowUsrFieldNumber = 3;
    private ulong rowUsr_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong RowUsr {
      get { return rowUsr_; }
      set {
        rowUsr_ = value;
      }
    }

    /// <summary>Field number for the "RowKey" field.</summary>
    public const int RowKeyFieldNumber = 4;
    private ulong rowKey_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong RowKey {
      get { return rowKey_; }
      set {
        rowKey_ = value;
      }
    }

    /// <summary>Field number for the "ABM" field.</summary>
    public const int ABMFieldNumber = 5;
    private ulong aBM_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong ABM {
      get { return aBM_; }
      set {
        aBM_ = value;
      }
    }

    /// <summary>Field number for the "NNT" field.</summary>
    public const int NNTFieldNumber = 6;
    private ulong nNT_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong NNT {
      get { return nNT_; }
      set {
        nNT_ = value;
      }
    }

    /// <summary>Field number for the "AHP" field.</summary>
    public const int AHPFieldNumber = 7;
    private ulong aHP_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong AHP {
      get { return aHP_; }
      set {
        aHP_ = value;
      }
    }

    /// <summary>Field number for the "Fyt" field.</summary>
    public const int FytFieldNumber = 8;
    private double fyt_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double Fyt {
      get { return fyt_; }
      set {
        fyt_ = value;
      }
    }

    /// <summary>Field number for the "DVT" field.</summary>
    public const int DVTFieldNumber = 9;
    private ulong dVT_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong DVT {
      get { return dVT_; }
      set {
        dVT_ = value;
      }
    }

    /// <summary>Field number for the "Mik" field.</summary>
    public const int MikFieldNumber = 10;
    private double mik_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double Mik {
      get { return mik_; }
      set {
        mik_ = value;
      }
    }

    /// <summary>Field number for the "Kur" field.</summary>
    public const int KurFieldNumber = 11;
    private float kur_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float Kur {
      get { return kur_; }
      set {
        kur_ = value;
      }
    }

    /// <summary>Field number for the "KDY" field.</summary>
    public const int KDYFieldNumber = 12;
    private int kDY_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int KDY {
      get { return kDY_; }
      set {
        kDY_ = value;
      }
    }

    /// <summary>Field number for the "Kd" field.</summary>
    public const int KdFieldNumber = 13;
    private static readonly pb::FieldCodec<string> _single_kd_codec = pb::FieldCodec.ForClassWrapper<string>(106);
    private string kd_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Kd {
      get { return kd_; }
      set {
        kd_ = value;
      }
    }

    /// <summary>Field number for the "Ad" field.</summary>
    public const int AdFieldNumber = 14;
    private static readonly pb::FieldCodec<string> _single_ad_codec = pb::FieldCodec.ForClassWrapper<string>(114);
    private string ad_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Ad {
      get { return ad_; }
      set {
        ad_ = value;
      }
    }

    /// <summary>Field number for the "Info" field.</summary>
    public const int InfoFieldNumber = 15;
    private static readonly pb::FieldCodec<string> _single_info_codec = pb::FieldCodec.ForClassWrapper<string>(122);
    private string info_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Info {
      get { return info_; }
      set {
        info_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ABDproxy);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ABDproxy other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (RowSte != other.RowSte) return false;
      if (RowErr != other.RowErr) return false;
      if (RowUsr != other.RowUsr) return false;
      if (RowKey != other.RowKey) return false;
      if (ABM != other.ABM) return false;
      if (NNT != other.NNT) return false;
      if (AHP != other.AHP) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(Fyt, other.Fyt)) return false;
      if (DVT != other.DVT) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(Mik, other.Mik)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(Kur, other.Kur)) return false;
      if (KDY != other.KDY) return false;
      if (Kd != other.Kd) return false;
      if (Ad != other.Ad) return false;
      if (Info != other.Info) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (RowSte.Length != 0) hash ^= RowSte.GetHashCode();
      if (RowErr.Length != 0) hash ^= RowErr.GetHashCode();
      if (RowUsr != 0UL) hash ^= RowUsr.GetHashCode();
      if (RowKey != 0UL) hash ^= RowKey.GetHashCode();
      if (ABM != 0UL) hash ^= ABM.GetHashCode();
      if (NNT != 0UL) hash ^= NNT.GetHashCode();
      if (AHP != 0UL) hash ^= AHP.GetHashCode();
      if (Fyt != 0D) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(Fyt);
      if (DVT != 0UL) hash ^= DVT.GetHashCode();
      if (Mik != 0D) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(Mik);
      if (Kur != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(Kur);
      if (KDY != 0) hash ^= KDY.GetHashCode();
      if (kd_ != null) hash ^= Kd.GetHashCode();
      if (ad_ != null) hash ^= Ad.GetHashCode();
      if (info_ != null) hash ^= Info.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (RowSte.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(RowSte);
      }
      if (RowErr.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(RowErr);
      }
      if (RowUsr != 0UL) {
        output.WriteRawTag(24);
        output.WriteUInt64(RowUsr);
      }
      if (RowKey != 0UL) {
        output.WriteRawTag(32);
        output.WriteUInt64(RowKey);
      }
      if (ABM != 0UL) {
        output.WriteRawTag(40);
        output.WriteUInt64(ABM);
      }
      if (NNT != 0UL) {
        output.WriteRawTag(48);
        output.WriteUInt64(NNT);
      }
      if (AHP != 0UL) {
        output.WriteRawTag(56);
        output.WriteUInt64(AHP);
      }
      if (Fyt != 0D) {
        output.WriteRawTag(65);
        output.WriteDouble(Fyt);
      }
      if (DVT != 0UL) {
        output.WriteRawTag(72);
        output.WriteUInt64(DVT);
      }
      if (Mik != 0D) {
        output.WriteRawTag(81);
        output.WriteDouble(Mik);
      }
      if (Kur != 0F) {
        output.WriteRawTag(93);
        output.WriteFloat(Kur);
      }
      if (KDY != 0) {
        output.WriteRawTag(96);
        output.WriteInt32(KDY);
      }
      if (kd_ != null) {
        _single_kd_codec.WriteTagAndValue(output, Kd);
      }
      if (ad_ != null) {
        _single_ad_codec.WriteTagAndValue(output, Ad);
      }
      if (info_ != null) {
        _single_info_codec.WriteTagAndValue(output, Info);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (RowSte.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(RowSte);
      }
      if (RowErr.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(RowErr);
      }
      if (RowUsr != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(RowUsr);
      }
      if (RowKey != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(RowKey);
      }
      if (ABM != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(ABM);
      }
      if (NNT != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(NNT);
      }
      if (AHP != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(AHP);
      }
      if (Fyt != 0D) {
        size += 1 + 8;
      }
      if (DVT != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(DVT);
      }
      if (Mik != 0D) {
        size += 1 + 8;
      }
      if (Kur != 0F) {
        size += 1 + 4;
      }
      if (KDY != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(KDY);
      }
      if (kd_ != null) {
        size += _single_kd_codec.CalculateSizeWithTag(Kd);
      }
      if (ad_ != null) {
        size += _single_ad_codec.CalculateSizeWithTag(Ad);
      }
      if (info_ != null) {
        size += _single_info_codec.CalculateSizeWithTag(Info);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ABDproxy other) {
      if (other == null) {
        return;
      }
      if (other.RowSte.Length != 0) {
        RowSte = other.RowSte;
      }
      if (other.RowErr.Length != 0) {
        RowErr = other.RowErr;
      }
      if (other.RowUsr != 0UL) {
        RowUsr = other.RowUsr;
      }
      if (other.RowKey != 0UL) {
        RowKey = other.RowKey;
      }
      if (other.ABM != 0UL) {
        ABM = other.ABM;
      }
      if (other.NNT != 0UL) {
        NNT = other.NNT;
      }
      if (other.AHP != 0UL) {
        AHP = other.AHP;
      }
      if (other.Fyt != 0D) {
        Fyt = other.Fyt;
      }
      if (other.DVT != 0UL) {
        DVT = other.DVT;
      }
      if (other.Mik != 0D) {
        Mik = other.Mik;
      }
      if (other.Kur != 0F) {
        Kur = other.Kur;
      }
      if (other.KDY != 0) {
        KDY = other.KDY;
      }
      if (other.kd_ != null) {
        if (kd_ == null || other.Kd != "") {
          Kd = other.Kd;
        }
      }
      if (other.ad_ != null) {
        if (ad_ == null || other.Ad != "") {
          Ad = other.Ad;
        }
      }
      if (other.info_ != null) {
        if (info_ == null || other.Info != "") {
          Info = other.Info;
        }
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            RowSte = input.ReadString();
            break;
          }
          case 18: {
            RowErr = input.ReadString();
            break;
          }
          case 24: {
            RowUsr = input.ReadUInt64();
            break;
          }
          case 32: {
            RowKey = input.ReadUInt64();
            break;
          }
          case 40: {
            ABM = input.ReadUInt64();
            break;
          }
          case 48: {
            NNT = input.ReadUInt64();
            break;
          }
          case 56: {
            AHP = input.ReadUInt64();
            break;
          }
          case 65: {
            Fyt = input.ReadDouble();
            break;
          }
          case 72: {
            DVT = input.ReadUInt64();
            break;
          }
          case 81: {
            Mik = input.ReadDouble();
            break;
          }
          case 93: {
            Kur = input.ReadFloat();
            break;
          }
          case 96: {
            KDY = input.ReadInt32();
            break;
          }
          case 106: {
            string value = _single_kd_codec.Read(input);
            if (kd_ == null || value != "") {
              Kd = value;
            }
            break;
          }
          case 114: {
            string value = _single_ad_codec.Read(input);
            if (ad_ == null || value != "") {
              Ad = value;
            }
            break;
          }
          case 122: {
            string value = _single_info_codec.Read(input);
            if (info_ == null || value != "") {
              Info = value;
            }
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// TransferOrderMaster
  /// </summary>
  public sealed partial class TOMproxy : pb::IMessage<TOMproxy> {
    private static readonly pb::MessageParser<TOMproxy> _parser = new pb::MessageParser<TOMproxy>(() => new TOMproxy());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<TOMproxy> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Rest.RestReflection.Descriptor.MessageTypes[17]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TOMproxy() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TOMproxy(TOMproxy other) : this() {
      rowSte_ = other.rowSte_;
      rowErr_ = other.rowErr_;
      rowUsr_ = other.rowUsr_;
      rowKey_ = other.rowKey_;
      trh_ = other.trh_;
      kND_ = other.kND_;
      drm_ = other.drm_;
      oRG_ = other.oRG_;
      dST_ = other.dST_;
      Kd = other.Kd;
      Ad = other.Ad;
      Info = other.Info;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TOMproxy Clone() {
      return new TOMproxy(this);
    }

    /// <summary>Field number for the "RowSte" field.</summary>
    public const int RowSteFieldNumber = 1;
    private string rowSte_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string RowSte {
      get { return rowSte_; }
      set {
        rowSte_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "RowErr" field.</summary>
    public const int RowErrFieldNumber = 2;
    private string rowErr_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string RowErr {
      get { return rowErr_; }
      set {
        rowErr_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "RowUsr" field.</summary>
    public const int RowUsrFieldNumber = 3;
    private ulong rowUsr_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong RowUsr {
      get { return rowUsr_; }
      set {
        rowUsr_ = value;
      }
    }

    /// <summary>Field number for the "RowKey" field.</summary>
    public const int RowKeyFieldNumber = 4;
    private ulong rowKey_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong RowKey {
      get { return rowKey_; }
      set {
        rowKey_ = value;
      }
    }

    /// <summary>Field number for the "Trh" field.</summary>
    public const int TrhFieldNumber = 5;
    private long trh_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long Trh {
      get { return trh_; }
      set {
        trh_ = value;
      }
    }

    /// <summary>Field number for the "KND" field.</summary>
    public const int KNDFieldNumber = 6;
    private ulong kND_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong KND {
      get { return kND_; }
      set {
        kND_ = value;
      }
    }

    /// <summary>Field number for the "Drm" field.</summary>
    public const int DrmFieldNumber = 7;
    private string drm_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Drm {
      get { return drm_; }
      set {
        drm_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "ORG" field.</summary>
    public const int ORGFieldNumber = 8;
    private ulong oRG_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong ORG {
      get { return oRG_; }
      set {
        oRG_ = value;
      }
    }

    /// <summary>Field number for the "DST" field.</summary>
    public const int DSTFieldNumber = 9;
    private ulong dST_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong DST {
      get { return dST_; }
      set {
        dST_ = value;
      }
    }

    /// <summary>Field number for the "Kd" field.</summary>
    public const int KdFieldNumber = 10;
    private static readonly pb::FieldCodec<string> _single_kd_codec = pb::FieldCodec.ForClassWrapper<string>(82);
    private string kd_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Kd {
      get { return kd_; }
      set {
        kd_ = value;
      }
    }

    /// <summary>Field number for the "Ad" field.</summary>
    public const int AdFieldNumber = 11;
    private static readonly pb::FieldCodec<string> _single_ad_codec = pb::FieldCodec.ForClassWrapper<string>(90);
    private string ad_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Ad {
      get { return ad_; }
      set {
        ad_ = value;
      }
    }

    /// <summary>Field number for the "info" field.</summary>
    public const int InfoFieldNumber = 12;
    private static readonly pb::FieldCodec<string> _single_info_codec = pb::FieldCodec.ForClassWrapper<string>(98);
    private string info_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Info {
      get { return info_; }
      set {
        info_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as TOMproxy);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(TOMproxy other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (RowSte != other.RowSte) return false;
      if (RowErr != other.RowErr) return false;
      if (RowUsr != other.RowUsr) return false;
      if (RowKey != other.RowKey) return false;
      if (Trh != other.Trh) return false;
      if (KND != other.KND) return false;
      if (Drm != other.Drm) return false;
      if (ORG != other.ORG) return false;
      if (DST != other.DST) return false;
      if (Kd != other.Kd) return false;
      if (Ad != other.Ad) return false;
      if (Info != other.Info) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (RowSte.Length != 0) hash ^= RowSte.GetHashCode();
      if (RowErr.Length != 0) hash ^= RowErr.GetHashCode();
      if (RowUsr != 0UL) hash ^= RowUsr.GetHashCode();
      if (RowKey != 0UL) hash ^= RowKey.GetHashCode();
      if (Trh != 0L) hash ^= Trh.GetHashCode();
      if (KND != 0UL) hash ^= KND.GetHashCode();
      if (Drm.Length != 0) hash ^= Drm.GetHashCode();
      if (ORG != 0UL) hash ^= ORG.GetHashCode();
      if (DST != 0UL) hash ^= DST.GetHashCode();
      if (kd_ != null) hash ^= Kd.GetHashCode();
      if (ad_ != null) hash ^= Ad.GetHashCode();
      if (info_ != null) hash ^= Info.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (RowSte.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(RowSte);
      }
      if (RowErr.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(RowErr);
      }
      if (RowUsr != 0UL) {
        output.WriteRawTag(24);
        output.WriteUInt64(RowUsr);
      }
      if (RowKey != 0UL) {
        output.WriteRawTag(32);
        output.WriteUInt64(RowKey);
      }
      if (Trh != 0L) {
        output.WriteRawTag(40);
        output.WriteInt64(Trh);
      }
      if (KND != 0UL) {
        output.WriteRawTag(48);
        output.WriteUInt64(KND);
      }
      if (Drm.Length != 0) {
        output.WriteRawTag(58);
        output.WriteString(Drm);
      }
      if (ORG != 0UL) {
        output.WriteRawTag(64);
        output.WriteUInt64(ORG);
      }
      if (DST != 0UL) {
        output.WriteRawTag(72);
        output.WriteUInt64(DST);
      }
      if (kd_ != null) {
        _single_kd_codec.WriteTagAndValue(output, Kd);
      }
      if (ad_ != null) {
        _single_ad_codec.WriteTagAndValue(output, Ad);
      }
      if (info_ != null) {
        _single_info_codec.WriteTagAndValue(output, Info);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (RowSte.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(RowSte);
      }
      if (RowErr.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(RowErr);
      }
      if (RowUsr != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(RowUsr);
      }
      if (RowKey != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(RowKey);
      }
      if (Trh != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(Trh);
      }
      if (KND != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(KND);
      }
      if (Drm.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Drm);
      }
      if (ORG != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(ORG);
      }
      if (DST != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(DST);
      }
      if (kd_ != null) {
        size += _single_kd_codec.CalculateSizeWithTag(Kd);
      }
      if (ad_ != null) {
        size += _single_ad_codec.CalculateSizeWithTag(Ad);
      }
      if (info_ != null) {
        size += _single_info_codec.CalculateSizeWithTag(Info);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(TOMproxy other) {
      if (other == null) {
        return;
      }
      if (other.RowSte.Length != 0) {
        RowSte = other.RowSte;
      }
      if (other.RowErr.Length != 0) {
        RowErr = other.RowErr;
      }
      if (other.RowUsr != 0UL) {
        RowUsr = other.RowUsr;
      }
      if (other.RowKey != 0UL) {
        RowKey = other.RowKey;
      }
      if (other.Trh != 0L) {
        Trh = other.Trh;
      }
      if (other.KND != 0UL) {
        KND = other.KND;
      }
      if (other.Drm.Length != 0) {
        Drm = other.Drm;
      }
      if (other.ORG != 0UL) {
        ORG = other.ORG;
      }
      if (other.DST != 0UL) {
        DST = other.DST;
      }
      if (other.kd_ != null) {
        if (kd_ == null || other.Kd != "") {
          Kd = other.Kd;
        }
      }
      if (other.ad_ != null) {
        if (ad_ == null || other.Ad != "") {
          Ad = other.Ad;
        }
      }
      if (other.info_ != null) {
        if (info_ == null || other.Info != "") {
          Info = other.Info;
        }
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            RowSte = input.ReadString();
            break;
          }
          case 18: {
            RowErr = input.ReadString();
            break;
          }
          case 24: {
            RowUsr = input.ReadUInt64();
            break;
          }
          case 32: {
            RowKey = input.ReadUInt64();
            break;
          }
          case 40: {
            Trh = input.ReadInt64();
            break;
          }
          case 48: {
            KND = input.ReadUInt64();
            break;
          }
          case 58: {
            Drm = input.ReadString();
            break;
          }
          case 64: {
            ORG = input.ReadUInt64();
            break;
          }
          case 72: {
            DST = input.ReadUInt64();
            break;
          }
          case 82: {
            string value = _single_kd_codec.Read(input);
            if (kd_ == null || value != "") {
              Kd = value;
            }
            break;
          }
          case 90: {
            string value = _single_ad_codec.Read(input);
            if (ad_ == null || value != "") {
              Ad = value;
            }
            break;
          }
          case 98: {
            string value = _single_info_codec.Read(input);
            if (info_ == null || value != "") {
              Info = value;
            }
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// TransferOrderDety
  /// </summary>
  public sealed partial class TODproxy : pb::IMessage<TODproxy> {
    private static readonly pb::MessageParser<TODproxy> _parser = new pb::MessageParser<TODproxy>(() => new TODproxy());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<TODproxy> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Rest.RestReflection.Descriptor.MessageTypes[18]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TODproxy() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TODproxy(TODproxy other) : this() {
      rowSte_ = other.rowSte_;
      rowErr_ = other.rowErr_;
      rowUsr_ = other.rowUsr_;
      rowKey_ = other.rowKey_;
      tOM_ = other.tOM_;
      Kd = other.Kd;
      Ad = other.Ad;
      Info = other.Info;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TODproxy Clone() {
      return new TODproxy(this);
    }

    /// <summary>Field number for the "RowSte" field.</summary>
    public const int RowSteFieldNumber = 1;
    private string rowSte_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string RowSte {
      get { return rowSte_; }
      set {
        rowSte_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "RowErr" field.</summary>
    public const int RowErrFieldNumber = 2;
    private string rowErr_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string RowErr {
      get { return rowErr_; }
      set {
        rowErr_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "RowUsr" field.</summary>
    public const int RowUsrFieldNumber = 3;
    private ulong rowUsr_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong RowUsr {
      get { return rowUsr_; }
      set {
        rowUsr_ = value;
      }
    }

    /// <summary>Field number for the "RowKey" field.</summary>
    public const int RowKeyFieldNumber = 4;
    private ulong rowKey_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong RowKey {
      get { return rowKey_; }
      set {
        rowKey_ = value;
      }
    }

    /// <summary>Field number for the "TOM" field.</summary>
    public const int TOMFieldNumber = 5;
    private ulong tOM_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong TOM {
      get { return tOM_; }
      set {
        tOM_ = value;
      }
    }

    /// <summary>Field number for the "Kd" field.</summary>
    public const int KdFieldNumber = 6;
    private static readonly pb::FieldCodec<string> _single_kd_codec = pb::FieldCodec.ForClassWrapper<string>(50);
    private string kd_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Kd {
      get { return kd_; }
      set {
        kd_ = value;
      }
    }

    /// <summary>Field number for the "Ad" field.</summary>
    public const int AdFieldNumber = 7;
    private static readonly pb::FieldCodec<string> _single_ad_codec = pb::FieldCodec.ForClassWrapper<string>(58);
    private string ad_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Ad {
      get { return ad_; }
      set {
        ad_ = value;
      }
    }

    /// <summary>Field number for the "info" field.</summary>
    public const int InfoFieldNumber = 8;
    private static readonly pb::FieldCodec<string> _single_info_codec = pb::FieldCodec.ForClassWrapper<string>(66);
    private string info_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Info {
      get { return info_; }
      set {
        info_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as TODproxy);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(TODproxy other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (RowSte != other.RowSte) return false;
      if (RowErr != other.RowErr) return false;
      if (RowUsr != other.RowUsr) return false;
      if (RowKey != other.RowKey) return false;
      if (TOM != other.TOM) return false;
      if (Kd != other.Kd) return false;
      if (Ad != other.Ad) return false;
      if (Info != other.Info) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (RowSte.Length != 0) hash ^= RowSte.GetHashCode();
      if (RowErr.Length != 0) hash ^= RowErr.GetHashCode();
      if (RowUsr != 0UL) hash ^= RowUsr.GetHashCode();
      if (RowKey != 0UL) hash ^= RowKey.GetHashCode();
      if (TOM != 0UL) hash ^= TOM.GetHashCode();
      if (kd_ != null) hash ^= Kd.GetHashCode();
      if (ad_ != null) hash ^= Ad.GetHashCode();
      if (info_ != null) hash ^= Info.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (RowSte.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(RowSte);
      }
      if (RowErr.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(RowErr);
      }
      if (RowUsr != 0UL) {
        output.WriteRawTag(24);
        output.WriteUInt64(RowUsr);
      }
      if (RowKey != 0UL) {
        output.WriteRawTag(32);
        output.WriteUInt64(RowKey);
      }
      if (TOM != 0UL) {
        output.WriteRawTag(40);
        output.WriteUInt64(TOM);
      }
      if (kd_ != null) {
        _single_kd_codec.WriteTagAndValue(output, Kd);
      }
      if (ad_ != null) {
        _single_ad_codec.WriteTagAndValue(output, Ad);
      }
      if (info_ != null) {
        _single_info_codec.WriteTagAndValue(output, Info);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (RowSte.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(RowSte);
      }
      if (RowErr.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(RowErr);
      }
      if (RowUsr != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(RowUsr);
      }
      if (RowKey != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(RowKey);
      }
      if (TOM != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(TOM);
      }
      if (kd_ != null) {
        size += _single_kd_codec.CalculateSizeWithTag(Kd);
      }
      if (ad_ != null) {
        size += _single_ad_codec.CalculateSizeWithTag(Ad);
      }
      if (info_ != null) {
        size += _single_info_codec.CalculateSizeWithTag(Info);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(TODproxy other) {
      if (other == null) {
        return;
      }
      if (other.RowSte.Length != 0) {
        RowSte = other.RowSte;
      }
      if (other.RowErr.Length != 0) {
        RowErr = other.RowErr;
      }
      if (other.RowUsr != 0UL) {
        RowUsr = other.RowUsr;
      }
      if (other.RowKey != 0UL) {
        RowKey = other.RowKey;
      }
      if (other.TOM != 0UL) {
        TOM = other.TOM;
      }
      if (other.kd_ != null) {
        if (kd_ == null || other.Kd != "") {
          Kd = other.Kd;
        }
      }
      if (other.ad_ != null) {
        if (ad_ == null || other.Ad != "") {
          Ad = other.Ad;
        }
      }
      if (other.info_ != null) {
        if (info_ == null || other.Info != "") {
          Info = other.Info;
        }
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            RowSte = input.ReadString();
            break;
          }
          case 18: {
            RowErr = input.ReadString();
            break;
          }
          case 24: {
            RowUsr = input.ReadUInt64();
            break;
          }
          case 32: {
            RowKey = input.ReadUInt64();
            break;
          }
          case 40: {
            TOM = input.ReadUInt64();
            break;
          }
          case 50: {
            string value = _single_kd_codec.Read(input);
            if (kd_ == null || value != "") {
              Kd = value;
            }
            break;
          }
          case 58: {
            string value = _single_ad_codec.Read(input);
            if (ad_ == null || value != "") {
              Ad = value;
            }
            break;
          }
          case 66: {
            string value = _single_info_codec.Read(input);
            if (info_ == null || value != "") {
              Info = value;
            }
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// TransferWaybillMaster
  /// </summary>
  public sealed partial class TWMproxy : pb::IMessage<TWMproxy> {
    private static readonly pb::MessageParser<TWMproxy> _parser = new pb::MessageParser<TWMproxy>(() => new TWMproxy());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<TWMproxy> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Rest.RestReflection.Descriptor.MessageTypes[19]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TWMproxy() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TWMproxy(TWMproxy other) : this() {
      rowSte_ = other.rowSte_;
      rowErr_ = other.rowErr_;
      rowUsr_ = other.rowUsr_;
      rowKey_ = other.rowKey_;
      trh_ = other.trh_;
      kND_ = other.kND_;
      drm_ = other.drm_;
      Kd = other.Kd;
      Ad = other.Ad;
      Info = other.Info;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TWMproxy Clone() {
      return new TWMproxy(this);
    }

    /// <summary>Field number for the "RowSte" field.</summary>
    public const int RowSteFieldNumber = 1;
    private string rowSte_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string RowSte {
      get { return rowSte_; }
      set {
        rowSte_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "RowErr" field.</summary>
    public const int RowErrFieldNumber = 2;
    private string rowErr_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string RowErr {
      get { return rowErr_; }
      set {
        rowErr_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "RowUsr" field.</summary>
    public const int RowUsrFieldNumber = 3;
    private ulong rowUsr_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong RowUsr {
      get { return rowUsr_; }
      set {
        rowUsr_ = value;
      }
    }

    /// <summary>Field number for the "RowKey" field.</summary>
    public const int RowKeyFieldNumber = 4;
    private ulong rowKey_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong RowKey {
      get { return rowKey_; }
      set {
        rowKey_ = value;
      }
    }

    /// <summary>Field number for the "Trh" field.</summary>
    public const int TrhFieldNumber = 5;
    private long trh_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long Trh {
      get { return trh_; }
      set {
        trh_ = value;
      }
    }

    /// <summary>Field number for the "KND" field.</summary>
    public const int KNDFieldNumber = 6;
    private ulong kND_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong KND {
      get { return kND_; }
      set {
        kND_ = value;
      }
    }

    /// <summary>Field number for the "Drm" field.</summary>
    public const int DrmFieldNumber = 7;
    private string drm_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Drm {
      get { return drm_; }
      set {
        drm_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "Kd" field.</summary>
    public const int KdFieldNumber = 8;
    private static readonly pb::FieldCodec<string> _single_kd_codec = pb::FieldCodec.ForClassWrapper<string>(66);
    private string kd_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Kd {
      get { return kd_; }
      set {
        kd_ = value;
      }
    }

    /// <summary>Field number for the "Ad" field.</summary>
    public const int AdFieldNumber = 9;
    private static readonly pb::FieldCodec<string> _single_ad_codec = pb::FieldCodec.ForClassWrapper<string>(74);
    private string ad_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Ad {
      get { return ad_; }
      set {
        ad_ = value;
      }
    }

    /// <summary>Field number for the "info" field.</summary>
    public const int InfoFieldNumber = 10;
    private static readonly pb::FieldCodec<string> _single_info_codec = pb::FieldCodec.ForClassWrapper<string>(82);
    private string info_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Info {
      get { return info_; }
      set {
        info_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as TWMproxy);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(TWMproxy other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (RowSte != other.RowSte) return false;
      if (RowErr != other.RowErr) return false;
      if (RowUsr != other.RowUsr) return false;
      if (RowKey != other.RowKey) return false;
      if (Trh != other.Trh) return false;
      if (KND != other.KND) return false;
      if (Drm != other.Drm) return false;
      if (Kd != other.Kd) return false;
      if (Ad != other.Ad) return false;
      if (Info != other.Info) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (RowSte.Length != 0) hash ^= RowSte.GetHashCode();
      if (RowErr.Length != 0) hash ^= RowErr.GetHashCode();
      if (RowUsr != 0UL) hash ^= RowUsr.GetHashCode();
      if (RowKey != 0UL) hash ^= RowKey.GetHashCode();
      if (Trh != 0L) hash ^= Trh.GetHashCode();
      if (KND != 0UL) hash ^= KND.GetHashCode();
      if (Drm.Length != 0) hash ^= Drm.GetHashCode();
      if (kd_ != null) hash ^= Kd.GetHashCode();
      if (ad_ != null) hash ^= Ad.GetHashCode();
      if (info_ != null) hash ^= Info.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (RowSte.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(RowSte);
      }
      if (RowErr.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(RowErr);
      }
      if (RowUsr != 0UL) {
        output.WriteRawTag(24);
        output.WriteUInt64(RowUsr);
      }
      if (RowKey != 0UL) {
        output.WriteRawTag(32);
        output.WriteUInt64(RowKey);
      }
      if (Trh != 0L) {
        output.WriteRawTag(40);
        output.WriteInt64(Trh);
      }
      if (KND != 0UL) {
        output.WriteRawTag(48);
        output.WriteUInt64(KND);
      }
      if (Drm.Length != 0) {
        output.WriteRawTag(58);
        output.WriteString(Drm);
      }
      if (kd_ != null) {
        _single_kd_codec.WriteTagAndValue(output, Kd);
      }
      if (ad_ != null) {
        _single_ad_codec.WriteTagAndValue(output, Ad);
      }
      if (info_ != null) {
        _single_info_codec.WriteTagAndValue(output, Info);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (RowSte.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(RowSte);
      }
      if (RowErr.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(RowErr);
      }
      if (RowUsr != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(RowUsr);
      }
      if (RowKey != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(RowKey);
      }
      if (Trh != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(Trh);
      }
      if (KND != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(KND);
      }
      if (Drm.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Drm);
      }
      if (kd_ != null) {
        size += _single_kd_codec.CalculateSizeWithTag(Kd);
      }
      if (ad_ != null) {
        size += _single_ad_codec.CalculateSizeWithTag(Ad);
      }
      if (info_ != null) {
        size += _single_info_codec.CalculateSizeWithTag(Info);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(TWMproxy other) {
      if (other == null) {
        return;
      }
      if (other.RowSte.Length != 0) {
        RowSte = other.RowSte;
      }
      if (other.RowErr.Length != 0) {
        RowErr = other.RowErr;
      }
      if (other.RowUsr != 0UL) {
        RowUsr = other.RowUsr;
      }
      if (other.RowKey != 0UL) {
        RowKey = other.RowKey;
      }
      if (other.Trh != 0L) {
        Trh = other.Trh;
      }
      if (other.KND != 0UL) {
        KND = other.KND;
      }
      if (other.Drm.Length != 0) {
        Drm = other.Drm;
      }
      if (other.kd_ != null) {
        if (kd_ == null || other.Kd != "") {
          Kd = other.Kd;
        }
      }
      if (other.ad_ != null) {
        if (ad_ == null || other.Ad != "") {
          Ad = other.Ad;
        }
      }
      if (other.info_ != null) {
        if (info_ == null || other.Info != "") {
          Info = other.Info;
        }
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            RowSte = input.ReadString();
            break;
          }
          case 18: {
            RowErr = input.ReadString();
            break;
          }
          case 24: {
            RowUsr = input.ReadUInt64();
            break;
          }
          case 32: {
            RowKey = input.ReadUInt64();
            break;
          }
          case 40: {
            Trh = input.ReadInt64();
            break;
          }
          case 48: {
            KND = input.ReadUInt64();
            break;
          }
          case 58: {
            Drm = input.ReadString();
            break;
          }
          case 66: {
            string value = _single_kd_codec.Read(input);
            if (kd_ == null || value != "") {
              Kd = value;
            }
            break;
          }
          case 74: {
            string value = _single_ad_codec.Read(input);
            if (ad_ == null || value != "") {
              Ad = value;
            }
            break;
          }
          case 82: {
            string value = _single_info_codec.Read(input);
            if (info_ == null || value != "") {
              Info = value;
            }
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// TransferWaybillDety
  /// </summary>
  public sealed partial class TWDproxy : pb::IMessage<TWDproxy> {
    private static readonly pb::MessageParser<TWDproxy> _parser = new pb::MessageParser<TWDproxy>(() => new TWDproxy());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<TWDproxy> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Rest.RestReflection.Descriptor.MessageTypes[20]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TWDproxy() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TWDproxy(TWDproxy other) : this() {
      rowSte_ = other.rowSte_;
      rowErr_ = other.rowErr_;
      rowUsr_ = other.rowUsr_;
      rowKey_ = other.rowKey_;
      tWM_ = other.tWM_;
      Kd = other.Kd;
      Ad = other.Ad;
      Info = other.Info;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TWDproxy Clone() {
      return new TWDproxy(this);
    }

    /// <summary>Field number for the "RowSte" field.</summary>
    public const int RowSteFieldNumber = 1;
    private string rowSte_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string RowSte {
      get { return rowSte_; }
      set {
        rowSte_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "RowErr" field.</summary>
    public const int RowErrFieldNumber = 2;
    private string rowErr_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string RowErr {
      get { return rowErr_; }
      set {
        rowErr_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "RowUsr" field.</summary>
    public const int RowUsrFieldNumber = 3;
    private ulong rowUsr_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong RowUsr {
      get { return rowUsr_; }
      set {
        rowUsr_ = value;
      }
    }

    /// <summary>Field number for the "RowKey" field.</summary>
    public const int RowKeyFieldNumber = 4;
    private ulong rowKey_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong RowKey {
      get { return rowKey_; }
      set {
        rowKey_ = value;
      }
    }

    /// <summary>Field number for the "TWM" field.</summary>
    public const int TWMFieldNumber = 5;
    private ulong tWM_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong TWM {
      get { return tWM_; }
      set {
        tWM_ = value;
      }
    }

    /// <summary>Field number for the "Kd" field.</summary>
    public const int KdFieldNumber = 6;
    private static readonly pb::FieldCodec<string> _single_kd_codec = pb::FieldCodec.ForClassWrapper<string>(50);
    private string kd_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Kd {
      get { return kd_; }
      set {
        kd_ = value;
      }
    }

    /// <summary>Field number for the "Ad" field.</summary>
    public const int AdFieldNumber = 7;
    private static readonly pb::FieldCodec<string> _single_ad_codec = pb::FieldCodec.ForClassWrapper<string>(58);
    private string ad_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Ad {
      get { return ad_; }
      set {
        ad_ = value;
      }
    }

    /// <summary>Field number for the "info" field.</summary>
    public const int InfoFieldNumber = 8;
    private static readonly pb::FieldCodec<string> _single_info_codec = pb::FieldCodec.ForClassWrapper<string>(66);
    private string info_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Info {
      get { return info_; }
      set {
        info_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as TWDproxy);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(TWDproxy other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (RowSte != other.RowSte) return false;
      if (RowErr != other.RowErr) return false;
      if (RowUsr != other.RowUsr) return false;
      if (RowKey != other.RowKey) return false;
      if (TWM != other.TWM) return false;
      if (Kd != other.Kd) return false;
      if (Ad != other.Ad) return false;
      if (Info != other.Info) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (RowSte.Length != 0) hash ^= RowSte.GetHashCode();
      if (RowErr.Length != 0) hash ^= RowErr.GetHashCode();
      if (RowUsr != 0UL) hash ^= RowUsr.GetHashCode();
      if (RowKey != 0UL) hash ^= RowKey.GetHashCode();
      if (TWM != 0UL) hash ^= TWM.GetHashCode();
      if (kd_ != null) hash ^= Kd.GetHashCode();
      if (ad_ != null) hash ^= Ad.GetHashCode();
      if (info_ != null) hash ^= Info.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (RowSte.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(RowSte);
      }
      if (RowErr.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(RowErr);
      }
      if (RowUsr != 0UL) {
        output.WriteRawTag(24);
        output.WriteUInt64(RowUsr);
      }
      if (RowKey != 0UL) {
        output.WriteRawTag(32);
        output.WriteUInt64(RowKey);
      }
      if (TWM != 0UL) {
        output.WriteRawTag(40);
        output.WriteUInt64(TWM);
      }
      if (kd_ != null) {
        _single_kd_codec.WriteTagAndValue(output, Kd);
      }
      if (ad_ != null) {
        _single_ad_codec.WriteTagAndValue(output, Ad);
      }
      if (info_ != null) {
        _single_info_codec.WriteTagAndValue(output, Info);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (RowSte.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(RowSte);
      }
      if (RowErr.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(RowErr);
      }
      if (RowUsr != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(RowUsr);
      }
      if (RowKey != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(RowKey);
      }
      if (TWM != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(TWM);
      }
      if (kd_ != null) {
        size += _single_kd_codec.CalculateSizeWithTag(Kd);
      }
      if (ad_ != null) {
        size += _single_ad_codec.CalculateSizeWithTag(Ad);
      }
      if (info_ != null) {
        size += _single_info_codec.CalculateSizeWithTag(Info);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(TWDproxy other) {
      if (other == null) {
        return;
      }
      if (other.RowSte.Length != 0) {
        RowSte = other.RowSte;
      }
      if (other.RowErr.Length != 0) {
        RowErr = other.RowErr;
      }
      if (other.RowUsr != 0UL) {
        RowUsr = other.RowUsr;
      }
      if (other.RowKey != 0UL) {
        RowKey = other.RowKey;
      }
      if (other.TWM != 0UL) {
        TWM = other.TWM;
      }
      if (other.kd_ != null) {
        if (kd_ == null || other.Kd != "") {
          Kd = other.Kd;
        }
      }
      if (other.ad_ != null) {
        if (ad_ == null || other.Ad != "") {
          Ad = other.Ad;
        }
      }
      if (other.info_ != null) {
        if (info_ == null || other.Info != "") {
          Info = other.Info;
        }
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            RowSte = input.ReadString();
            break;
          }
          case 18: {
            RowErr = input.ReadString();
            break;
          }
          case 24: {
            RowUsr = input.ReadUInt64();
            break;
          }
          case 32: {
            RowKey = input.ReadUInt64();
            break;
          }
          case 40: {
            TWM = input.ReadUInt64();
            break;
          }
          case 50: {
            string value = _single_kd_codec.Read(input);
            if (kd_ == null || value != "") {
              Kd = value;
            }
            break;
          }
          case 58: {
            string value = _single_ad_codec.Read(input);
            if (ad_ == null || value != "") {
              Ad = value;
            }
            break;
          }
          case 66: {
            string value = _single_info_codec.Read(input);
            if (info_ == null || value != "") {
              Info = value;
            }
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// NNT Ne
  /// </summary>
  public sealed partial class NNTproxy : pb::IMessage<NNTproxy> {
    private static readonly pb::MessageParser<NNTproxy> _parser = new pb::MessageParser<NNTproxy>(() => new NNTproxy());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<NNTproxy> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Rest.RestReflection.Descriptor.MessageTypes[21]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public NNTproxy() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public NNTproxy(NNTproxy other) : this() {
      rowSte_ = other.rowSte_;
      rowErr_ = other.rowErr_;
      rowUsr_ = other.rowUsr_;
      rowKey_ = other.rowKey_;
      Kd = other.Kd;
      Ad = other.Ad;
      Info = other.Info;
      bRM_ = other.bRM_;
      fyt_ = other.fyt_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public NNTproxy Clone() {
      return new NNTproxy(this);
    }

    /// <summary>Field number for the "RowSte" field.</summary>
    public const int RowSteFieldNumber = 1;
    private string rowSte_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string RowSte {
      get { return rowSte_; }
      set {
        rowSte_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "RowErr" field.</summary>
    public const int RowErrFieldNumber = 2;
    private string rowErr_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string RowErr {
      get { return rowErr_; }
      set {
        rowErr_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "RowUsr" field.</summary>
    public const int RowUsrFieldNumber = 3;
    private ulong rowUsr_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong RowUsr {
      get { return rowUsr_; }
      set {
        rowUsr_ = value;
      }
    }

    /// <summary>Field number for the "RowKey" field.</summary>
    public const int RowKeyFieldNumber = 4;
    private ulong rowKey_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong RowKey {
      get { return rowKey_; }
      set {
        rowKey_ = value;
      }
    }

    /// <summary>Field number for the "Kd" field.</summary>
    public const int KdFieldNumber = 5;
    private static readonly pb::FieldCodec<string> _single_kd_codec = pb::FieldCodec.ForClassWrapper<string>(42);
    private string kd_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Kd {
      get { return kd_; }
      set {
        kd_ = value;
      }
    }

    /// <summary>Field number for the "Ad" field.</summary>
    public const int AdFieldNumber = 6;
    private static readonly pb::FieldCodec<string> _single_ad_codec = pb::FieldCodec.ForClassWrapper<string>(50);
    private string ad_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Ad {
      get { return ad_; }
      set {
        ad_ = value;
      }
    }

    /// <summary>Field number for the "Info" field.</summary>
    public const int InfoFieldNumber = 7;
    private static readonly pb::FieldCodec<string> _single_info_codec = pb::FieldCodec.ForClassWrapper<string>(58);
    private string info_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Info {
      get { return info_; }
      set {
        info_ = value;
      }
    }

    /// <summary>Field number for the "BRM" field.</summary>
    public const int BRMFieldNumber = 8;
    private ulong bRM_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong BRM {
      get { return bRM_; }
      set {
        bRM_ = value;
      }
    }

    /// <summary>Field number for the "Fyt" field.</summary>
    public const int FytFieldNumber = 9;
    private double fyt_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double Fyt {
      get { return fyt_; }
      set {
        fyt_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as NNTproxy);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(NNTproxy other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (RowSte != other.RowSte) return false;
      if (RowErr != other.RowErr) return false;
      if (RowUsr != other.RowUsr) return false;
      if (RowKey != other.RowKey) return false;
      if (Kd != other.Kd) return false;
      if (Ad != other.Ad) return false;
      if (Info != other.Info) return false;
      if (BRM != other.BRM) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(Fyt, other.Fyt)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (RowSte.Length != 0) hash ^= RowSte.GetHashCode();
      if (RowErr.Length != 0) hash ^= RowErr.GetHashCode();
      if (RowUsr != 0UL) hash ^= RowUsr.GetHashCode();
      if (RowKey != 0UL) hash ^= RowKey.GetHashCode();
      if (kd_ != null) hash ^= Kd.GetHashCode();
      if (ad_ != null) hash ^= Ad.GetHashCode();
      if (info_ != null) hash ^= Info.GetHashCode();
      if (BRM != 0UL) hash ^= BRM.GetHashCode();
      if (Fyt != 0D) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(Fyt);
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (RowSte.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(RowSte);
      }
      if (RowErr.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(RowErr);
      }
      if (RowUsr != 0UL) {
        output.WriteRawTag(24);
        output.WriteUInt64(RowUsr);
      }
      if (RowKey != 0UL) {
        output.WriteRawTag(32);
        output.WriteUInt64(RowKey);
      }
      if (kd_ != null) {
        _single_kd_codec.WriteTagAndValue(output, Kd);
      }
      if (ad_ != null) {
        _single_ad_codec.WriteTagAndValue(output, Ad);
      }
      if (info_ != null) {
        _single_info_codec.WriteTagAndValue(output, Info);
      }
      if (BRM != 0UL) {
        output.WriteRawTag(64);
        output.WriteUInt64(BRM);
      }
      if (Fyt != 0D) {
        output.WriteRawTag(73);
        output.WriteDouble(Fyt);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (RowSte.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(RowSte);
      }
      if (RowErr.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(RowErr);
      }
      if (RowUsr != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(RowUsr);
      }
      if (RowKey != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(RowKey);
      }
      if (kd_ != null) {
        size += _single_kd_codec.CalculateSizeWithTag(Kd);
      }
      if (ad_ != null) {
        size += _single_ad_codec.CalculateSizeWithTag(Ad);
      }
      if (info_ != null) {
        size += _single_info_codec.CalculateSizeWithTag(Info);
      }
      if (BRM != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(BRM);
      }
      if (Fyt != 0D) {
        size += 1 + 8;
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(NNTproxy other) {
      if (other == null) {
        return;
      }
      if (other.RowSte.Length != 0) {
        RowSte = other.RowSte;
      }
      if (other.RowErr.Length != 0) {
        RowErr = other.RowErr;
      }
      if (other.RowUsr != 0UL) {
        RowUsr = other.RowUsr;
      }
      if (other.RowKey != 0UL) {
        RowKey = other.RowKey;
      }
      if (other.kd_ != null) {
        if (kd_ == null || other.Kd != "") {
          Kd = other.Kd;
        }
      }
      if (other.ad_ != null) {
        if (ad_ == null || other.Ad != "") {
          Ad = other.Ad;
        }
      }
      if (other.info_ != null) {
        if (info_ == null || other.Info != "") {
          Info = other.Info;
        }
      }
      if (other.BRM != 0UL) {
        BRM = other.BRM;
      }
      if (other.Fyt != 0D) {
        Fyt = other.Fyt;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            RowSte = input.ReadString();
            break;
          }
          case 18: {
            RowErr = input.ReadString();
            break;
          }
          case 24: {
            RowUsr = input.ReadUInt64();
            break;
          }
          case 32: {
            RowKey = input.ReadUInt64();
            break;
          }
          case 42: {
            string value = _single_kd_codec.Read(input);
            if (kd_ == null || value != "") {
              Kd = value;
            }
            break;
          }
          case 50: {
            string value = _single_ad_codec.Read(input);
            if (ad_ == null || value != "") {
              Ad = value;
            }
            break;
          }
          case 58: {
            string value = _single_info_codec.Read(input);
            if (info_ == null || value != "") {
              Info = value;
            }
            break;
          }
          case 64: {
            BRM = input.ReadUInt64();
            break;
          }
          case 73: {
            Fyt = input.ReadDouble();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// NNR NeRelation
  /// </summary>
  public sealed partial class NNRproxy : pb::IMessage<NNRproxy> {
    private static readonly pb::MessageParser<NNRproxy> _parser = new pb::MessageParser<NNRproxy>(() => new NNRproxy());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<NNRproxy> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Rest.RestReflection.Descriptor.MessageTypes[22]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public NNRproxy() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public NNRproxy(NNRproxy other) : this() {
      rowSte_ = other.rowSte_;
      rowErr_ = other.rowErr_;
      rowUsr_ = other.rowUsr_;
      rowKey_ = other.rowKey_;
      nP_ = other.nP_;
      nC_ = other.nC_;
      mik_ = other.mik_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public NNRproxy Clone() {
      return new NNRproxy(this);
    }

    /// <summary>Field number for the "RowSte" field.</summary>
    public const int RowSteFieldNumber = 1;
    private string rowSte_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string RowSte {
      get { return rowSte_; }
      set {
        rowSte_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "RowErr" field.</summary>
    public const int RowErrFieldNumber = 2;
    private string rowErr_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string RowErr {
      get { return rowErr_; }
      set {
        rowErr_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "RowUsr" field.</summary>
    public const int RowUsrFieldNumber = 3;
    private ulong rowUsr_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong RowUsr {
      get { return rowUsr_; }
      set {
        rowUsr_ = value;
      }
    }

    /// <summary>Field number for the "RowKey" field.</summary>
    public const int RowKeyFieldNumber = 4;
    private ulong rowKey_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong RowKey {
      get { return rowKey_; }
      set {
        rowKey_ = value;
      }
    }

    /// <summary>Field number for the "NP" field.</summary>
    public const int NPFieldNumber = 5;
    private ulong nP_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong NP {
      get { return nP_; }
      set {
        nP_ = value;
      }
    }

    /// <summary>Field number for the "NC" field.</summary>
    public const int NCFieldNumber = 6;
    private ulong nC_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong NC {
      get { return nC_; }
      set {
        nC_ = value;
      }
    }

    /// <summary>Field number for the "Mik" field.</summary>
    public const int MikFieldNumber = 7;
    private double mik_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double Mik {
      get { return mik_; }
      set {
        mik_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as NNRproxy);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(NNRproxy other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (RowSte != other.RowSte) return false;
      if (RowErr != other.RowErr) return false;
      if (RowUsr != other.RowUsr) return false;
      if (RowKey != other.RowKey) return false;
      if (NP != other.NP) return false;
      if (NC != other.NC) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(Mik, other.Mik)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (RowSte.Length != 0) hash ^= RowSte.GetHashCode();
      if (RowErr.Length != 0) hash ^= RowErr.GetHashCode();
      if (RowUsr != 0UL) hash ^= RowUsr.GetHashCode();
      if (RowKey != 0UL) hash ^= RowKey.GetHashCode();
      if (NP != 0UL) hash ^= NP.GetHashCode();
      if (NC != 0UL) hash ^= NC.GetHashCode();
      if (Mik != 0D) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(Mik);
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (RowSte.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(RowSte);
      }
      if (RowErr.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(RowErr);
      }
      if (RowUsr != 0UL) {
        output.WriteRawTag(24);
        output.WriteUInt64(RowUsr);
      }
      if (RowKey != 0UL) {
        output.WriteRawTag(32);
        output.WriteUInt64(RowKey);
      }
      if (NP != 0UL) {
        output.WriteRawTag(40);
        output.WriteUInt64(NP);
      }
      if (NC != 0UL) {
        output.WriteRawTag(48);
        output.WriteUInt64(NC);
      }
      if (Mik != 0D) {
        output.WriteRawTag(57);
        output.WriteDouble(Mik);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (RowSte.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(RowSte);
      }
      if (RowErr.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(RowErr);
      }
      if (RowUsr != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(RowUsr);
      }
      if (RowKey != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(RowKey);
      }
      if (NP != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(NP);
      }
      if (NC != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(NC);
      }
      if (Mik != 0D) {
        size += 1 + 8;
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(NNRproxy other) {
      if (other == null) {
        return;
      }
      if (other.RowSte.Length != 0) {
        RowSte = other.RowSte;
      }
      if (other.RowErr.Length != 0) {
        RowErr = other.RowErr;
      }
      if (other.RowUsr != 0UL) {
        RowUsr = other.RowUsr;
      }
      if (other.RowKey != 0UL) {
        RowKey = other.RowKey;
      }
      if (other.NP != 0UL) {
        NP = other.NP;
      }
      if (other.NC != 0UL) {
        NC = other.NC;
      }
      if (other.Mik != 0D) {
        Mik = other.Mik;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            RowSte = input.ReadString();
            break;
          }
          case 18: {
            RowErr = input.ReadString();
            break;
          }
          case 24: {
            RowUsr = input.ReadUInt64();
            break;
          }
          case 32: {
            RowKey = input.ReadUInt64();
            break;
          }
          case 40: {
            NP = input.ReadUInt64();
            break;
          }
          case 48: {
            NC = input.ReadUInt64();
            break;
          }
          case 57: {
            Mik = input.ReadDouble();
            break;
          }
        }
      }
    }

  }

  public sealed partial class NeParentsProxy : pb::IMessage<NeParentsProxy> {
    private static readonly pb::MessageParser<NeParentsProxy> _parser = new pb::MessageParser<NeParentsProxy>(() => new NeParentsProxy());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<NeParentsProxy> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Rest.RestReflection.Descriptor.MessageTypes[23]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public NeParentsProxy() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public NeParentsProxy(NeParentsProxy other) : this() {
      ne_ = other.ne_;
      parents_ = other.parents_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public NeParentsProxy Clone() {
      return new NeParentsProxy(this);
    }

    /// <summary>Field number for the "Ne" field.</summary>
    public const int NeFieldNumber = 1;
    private ulong ne_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong Ne {
      get { return ne_; }
      set {
        ne_ = value;
      }
    }

    /// <summary>Field number for the "Parents" field.</summary>
    public const int ParentsFieldNumber = 2;
    private string parents_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Parents {
      get { return parents_; }
      set {
        parents_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as NeParentsProxy);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(NeParentsProxy other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Ne != other.Ne) return false;
      if (Parents != other.Parents) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Ne != 0UL) hash ^= Ne.GetHashCode();
      if (Parents.Length != 0) hash ^= Parents.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Ne != 0UL) {
        output.WriteRawTag(8);
        output.WriteUInt64(Ne);
      }
      if (Parents.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(Parents);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Ne != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(Ne);
      }
      if (Parents.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Parents);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(NeParentsProxy other) {
      if (other == null) {
        return;
      }
      if (other.Ne != 0UL) {
        Ne = other.Ne;
      }
      if (other.Parents.Length != 0) {
        Parents = other.Parents;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            Ne = input.ReadUInt64();
            break;
          }
          case 18: {
            Parents = input.ReadString();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// BR BaseRelation
  /// </summary>
  public sealed partial class BRproxy : pb::IMessage<BRproxy> {
    private static readonly pb::MessageParser<BRproxy> _parser = new pb::MessageParser<BRproxy>(() => new BRproxy());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<BRproxy> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Rest.RestReflection.Descriptor.MessageTypes[24]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public BRproxy() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public BRproxy(BRproxy other) : this() {
      rowSte_ = other.rowSte_;
      rowErr_ = other.rowErr_;
      rowUsr_ = other.rowUsr_;
      rowKey_ = other.rowKey_;
      p_ = other.p_;
      c_ = other.c_;
      others_ = other.others_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public BRproxy Clone() {
      return new BRproxy(this);
    }

    /// <summary>Field number for the "RowSte" field.</summary>
    public const int RowSteFieldNumber = 1;
    private string rowSte_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string RowSte {
      get { return rowSte_; }
      set {
        rowSte_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "RowErr" field.</summary>
    public const int RowErrFieldNumber = 2;
    private string rowErr_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string RowErr {
      get { return rowErr_; }
      set {
        rowErr_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "RowUsr" field.</summary>
    public const int RowUsrFieldNumber = 3;
    private ulong rowUsr_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong RowUsr {
      get { return rowUsr_; }
      set {
        rowUsr_ = value;
      }
    }

    /// <summary>Field number for the "RowKey" field.</summary>
    public const int RowKeyFieldNumber = 4;
    private ulong rowKey_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong RowKey {
      get { return rowKey_; }
      set {
        rowKey_ = value;
      }
    }

    /// <summary>Field number for the "P" field.</summary>
    public const int PFieldNumber = 5;
    private ulong p_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong P {
      get { return p_; }
      set {
        p_ = value;
      }
    }

    /// <summary>Field number for the "C" field.</summary>
    public const int CFieldNumber = 6;
    private ulong c_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong C {
      get { return c_; }
      set {
        c_ = value;
      }
    }

    /// <summary>Field number for the "Others" field.</summary>
    public const int OthersFieldNumber = 7;
    private string others_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Others {
      get { return others_; }
      set {
        others_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as BRproxy);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(BRproxy other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (RowSte != other.RowSte) return false;
      if (RowErr != other.RowErr) return false;
      if (RowUsr != other.RowUsr) return false;
      if (RowKey != other.RowKey) return false;
      if (P != other.P) return false;
      if (C != other.C) return false;
      if (Others != other.Others) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (RowSte.Length != 0) hash ^= RowSte.GetHashCode();
      if (RowErr.Length != 0) hash ^= RowErr.GetHashCode();
      if (RowUsr != 0UL) hash ^= RowUsr.GetHashCode();
      if (RowKey != 0UL) hash ^= RowKey.GetHashCode();
      if (P != 0UL) hash ^= P.GetHashCode();
      if (C != 0UL) hash ^= C.GetHashCode();
      if (Others.Length != 0) hash ^= Others.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (RowSte.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(RowSte);
      }
      if (RowErr.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(RowErr);
      }
      if (RowUsr != 0UL) {
        output.WriteRawTag(24);
        output.WriteUInt64(RowUsr);
      }
      if (RowKey != 0UL) {
        output.WriteRawTag(32);
        output.WriteUInt64(RowKey);
      }
      if (P != 0UL) {
        output.WriteRawTag(40);
        output.WriteUInt64(P);
      }
      if (C != 0UL) {
        output.WriteRawTag(48);
        output.WriteUInt64(C);
      }
      if (Others.Length != 0) {
        output.WriteRawTag(58);
        output.WriteString(Others);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (RowSte.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(RowSte);
      }
      if (RowErr.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(RowErr);
      }
      if (RowUsr != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(RowUsr);
      }
      if (RowKey != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(RowKey);
      }
      if (P != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(P);
      }
      if (C != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(C);
      }
      if (Others.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Others);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(BRproxy other) {
      if (other == null) {
        return;
      }
      if (other.RowSte.Length != 0) {
        RowSte = other.RowSte;
      }
      if (other.RowErr.Length != 0) {
        RowErr = other.RowErr;
      }
      if (other.RowUsr != 0UL) {
        RowUsr = other.RowUsr;
      }
      if (other.RowKey != 0UL) {
        RowKey = other.RowKey;
      }
      if (other.P != 0UL) {
        P = other.P;
      }
      if (other.C != 0UL) {
        C = other.C;
      }
      if (other.Others.Length != 0) {
        Others = other.Others;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            RowSte = input.ReadString();
            break;
          }
          case 18: {
            RowErr = input.ReadString();
            break;
          }
          case 24: {
            RowUsr = input.ReadUInt64();
            break;
          }
          case 32: {
            RowKey = input.ReadUInt64();
            break;
          }
          case 40: {
            P = input.ReadUInt64();
            break;
          }
          case 48: {
            C = input.ReadUInt64();
            break;
          }
          case 58: {
            Others = input.ReadString();
            break;
          }
        }
      }
    }

  }

  public sealed partial class BRparentsProxy : pb::IMessage<BRparentsProxy> {
    private static readonly pb::MessageParser<BRparentsProxy> _parser = new pb::MessageParser<BRparentsProxy>(() => new BRparentsProxy());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<BRparentsProxy> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Rest.RestReflection.Descriptor.MessageTypes[25]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public BRparentsProxy() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public BRparentsProxy(BRparentsProxy other) : this() {
      node_ = other.node_;
      parents_ = other.parents_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public BRparentsProxy Clone() {
      return new BRparentsProxy(this);
    }

    /// <summary>Field number for the "Node" field.</summary>
    public const int NodeFieldNumber = 1;
    private ulong node_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong Node {
      get { return node_; }
      set {
        node_ = value;
      }
    }

    /// <summary>Field number for the "Parents" field.</summary>
    public const int ParentsFieldNumber = 2;
    private string parents_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Parents {
      get { return parents_; }
      set {
        parents_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as BRparentsProxy);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(BRparentsProxy other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Node != other.Node) return false;
      if (Parents != other.Parents) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Node != 0UL) hash ^= Node.GetHashCode();
      if (Parents.Length != 0) hash ^= Parents.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Node != 0UL) {
        output.WriteRawTag(8);
        output.WriteUInt64(Node);
      }
      if (Parents.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(Parents);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Node != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(Node);
      }
      if (Parents.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Parents);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(BRparentsProxy other) {
      if (other == null) {
        return;
      }
      if (other.Node != 0UL) {
        Node = other.Node;
      }
      if (other.Parents.Length != 0) {
        Parents = other.Parents;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            Node = input.ReadUInt64();
            break;
          }
          case 18: {
            Parents = input.ReadString();
            break;
          }
        }
      }
    }

  }

  public sealed partial class KFTproxy : pb::IMessage<KFTproxy> {
    private static readonly pb::MessageParser<KFTproxy> _parser = new pb::MessageParser<KFTproxy>(() => new KFTproxy());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<KFTproxy> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Rest.RestReflection.Descriptor.MessageTypes[26]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public KFTproxy() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public KFTproxy(KFTproxy other) : this() {
      rowSte_ = other.rowSte_;
      rowErr_ = other.rowErr_;
      rowUsr_ = other.rowUsr_;
      rowKey_ = other.rowKey_;
      Kd = other.Kd;
      Ad = other.Ad;
      Info = other.Info;
      Tel = other.Tel;
      Adres = other.Adres;
      Sorumlu = other.Sorumlu;
      VrgDN = other.VrgDN;
      aHPbrc_ = other.aHPbrc_;
      aHPalc_ = other.aHPalc_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public KFTproxy Clone() {
      return new KFTproxy(this);
    }

    /// <summary>Field number for the "RowSte" field.</summary>
    public const int RowSteFieldNumber = 1;
    private string rowSte_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string RowSte {
      get { return rowSte_; }
      set {
        rowSte_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "RowErr" field.</summary>
    public const int RowErrFieldNumber = 2;
    private string rowErr_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string RowErr {
      get { return rowErr_; }
      set {
        rowErr_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "RowUsr" field.</summary>
    public const int RowUsrFieldNumber = 3;
    private ulong rowUsr_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong RowUsr {
      get { return rowUsr_; }
      set {
        rowUsr_ = value;
      }
    }

    /// <summary>Field number for the "RowKey" field.</summary>
    public const int RowKeyFieldNumber = 4;
    private ulong rowKey_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong RowKey {
      get { return rowKey_; }
      set {
        rowKey_ = value;
      }
    }

    /// <summary>Field number for the "Kd" field.</summary>
    public const int KdFieldNumber = 5;
    private static readonly pb::FieldCodec<string> _single_kd_codec = pb::FieldCodec.ForClassWrapper<string>(42);
    private string kd_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Kd {
      get { return kd_; }
      set {
        kd_ = value;
      }
    }

    /// <summary>Field number for the "Ad" field.</summary>
    public const int AdFieldNumber = 6;
    private static readonly pb::FieldCodec<string> _single_ad_codec = pb::FieldCodec.ForClassWrapper<string>(50);
    private string ad_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Ad {
      get { return ad_; }
      set {
        ad_ = value;
      }
    }

    /// <summary>Field number for the "Info" field.</summary>
    public const int InfoFieldNumber = 7;
    private static readonly pb::FieldCodec<string> _single_info_codec = pb::FieldCodec.ForClassWrapper<string>(58);
    private string info_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Info {
      get { return info_; }
      set {
        info_ = value;
      }
    }

    /// <summary>Field number for the "Tel" field.</summary>
    public const int TelFieldNumber = 8;
    private static readonly pb::FieldCodec<string> _single_tel_codec = pb::FieldCodec.ForClassWrapper<string>(66);
    private string tel_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Tel {
      get { return tel_; }
      set {
        tel_ = value;
      }
    }

    /// <summary>Field number for the "Adres" field.</summary>
    public const int AdresFieldNumber = 9;
    private static readonly pb::FieldCodec<string> _single_adres_codec = pb::FieldCodec.ForClassWrapper<string>(74);
    private string adres_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Adres {
      get { return adres_; }
      set {
        adres_ = value;
      }
    }

    /// <summary>Field number for the "Sorumlu" field.</summary>
    public const int SorumluFieldNumber = 10;
    private static readonly pb::FieldCodec<string> _single_sorumlu_codec = pb::FieldCodec.ForClassWrapper<string>(82);
    private string sorumlu_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Sorumlu {
      get { return sorumlu_; }
      set {
        sorumlu_ = value;
      }
    }

    /// <summary>Field number for the "VrgDN" field.</summary>
    public const int VrgDNFieldNumber = 11;
    private static readonly pb::FieldCodec<string> _single_vrgDN_codec = pb::FieldCodec.ForClassWrapper<string>(90);
    private string vrgDN_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string VrgDN {
      get { return vrgDN_; }
      set {
        vrgDN_ = value;
      }
    }

    /// <summary>Field number for the "AHPbrc" field.</summary>
    public const int AHPbrcFieldNumber = 12;
    private ulong aHPbrc_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong AHPbrc {
      get { return aHPbrc_; }
      set {
        aHPbrc_ = value;
      }
    }

    /// <summary>Field number for the "AHPalc" field.</summary>
    public const int AHPalcFieldNumber = 13;
    private ulong aHPalc_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong AHPalc {
      get { return aHPalc_; }
      set {
        aHPalc_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as KFTproxy);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(KFTproxy other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (RowSte != other.RowSte) return false;
      if (RowErr != other.RowErr) return false;
      if (RowUsr != other.RowUsr) return false;
      if (RowKey != other.RowKey) return false;
      if (Kd != other.Kd) return false;
      if (Ad != other.Ad) return false;
      if (Info != other.Info) return false;
      if (Tel != other.Tel) return false;
      if (Adres != other.Adres) return false;
      if (Sorumlu != other.Sorumlu) return false;
      if (VrgDN != other.VrgDN) return false;
      if (AHPbrc != other.AHPbrc) return false;
      if (AHPalc != other.AHPalc) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (RowSte.Length != 0) hash ^= RowSte.GetHashCode();
      if (RowErr.Length != 0) hash ^= RowErr.GetHashCode();
      if (RowUsr != 0UL) hash ^= RowUsr.GetHashCode();
      if (RowKey != 0UL) hash ^= RowKey.GetHashCode();
      if (kd_ != null) hash ^= Kd.GetHashCode();
      if (ad_ != null) hash ^= Ad.GetHashCode();
      if (info_ != null) hash ^= Info.GetHashCode();
      if (tel_ != null) hash ^= Tel.GetHashCode();
      if (adres_ != null) hash ^= Adres.GetHashCode();
      if (sorumlu_ != null) hash ^= Sorumlu.GetHashCode();
      if (vrgDN_ != null) hash ^= VrgDN.GetHashCode();
      if (AHPbrc != 0UL) hash ^= AHPbrc.GetHashCode();
      if (AHPalc != 0UL) hash ^= AHPalc.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (RowSte.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(RowSte);
      }
      if (RowErr.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(RowErr);
      }
      if (RowUsr != 0UL) {
        output.WriteRawTag(24);
        output.WriteUInt64(RowUsr);
      }
      if (RowKey != 0UL) {
        output.WriteRawTag(32);
        output.WriteUInt64(RowKey);
      }
      if (kd_ != null) {
        _single_kd_codec.WriteTagAndValue(output, Kd);
      }
      if (ad_ != null) {
        _single_ad_codec.WriteTagAndValue(output, Ad);
      }
      if (info_ != null) {
        _single_info_codec.WriteTagAndValue(output, Info);
      }
      if (tel_ != null) {
        _single_tel_codec.WriteTagAndValue(output, Tel);
      }
      if (adres_ != null) {
        _single_adres_codec.WriteTagAndValue(output, Adres);
      }
      if (sorumlu_ != null) {
        _single_sorumlu_codec.WriteTagAndValue(output, Sorumlu);
      }
      if (vrgDN_ != null) {
        _single_vrgDN_codec.WriteTagAndValue(output, VrgDN);
      }
      if (AHPbrc != 0UL) {
        output.WriteRawTag(96);
        output.WriteUInt64(AHPbrc);
      }
      if (AHPalc != 0UL) {
        output.WriteRawTag(104);
        output.WriteUInt64(AHPalc);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (RowSte.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(RowSte);
      }
      if (RowErr.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(RowErr);
      }
      if (RowUsr != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(RowUsr);
      }
      if (RowKey != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(RowKey);
      }
      if (kd_ != null) {
        size += _single_kd_codec.CalculateSizeWithTag(Kd);
      }
      if (ad_ != null) {
        size += _single_ad_codec.CalculateSizeWithTag(Ad);
      }
      if (info_ != null) {
        size += _single_info_codec.CalculateSizeWithTag(Info);
      }
      if (tel_ != null) {
        size += _single_tel_codec.CalculateSizeWithTag(Tel);
      }
      if (adres_ != null) {
        size += _single_adres_codec.CalculateSizeWithTag(Adres);
      }
      if (sorumlu_ != null) {
        size += _single_sorumlu_codec.CalculateSizeWithTag(Sorumlu);
      }
      if (vrgDN_ != null) {
        size += _single_vrgDN_codec.CalculateSizeWithTag(VrgDN);
      }
      if (AHPbrc != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(AHPbrc);
      }
      if (AHPalc != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(AHPalc);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(KFTproxy other) {
      if (other == null) {
        return;
      }
      if (other.RowSte.Length != 0) {
        RowSte = other.RowSte;
      }
      if (other.RowErr.Length != 0) {
        RowErr = other.RowErr;
      }
      if (other.RowUsr != 0UL) {
        RowUsr = other.RowUsr;
      }
      if (other.RowKey != 0UL) {
        RowKey = other.RowKey;
      }
      if (other.kd_ != null) {
        if (kd_ == null || other.Kd != "") {
          Kd = other.Kd;
        }
      }
      if (other.ad_ != null) {
        if (ad_ == null || other.Ad != "") {
          Ad = other.Ad;
        }
      }
      if (other.info_ != null) {
        if (info_ == null || other.Info != "") {
          Info = other.Info;
        }
      }
      if (other.tel_ != null) {
        if (tel_ == null || other.Tel != "") {
          Tel = other.Tel;
        }
      }
      if (other.adres_ != null) {
        if (adres_ == null || other.Adres != "") {
          Adres = other.Adres;
        }
      }
      if (other.sorumlu_ != null) {
        if (sorumlu_ == null || other.Sorumlu != "") {
          Sorumlu = other.Sorumlu;
        }
      }
      if (other.vrgDN_ != null) {
        if (vrgDN_ == null || other.VrgDN != "") {
          VrgDN = other.VrgDN;
        }
      }
      if (other.AHPbrc != 0UL) {
        AHPbrc = other.AHPbrc;
      }
      if (other.AHPalc != 0UL) {
        AHPalc = other.AHPalc;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            RowSte = input.ReadString();
            break;
          }
          case 18: {
            RowErr = input.ReadString();
            break;
          }
          case 24: {
            RowUsr = input.ReadUInt64();
            break;
          }
          case 32: {
            RowKey = input.ReadUInt64();
            break;
          }
          case 42: {
            string value = _single_kd_codec.Read(input);
            if (kd_ == null || value != "") {
              Kd = value;
            }
            break;
          }
          case 50: {
            string value = _single_ad_codec.Read(input);
            if (ad_ == null || value != "") {
              Ad = value;
            }
            break;
          }
          case 58: {
            string value = _single_info_codec.Read(input);
            if (info_ == null || value != "") {
              Info = value;
            }
            break;
          }
          case 66: {
            string value = _single_tel_codec.Read(input);
            if (tel_ == null || value != "") {
              Tel = value;
            }
            break;
          }
          case 74: {
            string value = _single_adres_codec.Read(input);
            if (adres_ == null || value != "") {
              Adres = value;
            }
            break;
          }
          case 82: {
            string value = _single_sorumlu_codec.Read(input);
            if (sorumlu_ == null || value != "") {
              Sorumlu = value;
            }
            break;
          }
          case 90: {
            string value = _single_vrgDN_codec.Read(input);
            if (vrgDN_ == null || value != "") {
              VrgDN = value;
            }
            break;
          }
          case 96: {
            AHPbrc = input.ReadUInt64();
            break;
          }
          case 104: {
            AHPalc = input.ReadUInt64();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// KCT Master -> KimContactTanim (Master:KFT)
  /// </summary>
  public sealed partial class KCTproxy : pb::IMessage<KCTproxy> {
    private static readonly pb::MessageParser<KCTproxy> _parser = new pb::MessageParser<KCTproxy>(() => new KCTproxy());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<KCTproxy> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Rest.RestReflection.Descriptor.MessageTypes[27]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public KCTproxy() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public KCTproxy(KCTproxy other) : this() {
      rowSte_ = other.rowSte_;
      rowErr_ = other.rowErr_;
      rowUsr_ = other.rowUsr_;
      rowKey_ = other.rowKey_;
      m_ = other.m_;
      Kd = other.Kd;
      Ad = other.Ad;
      Info = other.Info;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public KCTproxy Clone() {
      return new KCTproxy(this);
    }

    /// <summary>Field number for the "RowSte" field.</summary>
    public const int RowSteFieldNumber = 1;
    private string rowSte_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string RowSte {
      get { return rowSte_; }
      set {
        rowSte_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "RowErr" field.</summary>
    public const int RowErrFieldNumber = 2;
    private string rowErr_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string RowErr {
      get { return rowErr_; }
      set {
        rowErr_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "RowUsr" field.</summary>
    public const int RowUsrFieldNumber = 3;
    private ulong rowUsr_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong RowUsr {
      get { return rowUsr_; }
      set {
        rowUsr_ = value;
      }
    }

    /// <summary>Field number for the "RowKey" field.</summary>
    public const int RowKeyFieldNumber = 4;
    private ulong rowKey_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong RowKey {
      get { return rowKey_; }
      set {
        rowKey_ = value;
      }
    }

    /// <summary>Field number for the "M" field.</summary>
    public const int MFieldNumber = 5;
    private ulong m_;
    /// <summary>
    /// Master is KFT
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong M {
      get { return m_; }
      set {
        m_ = value;
      }
    }

    /// <summary>Field number for the "Kd" field.</summary>
    public const int KdFieldNumber = 6;
    private static readonly pb::FieldCodec<string> _single_kd_codec = pb::FieldCodec.ForClassWrapper<string>(50);
    private string kd_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Kd {
      get { return kd_; }
      set {
        kd_ = value;
      }
    }

    /// <summary>Field number for the "Ad" field.</summary>
    public const int AdFieldNumber = 7;
    private static readonly pb::FieldCodec<string> _single_ad_codec = pb::FieldCodec.ForClassWrapper<string>(58);
    private string ad_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Ad {
      get { return ad_; }
      set {
        ad_ = value;
      }
    }

    /// <summary>Field number for the "info" field.</summary>
    public const int InfoFieldNumber = 8;
    private static readonly pb::FieldCodec<string> _single_info_codec = pb::FieldCodec.ForClassWrapper<string>(66);
    private string info_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Info {
      get { return info_; }
      set {
        info_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as KCTproxy);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(KCTproxy other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (RowSte != other.RowSte) return false;
      if (RowErr != other.RowErr) return false;
      if (RowUsr != other.RowUsr) return false;
      if (RowKey != other.RowKey) return false;
      if (M != other.M) return false;
      if (Kd != other.Kd) return false;
      if (Ad != other.Ad) return false;
      if (Info != other.Info) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (RowSte.Length != 0) hash ^= RowSte.GetHashCode();
      if (RowErr.Length != 0) hash ^= RowErr.GetHashCode();
      if (RowUsr != 0UL) hash ^= RowUsr.GetHashCode();
      if (RowKey != 0UL) hash ^= RowKey.GetHashCode();
      if (M != 0UL) hash ^= M.GetHashCode();
      if (kd_ != null) hash ^= Kd.GetHashCode();
      if (ad_ != null) hash ^= Ad.GetHashCode();
      if (info_ != null) hash ^= Info.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (RowSte.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(RowSte);
      }
      if (RowErr.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(RowErr);
      }
      if (RowUsr != 0UL) {
        output.WriteRawTag(24);
        output.WriteUInt64(RowUsr);
      }
      if (RowKey != 0UL) {
        output.WriteRawTag(32);
        output.WriteUInt64(RowKey);
      }
      if (M != 0UL) {
        output.WriteRawTag(40);
        output.WriteUInt64(M);
      }
      if (kd_ != null) {
        _single_kd_codec.WriteTagAndValue(output, Kd);
      }
      if (ad_ != null) {
        _single_ad_codec.WriteTagAndValue(output, Ad);
      }
      if (info_ != null) {
        _single_info_codec.WriteTagAndValue(output, Info);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (RowSte.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(RowSte);
      }
      if (RowErr.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(RowErr);
      }
      if (RowUsr != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(RowUsr);
      }
      if (RowKey != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(RowKey);
      }
      if (M != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(M);
      }
      if (kd_ != null) {
        size += _single_kd_codec.CalculateSizeWithTag(Kd);
      }
      if (ad_ != null) {
        size += _single_ad_codec.CalculateSizeWithTag(Ad);
      }
      if (info_ != null) {
        size += _single_info_codec.CalculateSizeWithTag(Info);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(KCTproxy other) {
      if (other == null) {
        return;
      }
      if (other.RowSte.Length != 0) {
        RowSte = other.RowSte;
      }
      if (other.RowErr.Length != 0) {
        RowErr = other.RowErr;
      }
      if (other.RowUsr != 0UL) {
        RowUsr = other.RowUsr;
      }
      if (other.RowKey != 0UL) {
        RowKey = other.RowKey;
      }
      if (other.M != 0UL) {
        M = other.M;
      }
      if (other.kd_ != null) {
        if (kd_ == null || other.Kd != "") {
          Kd = other.Kd;
        }
      }
      if (other.ad_ != null) {
        if (ad_ == null || other.Ad != "") {
          Ad = other.Ad;
        }
      }
      if (other.info_ != null) {
        if (info_ == null || other.Info != "") {
          Info = other.Info;
        }
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            RowSte = input.ReadString();
            break;
          }
          case 18: {
            RowErr = input.ReadString();
            break;
          }
          case 24: {
            RowUsr = input.ReadUInt64();
            break;
          }
          case 32: {
            RowKey = input.ReadUInt64();
            break;
          }
          case 40: {
            M = input.ReadUInt64();
            break;
          }
          case 50: {
            string value = _single_kd_codec.Read(input);
            if (kd_ == null || value != "") {
              Kd = value;
            }
            break;
          }
          case 58: {
            string value = _single_ad_codec.Read(input);
            if (ad_ == null || value != "") {
              Ad = value;
            }
            break;
          }
          case 66: {
            string value = _single_info_codec.Read(input);
            if (info_ == null || value != "") {
              Info = value;
            }
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// KimDepartmanTanim
  /// </summary>
  public sealed partial class KDTproxy : pb::IMessage<KDTproxy> {
    private static readonly pb::MessageParser<KDTproxy> _parser = new pb::MessageParser<KDTproxy>(() => new KDTproxy());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<KDTproxy> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Rest.RestReflection.Descriptor.MessageTypes[28]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public KDTproxy() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public KDTproxy(KDTproxy other) : this() {
      rowSte_ = other.rowSte_;
      rowErr_ = other.rowErr_;
      rowUsr_ = other.rowUsr_;
      rowKey_ = other.rowKey_;
      Kd = other.Kd;
      Ad = other.Ad;
      Info = other.Info;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public KDTproxy Clone() {
      return new KDTproxy(this);
    }

    /// <summary>Field number for the "RowSte" field.</summary>
    public const int RowSteFieldNumber = 1;
    private string rowSte_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string RowSte {
      get { return rowSte_; }
      set {
        rowSte_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "RowErr" field.</summary>
    public const int RowErrFieldNumber = 2;
    private string rowErr_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string RowErr {
      get { return rowErr_; }
      set {
        rowErr_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "RowUsr" field.</summary>
    public const int RowUsrFieldNumber = 3;
    private ulong rowUsr_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong RowUsr {
      get { return rowUsr_; }
      set {
        rowUsr_ = value;
      }
    }

    /// <summary>Field number for the "RowKey" field.</summary>
    public const int RowKeyFieldNumber = 4;
    private ulong rowKey_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong RowKey {
      get { return rowKey_; }
      set {
        rowKey_ = value;
      }
    }

    /// <summary>Field number for the "Kd" field.</summary>
    public const int KdFieldNumber = 5;
    private static readonly pb::FieldCodec<string> _single_kd_codec = pb::FieldCodec.ForClassWrapper<string>(42);
    private string kd_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Kd {
      get { return kd_; }
      set {
        kd_ = value;
      }
    }

    /// <summary>Field number for the "Ad" field.</summary>
    public const int AdFieldNumber = 6;
    private static readonly pb::FieldCodec<string> _single_ad_codec = pb::FieldCodec.ForClassWrapper<string>(50);
    private string ad_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Ad {
      get { return ad_; }
      set {
        ad_ = value;
      }
    }

    /// <summary>Field number for the "info" field.</summary>
    public const int InfoFieldNumber = 7;
    private static readonly pb::FieldCodec<string> _single_info_codec = pb::FieldCodec.ForClassWrapper<string>(58);
    private string info_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Info {
      get { return info_; }
      set {
        info_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as KDTproxy);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(KDTproxy other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (RowSte != other.RowSte) return false;
      if (RowErr != other.RowErr) return false;
      if (RowUsr != other.RowUsr) return false;
      if (RowKey != other.RowKey) return false;
      if (Kd != other.Kd) return false;
      if (Ad != other.Ad) return false;
      if (Info != other.Info) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (RowSte.Length != 0) hash ^= RowSte.GetHashCode();
      if (RowErr.Length != 0) hash ^= RowErr.GetHashCode();
      if (RowUsr != 0UL) hash ^= RowUsr.GetHashCode();
      if (RowKey != 0UL) hash ^= RowKey.GetHashCode();
      if (kd_ != null) hash ^= Kd.GetHashCode();
      if (ad_ != null) hash ^= Ad.GetHashCode();
      if (info_ != null) hash ^= Info.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (RowSte.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(RowSte);
      }
      if (RowErr.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(RowErr);
      }
      if (RowUsr != 0UL) {
        output.WriteRawTag(24);
        output.WriteUInt64(RowUsr);
      }
      if (RowKey != 0UL) {
        output.WriteRawTag(32);
        output.WriteUInt64(RowKey);
      }
      if (kd_ != null) {
        _single_kd_codec.WriteTagAndValue(output, Kd);
      }
      if (ad_ != null) {
        _single_ad_codec.WriteTagAndValue(output, Ad);
      }
      if (info_ != null) {
        _single_info_codec.WriteTagAndValue(output, Info);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (RowSte.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(RowSte);
      }
      if (RowErr.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(RowErr);
      }
      if (RowUsr != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(RowUsr);
      }
      if (RowKey != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(RowKey);
      }
      if (kd_ != null) {
        size += _single_kd_codec.CalculateSizeWithTag(Kd);
      }
      if (ad_ != null) {
        size += _single_ad_codec.CalculateSizeWithTag(Ad);
      }
      if (info_ != null) {
        size += _single_info_codec.CalculateSizeWithTag(Info);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(KDTproxy other) {
      if (other == null) {
        return;
      }
      if (other.RowSte.Length != 0) {
        RowSte = other.RowSte;
      }
      if (other.RowErr.Length != 0) {
        RowErr = other.RowErr;
      }
      if (other.RowUsr != 0UL) {
        RowUsr = other.RowUsr;
      }
      if (other.RowKey != 0UL) {
        RowKey = other.RowKey;
      }
      if (other.kd_ != null) {
        if (kd_ == null || other.Kd != "") {
          Kd = other.Kd;
        }
      }
      if (other.ad_ != null) {
        if (ad_ == null || other.Ad != "") {
          Ad = other.Ad;
        }
      }
      if (other.info_ != null) {
        if (info_ == null || other.Info != "") {
          Info = other.Info;
        }
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            RowSte = input.ReadString();
            break;
          }
          case 18: {
            RowErr = input.ReadString();
            break;
          }
          case 24: {
            RowUsr = input.ReadUInt64();
            break;
          }
          case 32: {
            RowKey = input.ReadUInt64();
            break;
          }
          case 42: {
            string value = _single_kd_codec.Read(input);
            if (kd_ == null || value != "") {
              Kd = value;
            }
            break;
          }
          case 50: {
            string value = _single_ad_codec.Read(input);
            if (ad_ == null || value != "") {
              Ad = value;
            }
            break;
          }
          case 58: {
            string value = _single_info_codec.Read(input);
            if (info_ == null || value != "") {
              Info = value;
            }
            break;
          }
        }
      }
    }

  }

  public sealed partial class KDTtreeProxy : pb::IMessage<KDTtreeProxy> {
    private static readonly pb::MessageParser<KDTtreeProxy> _parser = new pb::MessageParser<KDTtreeProxy>(() => new KDTtreeProxy());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<KDTtreeProxy> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Rest.RestReflection.Descriptor.MessageTypes[29]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public KDTtreeProxy() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public KDTtreeProxy(KDTtreeProxy other) : this() {
      l_ = other.l_;
      p_ = other.p_;
      k_ = other.k_;
      a_ = other.a_;
      n_ = other.n_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public KDTtreeProxy Clone() {
      return new KDTtreeProxy(this);
    }

    /// <summary>Field number for the "L" field.</summary>
    public const int LFieldNumber = 1;
    private int l_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int L {
      get { return l_; }
      set {
        l_ = value;
      }
    }

    /// <summary>Field number for the "P" field.</summary>
    public const int PFieldNumber = 2;
    private ulong p_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong P {
      get { return p_; }
      set {
        p_ = value;
      }
    }

    /// <summary>Field number for the "K" field.</summary>
    public const int KFieldNumber = 3;
    private ulong k_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong K {
      get { return k_; }
      set {
        k_ = value;
      }
    }

    /// <summary>Field number for the "A" field.</summary>
    public const int AFieldNumber = 4;
    private string a_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string A {
      get { return a_; }
      set {
        a_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "N" field.</summary>
    public const int NFieldNumber = 5;
    private ulong n_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong N {
      get { return n_; }
      set {
        n_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as KDTtreeProxy);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(KDTtreeProxy other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (L != other.L) return false;
      if (P != other.P) return false;
      if (K != other.K) return false;
      if (A != other.A) return false;
      if (N != other.N) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (L != 0) hash ^= L.GetHashCode();
      if (P != 0UL) hash ^= P.GetHashCode();
      if (K != 0UL) hash ^= K.GetHashCode();
      if (A.Length != 0) hash ^= A.GetHashCode();
      if (N != 0UL) hash ^= N.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (L != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(L);
      }
      if (P != 0UL) {
        output.WriteRawTag(16);
        output.WriteUInt64(P);
      }
      if (K != 0UL) {
        output.WriteRawTag(24);
        output.WriteUInt64(K);
      }
      if (A.Length != 0) {
        output.WriteRawTag(34);
        output.WriteString(A);
      }
      if (N != 0UL) {
        output.WriteRawTag(40);
        output.WriteUInt64(N);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (L != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(L);
      }
      if (P != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(P);
      }
      if (K != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(K);
      }
      if (A.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(A);
      }
      if (N != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(N);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(KDTtreeProxy other) {
      if (other == null) {
        return;
      }
      if (other.L != 0) {
        L = other.L;
      }
      if (other.P != 0UL) {
        P = other.P;
      }
      if (other.K != 0UL) {
        K = other.K;
      }
      if (other.A.Length != 0) {
        A = other.A;
      }
      if (other.N != 0UL) {
        N = other.N;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            L = input.ReadInt32();
            break;
          }
          case 16: {
            P = input.ReadUInt64();
            break;
          }
          case 24: {
            K = input.ReadUInt64();
            break;
          }
          case 34: {
            A = input.ReadString();
            break;
          }
          case 40: {
            N = input.ReadUInt64();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// KimPersonelTanim
  /// </summary>
  public sealed partial class KPTproxy : pb::IMessage<KPTproxy> {
    private static readonly pb::MessageParser<KPTproxy> _parser = new pb::MessageParser<KPTproxy>(() => new KPTproxy());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<KPTproxy> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Rest.RestReflection.Descriptor.MessageTypes[30]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public KPTproxy() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public KPTproxy(KPTproxy other) : this() {
      rowSte_ = other.rowSte_;
      rowErr_ = other.rowErr_;
      rowUsr_ = other.rowUsr_;
      rowKey_ = other.rowKey_;
      Kd = other.Kd;
      Ad = other.Ad;
      Info = other.Info;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public KPTproxy Clone() {
      return new KPTproxy(this);
    }

    /// <summary>Field number for the "RowSte" field.</summary>
    public const int RowSteFieldNumber = 1;
    private string rowSte_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string RowSte {
      get { return rowSte_; }
      set {
        rowSte_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "RowErr" field.</summary>
    public const int RowErrFieldNumber = 2;
    private string rowErr_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string RowErr {
      get { return rowErr_; }
      set {
        rowErr_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "RowUsr" field.</summary>
    public const int RowUsrFieldNumber = 3;
    private ulong rowUsr_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong RowUsr {
      get { return rowUsr_; }
      set {
        rowUsr_ = value;
      }
    }

    /// <summary>Field number for the "RowKey" field.</summary>
    public const int RowKeyFieldNumber = 4;
    private ulong rowKey_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong RowKey {
      get { return rowKey_; }
      set {
        rowKey_ = value;
      }
    }

    /// <summary>Field number for the "Kd" field.</summary>
    public const int KdFieldNumber = 5;
    private static readonly pb::FieldCodec<string> _single_kd_codec = pb::FieldCodec.ForClassWrapper<string>(42);
    private string kd_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Kd {
      get { return kd_; }
      set {
        kd_ = value;
      }
    }

    /// <summary>Field number for the "Ad" field.</summary>
    public const int AdFieldNumber = 6;
    private static readonly pb::FieldCodec<string> _single_ad_codec = pb::FieldCodec.ForClassWrapper<string>(50);
    private string ad_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Ad {
      get { return ad_; }
      set {
        ad_ = value;
      }
    }

    /// <summary>Field number for the "info" field.</summary>
    public const int InfoFieldNumber = 7;
    private static readonly pb::FieldCodec<string> _single_info_codec = pb::FieldCodec.ForClassWrapper<string>(58);
    private string info_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Info {
      get { return info_; }
      set {
        info_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as KPTproxy);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(KPTproxy other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (RowSte != other.RowSte) return false;
      if (RowErr != other.RowErr) return false;
      if (RowUsr != other.RowUsr) return false;
      if (RowKey != other.RowKey) return false;
      if (Kd != other.Kd) return false;
      if (Ad != other.Ad) return false;
      if (Info != other.Info) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (RowSte.Length != 0) hash ^= RowSte.GetHashCode();
      if (RowErr.Length != 0) hash ^= RowErr.GetHashCode();
      if (RowUsr != 0UL) hash ^= RowUsr.GetHashCode();
      if (RowKey != 0UL) hash ^= RowKey.GetHashCode();
      if (kd_ != null) hash ^= Kd.GetHashCode();
      if (ad_ != null) hash ^= Ad.GetHashCode();
      if (info_ != null) hash ^= Info.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (RowSte.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(RowSte);
      }
      if (RowErr.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(RowErr);
      }
      if (RowUsr != 0UL) {
        output.WriteRawTag(24);
        output.WriteUInt64(RowUsr);
      }
      if (RowKey != 0UL) {
        output.WriteRawTag(32);
        output.WriteUInt64(RowKey);
      }
      if (kd_ != null) {
        _single_kd_codec.WriteTagAndValue(output, Kd);
      }
      if (ad_ != null) {
        _single_ad_codec.WriteTagAndValue(output, Ad);
      }
      if (info_ != null) {
        _single_info_codec.WriteTagAndValue(output, Info);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (RowSte.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(RowSte);
      }
      if (RowErr.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(RowErr);
      }
      if (RowUsr != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(RowUsr);
      }
      if (RowKey != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(RowKey);
      }
      if (kd_ != null) {
        size += _single_kd_codec.CalculateSizeWithTag(Kd);
      }
      if (ad_ != null) {
        size += _single_ad_codec.CalculateSizeWithTag(Ad);
      }
      if (info_ != null) {
        size += _single_info_codec.CalculateSizeWithTag(Info);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(KPTproxy other) {
      if (other == null) {
        return;
      }
      if (other.RowSte.Length != 0) {
        RowSte = other.RowSte;
      }
      if (other.RowErr.Length != 0) {
        RowErr = other.RowErr;
      }
      if (other.RowUsr != 0UL) {
        RowUsr = other.RowUsr;
      }
      if (other.RowKey != 0UL) {
        RowKey = other.RowKey;
      }
      if (other.kd_ != null) {
        if (kd_ == null || other.Kd != "") {
          Kd = other.Kd;
        }
      }
      if (other.ad_ != null) {
        if (ad_ == null || other.Ad != "") {
          Ad = other.Ad;
        }
      }
      if (other.info_ != null) {
        if (info_ == null || other.Info != "") {
          Info = other.Info;
        }
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            RowSte = input.ReadString();
            break;
          }
          case 18: {
            RowErr = input.ReadString();
            break;
          }
          case 24: {
            RowUsr = input.ReadUInt64();
            break;
          }
          case 32: {
            RowKey = input.ReadUInt64();
            break;
          }
          case 42: {
            string value = _single_kd_codec.Read(input);
            if (kd_ == null || value != "") {
              Kd = value;
            }
            break;
          }
          case 50: {
            string value = _single_ad_codec.Read(input);
            if (ad_ == null || value != "") {
              Ad = value;
            }
            break;
          }
          case 58: {
            string value = _single_info_codec.Read(input);
            if (info_ == null || value != "") {
              Info = value;
            }
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// KHT Master -> KimHaberlesmeTanim
  /// </summary>
  public sealed partial class KHTproxy : pb::IMessage<KHTproxy> {
    private static readonly pb::MessageParser<KHTproxy> _parser = new pb::MessageParser<KHTproxy>(() => new KHTproxy());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<KHTproxy> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Rest.RestReflection.Descriptor.MessageTypes[31]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public KHTproxy() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public KHTproxy(KHTproxy other) : this() {
      rowSte_ = other.rowSte_;
      rowErr_ = other.rowErr_;
      rowUsr_ = other.rowUsr_;
      rowKey_ = other.rowKey_;
      m_ = other.m_;
      Kd = other.Kd;
      Ad = other.Ad;
      Info = other.Info;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public KHTproxy Clone() {
      return new KHTproxy(this);
    }

    /// <summary>Field number for the "RowSte" field.</summary>
    public const int RowSteFieldNumber = 1;
    private string rowSte_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string RowSte {
      get { return rowSte_; }
      set {
        rowSte_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "RowErr" field.</summary>
    public const int RowErrFieldNumber = 2;
    private string rowErr_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string RowErr {
      get { return rowErr_; }
      set {
        rowErr_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "RowUsr" field.</summary>
    public const int RowUsrFieldNumber = 3;
    private ulong rowUsr_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong RowUsr {
      get { return rowUsr_; }
      set {
        rowUsr_ = value;
      }
    }

    /// <summary>Field number for the "RowKey" field.</summary>
    public const int RowKeyFieldNumber = 4;
    private ulong rowKey_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong RowKey {
      get { return rowKey_; }
      set {
        rowKey_ = value;
      }
    }

    /// <summary>Field number for the "M" field.</summary>
    public const int MFieldNumber = 5;
    private ulong m_;
    /// <summary>
    /// Masters are KDT,KPT,KFT,KCT,
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong M {
      get { return m_; }
      set {
        m_ = value;
      }
    }

    /// <summary>Field number for the "Kd" field.</summary>
    public const int KdFieldNumber = 6;
    private static readonly pb::FieldCodec<string> _single_kd_codec = pb::FieldCodec.ForClassWrapper<string>(50);
    private string kd_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Kd {
      get { return kd_; }
      set {
        kd_ = value;
      }
    }

    /// <summary>Field number for the "Ad" field.</summary>
    public const int AdFieldNumber = 7;
    private static readonly pb::FieldCodec<string> _single_ad_codec = pb::FieldCodec.ForClassWrapper<string>(58);
    private string ad_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Ad {
      get { return ad_; }
      set {
        ad_ = value;
      }
    }

    /// <summary>Field number for the "info" field.</summary>
    public const int InfoFieldNumber = 8;
    private static readonly pb::FieldCodec<string> _single_info_codec = pb::FieldCodec.ForClassWrapper<string>(66);
    private string info_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Info {
      get { return info_; }
      set {
        info_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as KHTproxy);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(KHTproxy other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (RowSte != other.RowSte) return false;
      if (RowErr != other.RowErr) return false;
      if (RowUsr != other.RowUsr) return false;
      if (RowKey != other.RowKey) return false;
      if (M != other.M) return false;
      if (Kd != other.Kd) return false;
      if (Ad != other.Ad) return false;
      if (Info != other.Info) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (RowSte.Length != 0) hash ^= RowSte.GetHashCode();
      if (RowErr.Length != 0) hash ^= RowErr.GetHashCode();
      if (RowUsr != 0UL) hash ^= RowUsr.GetHashCode();
      if (RowKey != 0UL) hash ^= RowKey.GetHashCode();
      if (M != 0UL) hash ^= M.GetHashCode();
      if (kd_ != null) hash ^= Kd.GetHashCode();
      if (ad_ != null) hash ^= Ad.GetHashCode();
      if (info_ != null) hash ^= Info.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (RowSte.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(RowSte);
      }
      if (RowErr.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(RowErr);
      }
      if (RowUsr != 0UL) {
        output.WriteRawTag(24);
        output.WriteUInt64(RowUsr);
      }
      if (RowKey != 0UL) {
        output.WriteRawTag(32);
        output.WriteUInt64(RowKey);
      }
      if (M != 0UL) {
        output.WriteRawTag(40);
        output.WriteUInt64(M);
      }
      if (kd_ != null) {
        _single_kd_codec.WriteTagAndValue(output, Kd);
      }
      if (ad_ != null) {
        _single_ad_codec.WriteTagAndValue(output, Ad);
      }
      if (info_ != null) {
        _single_info_codec.WriteTagAndValue(output, Info);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (RowSte.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(RowSte);
      }
      if (RowErr.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(RowErr);
      }
      if (RowUsr != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(RowUsr);
      }
      if (RowKey != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(RowKey);
      }
      if (M != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(M);
      }
      if (kd_ != null) {
        size += _single_kd_codec.CalculateSizeWithTag(Kd);
      }
      if (ad_ != null) {
        size += _single_ad_codec.CalculateSizeWithTag(Ad);
      }
      if (info_ != null) {
        size += _single_info_codec.CalculateSizeWithTag(Info);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(KHTproxy other) {
      if (other == null) {
        return;
      }
      if (other.RowSte.Length != 0) {
        RowSte = other.RowSte;
      }
      if (other.RowErr.Length != 0) {
        RowErr = other.RowErr;
      }
      if (other.RowUsr != 0UL) {
        RowUsr = other.RowUsr;
      }
      if (other.RowKey != 0UL) {
        RowKey = other.RowKey;
      }
      if (other.M != 0UL) {
        M = other.M;
      }
      if (other.kd_ != null) {
        if (kd_ == null || other.Kd != "") {
          Kd = other.Kd;
        }
      }
      if (other.ad_ != null) {
        if (ad_ == null || other.Ad != "") {
          Ad = other.Ad;
        }
      }
      if (other.info_ != null) {
        if (info_ == null || other.Info != "") {
          Info = other.Info;
        }
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            RowSte = input.ReadString();
            break;
          }
          case 18: {
            RowErr = input.ReadString();
            break;
          }
          case 24: {
            RowUsr = input.ReadUInt64();
            break;
          }
          case 32: {
            RowKey = input.ReadUInt64();
            break;
          }
          case 40: {
            M = input.ReadUInt64();
            break;
          }
          case 50: {
            string value = _single_kd_codec.Read(input);
            if (kd_ == null || value != "") {
              Kd = value;
            }
            break;
          }
          case 58: {
            string value = _single_ad_codec.Read(input);
            if (ad_ == null || value != "") {
              Ad = value;
            }
            break;
          }
          case 66: {
            string value = _single_info_codec.Read(input);
            if (info_ == null || value != "") {
              Info = value;
            }
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// GenelTanimlari
  /// </summary>
  public sealed partial class XGTproxy : pb::IMessage<XGTproxy> {
    private static readonly pb::MessageParser<XGTproxy> _parser = new pb::MessageParser<XGTproxy>(() => new XGTproxy());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<XGTproxy> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Rest.RestReflection.Descriptor.MessageTypes[32]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public XGTproxy() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public XGTproxy(XGTproxy other) : this() {
      rowSte_ = other.rowSte_;
      rowErr_ = other.rowErr_;
      rowUsr_ = other.rowUsr_;
      rowKey_ = other.rowKey_;
      p_ = other.p_;
      kd_ = other.kd_;
      ad_ = other.ad_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public XGTproxy Clone() {
      return new XGTproxy(this);
    }

    /// <summary>Field number for the "RowSte" field.</summary>
    public const int RowSteFieldNumber = 1;
    private string rowSte_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string RowSte {
      get { return rowSte_; }
      set {
        rowSte_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "RowErr" field.</summary>
    public const int RowErrFieldNumber = 2;
    private string rowErr_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string RowErr {
      get { return rowErr_; }
      set {
        rowErr_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "RowUsr" field.</summary>
    public const int RowUsrFieldNumber = 3;
    private ulong rowUsr_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong RowUsr {
      get { return rowUsr_; }
      set {
        rowUsr_ = value;
      }
    }

    /// <summary>Field number for the "RowKey" field.</summary>
    public const int RowKeyFieldNumber = 4;
    private ulong rowKey_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong RowKey {
      get { return rowKey_; }
      set {
        rowKey_ = value;
      }
    }

    /// <summary>Field number for the "P" field.</summary>
    public const int PFieldNumber = 5;
    private ulong p_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong P {
      get { return p_; }
      set {
        p_ = value;
      }
    }

    /// <summary>Field number for the "Kd" field.</summary>
    public const int KdFieldNumber = 6;
    private string kd_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Kd {
      get { return kd_; }
      set {
        kd_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "Ad" field.</summary>
    public const int AdFieldNumber = 7;
    private string ad_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Ad {
      get { return ad_; }
      set {
        ad_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as XGTproxy);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(XGTproxy other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (RowSte != other.RowSte) return false;
      if (RowErr != other.RowErr) return false;
      if (RowUsr != other.RowUsr) return false;
      if (RowKey != other.RowKey) return false;
      if (P != other.P) return false;
      if (Kd != other.Kd) return false;
      if (Ad != other.Ad) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (RowSte.Length != 0) hash ^= RowSte.GetHashCode();
      if (RowErr.Length != 0) hash ^= RowErr.GetHashCode();
      if (RowUsr != 0UL) hash ^= RowUsr.GetHashCode();
      if (RowKey != 0UL) hash ^= RowKey.GetHashCode();
      if (P != 0UL) hash ^= P.GetHashCode();
      if (Kd.Length != 0) hash ^= Kd.GetHashCode();
      if (Ad.Length != 0) hash ^= Ad.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (RowSte.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(RowSte);
      }
      if (RowErr.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(RowErr);
      }
      if (RowUsr != 0UL) {
        output.WriteRawTag(24);
        output.WriteUInt64(RowUsr);
      }
      if (RowKey != 0UL) {
        output.WriteRawTag(32);
        output.WriteUInt64(RowKey);
      }
      if (P != 0UL) {
        output.WriteRawTag(40);
        output.WriteUInt64(P);
      }
      if (Kd.Length != 0) {
        output.WriteRawTag(50);
        output.WriteString(Kd);
      }
      if (Ad.Length != 0) {
        output.WriteRawTag(58);
        output.WriteString(Ad);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (RowSte.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(RowSte);
      }
      if (RowErr.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(RowErr);
      }
      if (RowUsr != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(RowUsr);
      }
      if (RowKey != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(RowKey);
      }
      if (P != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(P);
      }
      if (Kd.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Kd);
      }
      if (Ad.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Ad);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(XGTproxy other) {
      if (other == null) {
        return;
      }
      if (other.RowSte.Length != 0) {
        RowSte = other.RowSte;
      }
      if (other.RowErr.Length != 0) {
        RowErr = other.RowErr;
      }
      if (other.RowUsr != 0UL) {
        RowUsr = other.RowUsr;
      }
      if (other.RowKey != 0UL) {
        RowKey = other.RowKey;
      }
      if (other.P != 0UL) {
        P = other.P;
      }
      if (other.Kd.Length != 0) {
        Kd = other.Kd;
      }
      if (other.Ad.Length != 0) {
        Ad = other.Ad;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            RowSte = input.ReadString();
            break;
          }
          case 18: {
            RowErr = input.ReadString();
            break;
          }
          case 24: {
            RowUsr = input.ReadUInt64();
            break;
          }
          case 32: {
            RowKey = input.ReadUInt64();
            break;
          }
          case 40: {
            P = input.ReadUInt64();
            break;
          }
          case 50: {
            Kd = input.ReadString();
            break;
          }
          case 58: {
            Ad = input.ReadString();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// DovizKurlari
  /// </summary>
  public sealed partial class XDKproxy : pb::IMessage<XDKproxy> {
    private static readonly pb::MessageParser<XDKproxy> _parser = new pb::MessageParser<XDKproxy>(() => new XDKproxy());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<XDKproxy> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Rest.RestReflection.Descriptor.MessageTypes[33]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public XDKproxy() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public XDKproxy(XDKproxy other) : this() {
      rowSte_ = other.rowSte_;
      rowErr_ = other.rowErr_;
      rowUsr_ = other.rowUsr_;
      rowKey_ = other.rowKey_;
      trh_ = other.trh_;
      dVT_ = other.dVT_;
      kur_ = other.kur_;
      dvz_ = other.dvz_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public XDKproxy Clone() {
      return new XDKproxy(this);
    }

    /// <summary>Field number for the "RowSte" field.</summary>
    public const int RowSteFieldNumber = 1;
    private string rowSte_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string RowSte {
      get { return rowSte_; }
      set {
        rowSte_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "RowErr" field.</summary>
    public const int RowErrFieldNumber = 2;
    private string rowErr_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string RowErr {
      get { return rowErr_; }
      set {
        rowErr_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "RowUsr" field.</summary>
    public const int RowUsrFieldNumber = 3;
    private ulong rowUsr_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong RowUsr {
      get { return rowUsr_; }
      set {
        rowUsr_ = value;
      }
    }

    /// <summary>Field number for the "RowKey" field.</summary>
    public const int RowKeyFieldNumber = 4;
    private ulong rowKey_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong RowKey {
      get { return rowKey_; }
      set {
        rowKey_ = value;
      }
    }

    /// <summary>Field number for the "Trh" field.</summary>
    public const int TrhFieldNumber = 5;
    private long trh_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long Trh {
      get { return trh_; }
      set {
        trh_ = value;
      }
    }

    /// <summary>Field number for the "DVT" field.</summary>
    public const int DVTFieldNumber = 6;
    private ulong dVT_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong DVT {
      get { return dVT_; }
      set {
        dVT_ = value;
      }
    }

    /// <summary>Field number for the "Kur" field.</summary>
    public const int KurFieldNumber = 7;
    private float kur_;
    /// <summary>
    /// Dovizin TRL karsiligi
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float Kur {
      get { return kur_; }
      set {
        kur_ = value;
      }
    }

    /// <summary>Field number for the "Dvz" field.</summary>
    public const int DvzFieldNumber = 8;
    private string dvz_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Dvz {
      get { return dvz_; }
      set {
        dvz_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as XDKproxy);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(XDKproxy other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (RowSte != other.RowSte) return false;
      if (RowErr != other.RowErr) return false;
      if (RowUsr != other.RowUsr) return false;
      if (RowKey != other.RowKey) return false;
      if (Trh != other.Trh) return false;
      if (DVT != other.DVT) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(Kur, other.Kur)) return false;
      if (Dvz != other.Dvz) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (RowSte.Length != 0) hash ^= RowSte.GetHashCode();
      if (RowErr.Length != 0) hash ^= RowErr.GetHashCode();
      if (RowUsr != 0UL) hash ^= RowUsr.GetHashCode();
      if (RowKey != 0UL) hash ^= RowKey.GetHashCode();
      if (Trh != 0L) hash ^= Trh.GetHashCode();
      if (DVT != 0UL) hash ^= DVT.GetHashCode();
      if (Kur != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(Kur);
      if (Dvz.Length != 0) hash ^= Dvz.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (RowSte.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(RowSte);
      }
      if (RowErr.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(RowErr);
      }
      if (RowUsr != 0UL) {
        output.WriteRawTag(24);
        output.WriteUInt64(RowUsr);
      }
      if (RowKey != 0UL) {
        output.WriteRawTag(32);
        output.WriteUInt64(RowKey);
      }
      if (Trh != 0L) {
        output.WriteRawTag(40);
        output.WriteInt64(Trh);
      }
      if (DVT != 0UL) {
        output.WriteRawTag(48);
        output.WriteUInt64(DVT);
      }
      if (Kur != 0F) {
        output.WriteRawTag(61);
        output.WriteFloat(Kur);
      }
      if (Dvz.Length != 0) {
        output.WriteRawTag(66);
        output.WriteString(Dvz);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (RowSte.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(RowSte);
      }
      if (RowErr.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(RowErr);
      }
      if (RowUsr != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(RowUsr);
      }
      if (RowKey != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(RowKey);
      }
      if (Trh != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(Trh);
      }
      if (DVT != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(DVT);
      }
      if (Kur != 0F) {
        size += 1 + 4;
      }
      if (Dvz.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Dvz);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(XDKproxy other) {
      if (other == null) {
        return;
      }
      if (other.RowSte.Length != 0) {
        RowSte = other.RowSte;
      }
      if (other.RowErr.Length != 0) {
        RowErr = other.RowErr;
      }
      if (other.RowUsr != 0UL) {
        RowUsr = other.RowUsr;
      }
      if (other.RowKey != 0UL) {
        RowKey = other.RowKey;
      }
      if (other.Trh != 0L) {
        Trh = other.Trh;
      }
      if (other.DVT != 0UL) {
        DVT = other.DVT;
      }
      if (other.Kur != 0F) {
        Kur = other.Kur;
      }
      if (other.Dvz.Length != 0) {
        Dvz = other.Dvz;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            RowSte = input.ReadString();
            break;
          }
          case 18: {
            RowErr = input.ReadString();
            break;
          }
          case 24: {
            RowUsr = input.ReadUInt64();
            break;
          }
          case 32: {
            RowKey = input.ReadUInt64();
            break;
          }
          case 40: {
            Trh = input.ReadInt64();
            break;
          }
          case 48: {
            DVT = input.ReadUInt64();
            break;
          }
          case 61: {
            Kur = input.ReadFloat();
            break;
          }
          case 66: {
            Dvz = input.ReadString();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// User
  /// </summary>
  public sealed partial class UUUproxy : pb::IMessage<UUUproxy> {
    private static readonly pb::MessageParser<UUUproxy> _parser = new pb::MessageParser<UUUproxy>(() => new UUUproxy());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<UUUproxy> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Rest.RestReflection.Descriptor.MessageTypes[34]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public UUUproxy() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public UUUproxy(UUUproxy other) : this() {
      rowSte_ = other.rowSte_;
      rowErr_ = other.rowErr_;
      rowUsr_ = other.rowUsr_;
      rowKey_ = other.rowKey_;
      uYT_ = other.uYT_;
      ad_ = other.ad_;
      pwd_ = other.pwd_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public UUUproxy Clone() {
      return new UUUproxy(this);
    }

    /// <summary>Field number for the "RowSte" field.</summary>
    public const int RowSteFieldNumber = 1;
    private string rowSte_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string RowSte {
      get { return rowSte_; }
      set {
        rowSte_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "RowErr" field.</summary>
    public const int RowErrFieldNumber = 2;
    private string rowErr_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string RowErr {
      get { return rowErr_; }
      set {
        rowErr_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "RowUsr" field.</summary>
    public const int RowUsrFieldNumber = 3;
    private ulong rowUsr_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong RowUsr {
      get { return rowUsr_; }
      set {
        rowUsr_ = value;
      }
    }

    /// <summary>Field number for the "RowKey" field.</summary>
    public const int RowKeyFieldNumber = 4;
    private ulong rowKey_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong RowKey {
      get { return rowKey_; }
      set {
        rowKey_ = value;
      }
    }

    /// <summary>Field number for the "UYT" field.</summary>
    public const int UYTFieldNumber = 5;
    private ulong uYT_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong UYT {
      get { return uYT_; }
      set {
        uYT_ = value;
      }
    }

    /// <summary>Field number for the "Ad" field.</summary>
    public const int AdFieldNumber = 6;
    private string ad_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Ad {
      get { return ad_; }
      set {
        ad_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "Pwd" field.</summary>
    public const int PwdFieldNumber = 7;
    private string pwd_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Pwd {
      get { return pwd_; }
      set {
        pwd_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as UUUproxy);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(UUUproxy other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (RowSte != other.RowSte) return false;
      if (RowErr != other.RowErr) return false;
      if (RowUsr != other.RowUsr) return false;
      if (RowKey != other.RowKey) return false;
      if (UYT != other.UYT) return false;
      if (Ad != other.Ad) return false;
      if (Pwd != other.Pwd) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (RowSte.Length != 0) hash ^= RowSte.GetHashCode();
      if (RowErr.Length != 0) hash ^= RowErr.GetHashCode();
      if (RowUsr != 0UL) hash ^= RowUsr.GetHashCode();
      if (RowKey != 0UL) hash ^= RowKey.GetHashCode();
      if (UYT != 0UL) hash ^= UYT.GetHashCode();
      if (Ad.Length != 0) hash ^= Ad.GetHashCode();
      if (Pwd.Length != 0) hash ^= Pwd.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (RowSte.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(RowSte);
      }
      if (RowErr.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(RowErr);
      }
      if (RowUsr != 0UL) {
        output.WriteRawTag(24);
        output.WriteUInt64(RowUsr);
      }
      if (RowKey != 0UL) {
        output.WriteRawTag(32);
        output.WriteUInt64(RowKey);
      }
      if (UYT != 0UL) {
        output.WriteRawTag(40);
        output.WriteUInt64(UYT);
      }
      if (Ad.Length != 0) {
        output.WriteRawTag(50);
        output.WriteString(Ad);
      }
      if (Pwd.Length != 0) {
        output.WriteRawTag(58);
        output.WriteString(Pwd);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (RowSte.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(RowSte);
      }
      if (RowErr.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(RowErr);
      }
      if (RowUsr != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(RowUsr);
      }
      if (RowKey != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(RowKey);
      }
      if (UYT != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(UYT);
      }
      if (Ad.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Ad);
      }
      if (Pwd.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Pwd);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(UUUproxy other) {
      if (other == null) {
        return;
      }
      if (other.RowSte.Length != 0) {
        RowSte = other.RowSte;
      }
      if (other.RowErr.Length != 0) {
        RowErr = other.RowErr;
      }
      if (other.RowUsr != 0UL) {
        RowUsr = other.RowUsr;
      }
      if (other.RowKey != 0UL) {
        RowKey = other.RowKey;
      }
      if (other.UYT != 0UL) {
        UYT = other.UYT;
      }
      if (other.Ad.Length != 0) {
        Ad = other.Ad;
      }
      if (other.Pwd.Length != 0) {
        Pwd = other.Pwd;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            RowSte = input.ReadString();
            break;
          }
          case 18: {
            RowErr = input.ReadString();
            break;
          }
          case 24: {
            RowUsr = input.ReadUInt64();
            break;
          }
          case 32: {
            RowKey = input.ReadUInt64();
            break;
          }
          case 40: {
            UYT = input.ReadUInt64();
            break;
          }
          case 50: {
            Ad = input.ReadString();
            break;
          }
          case 58: {
            Pwd = input.ReadString();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// UserYetkiTanimlari
  /// </summary>
  public sealed partial class UYTproxy : pb::IMessage<UYTproxy> {
    private static readonly pb::MessageParser<UYTproxy> _parser = new pb::MessageParser<UYTproxy>(() => new UYTproxy());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<UYTproxy> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Rest.RestReflection.Descriptor.MessageTypes[35]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public UYTproxy() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public UYTproxy(UYTproxy other) : this() {
      rowSte_ = other.rowSte_;
      rowErr_ = other.rowErr_;
      rowUsr_ = other.rowUsr_;
      rowKey_ = other.rowKey_;
      ad_ = other.ad_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public UYTproxy Clone() {
      return new UYTproxy(this);
    }

    /// <summary>Field number for the "RowSte" field.</summary>
    public const int RowSteFieldNumber = 1;
    private string rowSte_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string RowSte {
      get { return rowSte_; }
      set {
        rowSte_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "RowErr" field.</summary>
    public const int RowErrFieldNumber = 2;
    private string rowErr_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string RowErr {
      get { return rowErr_; }
      set {
        rowErr_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "RowUsr" field.</summary>
    public const int RowUsrFieldNumber = 3;
    private ulong rowUsr_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong RowUsr {
      get { return rowUsr_; }
      set {
        rowUsr_ = value;
      }
    }

    /// <summary>Field number for the "RowKey" field.</summary>
    public const int RowKeyFieldNumber = 4;
    private ulong rowKey_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong RowKey {
      get { return rowKey_; }
      set {
        rowKey_ = value;
      }
    }

    /// <summary>Field number for the "Ad" field.</summary>
    public const int AdFieldNumber = 5;
    private string ad_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Ad {
      get { return ad_; }
      set {
        ad_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as UYTproxy);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(UYTproxy other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (RowSte != other.RowSte) return false;
      if (RowErr != other.RowErr) return false;
      if (RowUsr != other.RowUsr) return false;
      if (RowKey != other.RowKey) return false;
      if (Ad != other.Ad) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (RowSte.Length != 0) hash ^= RowSte.GetHashCode();
      if (RowErr.Length != 0) hash ^= RowErr.GetHashCode();
      if (RowUsr != 0UL) hash ^= RowUsr.GetHashCode();
      if (RowKey != 0UL) hash ^= RowKey.GetHashCode();
      if (Ad.Length != 0) hash ^= Ad.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (RowSte.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(RowSte);
      }
      if (RowErr.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(RowErr);
      }
      if (RowUsr != 0UL) {
        output.WriteRawTag(24);
        output.WriteUInt64(RowUsr);
      }
      if (RowKey != 0UL) {
        output.WriteRawTag(32);
        output.WriteUInt64(RowKey);
      }
      if (Ad.Length != 0) {
        output.WriteRawTag(42);
        output.WriteString(Ad);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (RowSte.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(RowSte);
      }
      if (RowErr.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(RowErr);
      }
      if (RowUsr != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(RowUsr);
      }
      if (RowKey != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(RowKey);
      }
      if (Ad.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Ad);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(UYTproxy other) {
      if (other == null) {
        return;
      }
      if (other.RowSte.Length != 0) {
        RowSte = other.RowSte;
      }
      if (other.RowErr.Length != 0) {
        RowErr = other.RowErr;
      }
      if (other.RowUsr != 0UL) {
        RowUsr = other.RowUsr;
      }
      if (other.RowKey != 0UL) {
        RowKey = other.RowKey;
      }
      if (other.Ad.Length != 0) {
        Ad = other.Ad;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            RowSte = input.ReadString();
            break;
          }
          case 18: {
            RowErr = input.ReadString();
            break;
          }
          case 24: {
            RowUsr = input.ReadUInt64();
            break;
          }
          case 32: {
            RowKey = input.ReadUInt64();
            break;
          }
          case 42: {
            Ad = input.ReadString();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// UserYetkiHiyerarsi
  /// </summary>
  public sealed partial class UYHproxy : pb::IMessage<UYHproxy> {
    private static readonly pb::MessageParser<UYHproxy> _parser = new pb::MessageParser<UYHproxy>(() => new UYHproxy());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<UYHproxy> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Rest.RestReflection.Descriptor.MessageTypes[36]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public UYHproxy() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public UYHproxy(UYHproxy other) : this() {
      rowSte_ = other.rowSte_;
      rowErr_ = other.rowErr_;
      rowUsr_ = other.rowUsr_;
      rowKey_ = other.rowKey_;
      p_ = other.p_;
      k_ = other.k_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public UYHproxy Clone() {
      return new UYHproxy(this);
    }

    /// <summary>Field number for the "RowSte" field.</summary>
    public const int RowSteFieldNumber = 1;
    private string rowSte_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string RowSte {
      get { return rowSte_; }
      set {
        rowSte_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "RowErr" field.</summary>
    public const int RowErrFieldNumber = 2;
    private string rowErr_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string RowErr {
      get { return rowErr_; }
      set {
        rowErr_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "RowUsr" field.</summary>
    public const int RowUsrFieldNumber = 3;
    private ulong rowUsr_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong RowUsr {
      get { return rowUsr_; }
      set {
        rowUsr_ = value;
      }
    }

    /// <summary>Field number for the "RowKey" field.</summary>
    public const int RowKeyFieldNumber = 4;
    private ulong rowKey_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong RowKey {
      get { return rowKey_; }
      set {
        rowKey_ = value;
      }
    }

    /// <summary>Field number for the "P" field.</summary>
    public const int PFieldNumber = 5;
    private ulong p_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong P {
      get { return p_; }
      set {
        p_ = value;
      }
    }

    /// <summary>Field number for the "K" field.</summary>
    public const int KFieldNumber = 6;
    private ulong k_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong K {
      get { return k_; }
      set {
        k_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as UYHproxy);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(UYHproxy other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (RowSte != other.RowSte) return false;
      if (RowErr != other.RowErr) return false;
      if (RowUsr != other.RowUsr) return false;
      if (RowKey != other.RowKey) return false;
      if (P != other.P) return false;
      if (K != other.K) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (RowSte.Length != 0) hash ^= RowSte.GetHashCode();
      if (RowErr.Length != 0) hash ^= RowErr.GetHashCode();
      if (RowUsr != 0UL) hash ^= RowUsr.GetHashCode();
      if (RowKey != 0UL) hash ^= RowKey.GetHashCode();
      if (P != 0UL) hash ^= P.GetHashCode();
      if (K != 0UL) hash ^= K.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (RowSte.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(RowSte);
      }
      if (RowErr.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(RowErr);
      }
      if (RowUsr != 0UL) {
        output.WriteRawTag(24);
        output.WriteUInt64(RowUsr);
      }
      if (RowKey != 0UL) {
        output.WriteRawTag(32);
        output.WriteUInt64(RowKey);
      }
      if (P != 0UL) {
        output.WriteRawTag(40);
        output.WriteUInt64(P);
      }
      if (K != 0UL) {
        output.WriteRawTag(48);
        output.WriteUInt64(K);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (RowSte.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(RowSte);
      }
      if (RowErr.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(RowErr);
      }
      if (RowUsr != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(RowUsr);
      }
      if (RowKey != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(RowKey);
      }
      if (P != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(P);
      }
      if (K != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(K);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(UYHproxy other) {
      if (other == null) {
        return;
      }
      if (other.RowSte.Length != 0) {
        RowSte = other.RowSte;
      }
      if (other.RowErr.Length != 0) {
        RowErr = other.RowErr;
      }
      if (other.RowUsr != 0UL) {
        RowUsr = other.RowUsr;
      }
      if (other.RowKey != 0UL) {
        RowKey = other.RowKey;
      }
      if (other.P != 0UL) {
        P = other.P;
      }
      if (other.K != 0UL) {
        K = other.K;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            RowSte = input.ReadString();
            break;
          }
          case 18: {
            RowErr = input.ReadString();
            break;
          }
          case 24: {
            RowUsr = input.ReadUInt64();
            break;
          }
          case 32: {
            RowKey = input.ReadUInt64();
            break;
          }
          case 40: {
            P = input.ReadUInt64();
            break;
          }
          case 48: {
            K = input.ReadUInt64();
            break;
          }
        }
      }
    }

  }

  #endregion

}

#endregion Designer generated code
