// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: protos/rest.proto
// </auto-generated>
// Original file comments:
// Copyright 2015 gRPC authors.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
#pragma warning disable 1591
#region Designer generated code

using grpc = global::Grpc.Core;

namespace Rest {
  /// <summary>
  /// The CRUDs service definition.
  /// </summary>
  public static partial class CRUDs
  {
    static readonly string __ServiceName = "rest.CRUDs";

    static readonly grpc::Marshaller<global::Rest.TblaQry> __Marshaller_TblaQry = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Rest.TblaQry.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Rest.TblaRec> __Marshaller_TblaRec = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Rest.TblaRec.Parser.ParseFrom);

    static readonly grpc::Method<global::Rest.TblaQry, global::Rest.TblaRec> __Method_SelectTbla = new grpc::Method<global::Rest.TblaQry, global::Rest.TblaRec>(
        grpc::MethodType.ServerStreaming,
        __ServiceName,
        "SelectTbla",
        __Marshaller_TblaQry,
        __Marshaller_TblaRec);

    static readonly grpc::Method<global::Rest.TblaRec, global::Rest.TblaRec> __Method_InsertTbla = new grpc::Method<global::Rest.TblaRec, global::Rest.TblaRec>(
        grpc::MethodType.Unary,
        __ServiceName,
        "InsertTbla",
        __Marshaller_TblaRec,
        __Marshaller_TblaRec);

    static readonly grpc::Method<global::Rest.TblaRec, global::Rest.TblaRec> __Method_UpdateTbla = new grpc::Method<global::Rest.TblaRec, global::Rest.TblaRec>(
        grpc::MethodType.Unary,
        __ServiceName,
        "UpdateTbla",
        __Marshaller_TblaRec,
        __Marshaller_TblaRec);

    static readonly grpc::Method<global::Rest.TblaRec, global::Rest.TblaRec> __Method_DeleteTbla = new grpc::Method<global::Rest.TblaRec, global::Rest.TblaRec>(
        grpc::MethodType.Unary,
        __ServiceName,
        "DeleteTbla",
        __Marshaller_TblaRec,
        __Marshaller_TblaRec);

    /// <summary>Service descriptor</summary>
    public static global::Google.Protobuf.Reflection.ServiceDescriptor Descriptor
    {
      get { return global::Rest.RestReflection.Descriptor.Services[0]; }
    }

    /// <summary>Base class for server-side implementations of CRUDs</summary>
    public abstract partial class CRUDsBase
    {
      public virtual global::System.Threading.Tasks.Task SelectTbla(global::Rest.TblaQry request, grpc::IServerStreamWriter<global::Rest.TblaRec> responseStream, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      public virtual global::System.Threading.Tasks.Task<global::Rest.TblaRec> InsertTbla(global::Rest.TblaRec request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      public virtual global::System.Threading.Tasks.Task<global::Rest.TblaRec> UpdateTbla(global::Rest.TblaRec request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      public virtual global::System.Threading.Tasks.Task<global::Rest.TblaRec> DeleteTbla(global::Rest.TblaRec request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

    }

    /// <summary>Client for CRUDs</summary>
    public partial class CRUDsClient : grpc::ClientBase<CRUDsClient>
    {
      /// <summary>Creates a new client for CRUDs</summary>
      /// <param name="channel">The channel to use to make remote calls.</param>
      public CRUDsClient(grpc::Channel channel) : base(channel)
      {
      }
      /// <summary>Creates a new client for CRUDs that uses a custom <c>CallInvoker</c>.</summary>
      /// <param name="callInvoker">The callInvoker to use to make remote calls.</param>
      public CRUDsClient(grpc::CallInvoker callInvoker) : base(callInvoker)
      {
      }
      /// <summary>Protected parameterless constructor to allow creation of test doubles.</summary>
      protected CRUDsClient() : base()
      {
      }
      /// <summary>Protected constructor to allow creation of configured clients.</summary>
      /// <param name="configuration">The client configuration.</param>
      protected CRUDsClient(ClientBaseConfiguration configuration) : base(configuration)
      {
      }

      public virtual grpc::AsyncServerStreamingCall<global::Rest.TblaRec> SelectTbla(global::Rest.TblaQry request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return SelectTbla(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual grpc::AsyncServerStreamingCall<global::Rest.TblaRec> SelectTbla(global::Rest.TblaQry request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncServerStreamingCall(__Method_SelectTbla, null, options, request);
      }
      public virtual global::Rest.TblaRec InsertTbla(global::Rest.TblaRec request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return InsertTbla(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual global::Rest.TblaRec InsertTbla(global::Rest.TblaRec request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_InsertTbla, null, options, request);
      }
      public virtual grpc::AsyncUnaryCall<global::Rest.TblaRec> InsertTblaAsync(global::Rest.TblaRec request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return InsertTblaAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual grpc::AsyncUnaryCall<global::Rest.TblaRec> InsertTblaAsync(global::Rest.TblaRec request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_InsertTbla, null, options, request);
      }
      public virtual global::Rest.TblaRec UpdateTbla(global::Rest.TblaRec request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return UpdateTbla(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual global::Rest.TblaRec UpdateTbla(global::Rest.TblaRec request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_UpdateTbla, null, options, request);
      }
      public virtual grpc::AsyncUnaryCall<global::Rest.TblaRec> UpdateTblaAsync(global::Rest.TblaRec request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return UpdateTblaAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual grpc::AsyncUnaryCall<global::Rest.TblaRec> UpdateTblaAsync(global::Rest.TblaRec request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_UpdateTbla, null, options, request);
      }
      public virtual global::Rest.TblaRec DeleteTbla(global::Rest.TblaRec request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return DeleteTbla(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual global::Rest.TblaRec DeleteTbla(global::Rest.TblaRec request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_DeleteTbla, null, options, request);
      }
      public virtual grpc::AsyncUnaryCall<global::Rest.TblaRec> DeleteTblaAsync(global::Rest.TblaRec request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return DeleteTblaAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual grpc::AsyncUnaryCall<global::Rest.TblaRec> DeleteTblaAsync(global::Rest.TblaRec request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_DeleteTbla, null, options, request);
      }
      /// <summary>Creates a new instance of client from given <c>ClientBaseConfiguration</c>.</summary>
      protected override CRUDsClient NewInstance(ClientBaseConfiguration configuration)
      {
        return new CRUDsClient(configuration);
      }
    }

    /// <summary>Creates service definition that can be registered with a server</summary>
    /// <param name="serviceImpl">An object implementing the server-side handling logic.</param>
    public static grpc::ServerServiceDefinition BindService(CRUDsBase serviceImpl)
    {
      return grpc::ServerServiceDefinition.CreateBuilder()
          .AddMethod(__Method_SelectTbla, serviceImpl.SelectTbla)
          .AddMethod(__Method_InsertTbla, serviceImpl.InsertTbla)
          .AddMethod(__Method_UpdateTbla, serviceImpl.UpdateTbla)
          .AddMethod(__Method_DeleteTbla, serviceImpl.DeleteTbla).Build();
    }

  }
}
#endregion
