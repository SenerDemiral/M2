// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: protos/rest.proto
// </auto-generated>
// Original file comments:
// Copyright 2015 gRPC authors.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
#pragma warning disable 1591
#region Designer generated code

using grpc = global::Grpc.Core;

namespace Rest {
  /// <summary>
  /// The CRUDs service definition.
  /// </summary>
  public static partial class CRUDs
  {
    static readonly string __ServiceName = "rest.CRUDs";

    static readonly grpc::Marshaller<global::Rest.QryProxy> __Marshaller_QryProxy = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Rest.QryProxy.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Rest.TblaProxy> __Marshaller_TblaProxy = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Rest.TblaProxy.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Rest.AHPproxy> __Marshaller_AHPproxy = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Rest.AHPproxy.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Rest.AFBproxy> __Marshaller_AFBproxy = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Rest.AFBproxy.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Rest.PKproxy> __Marshaller_PKproxy = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Rest.PKproxy.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Rest.AFDproxy> __Marshaller_AFDproxy = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Rest.AFDproxy.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Rest.ABBproxy> __Marshaller_ABBproxy = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Rest.ABBproxy.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Rest.ABDproxy> __Marshaller_ABDproxy = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Rest.ABDproxy.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Rest.XGTproxy> __Marshaller_XGTproxy = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Rest.XGTproxy.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Rest.XDKproxy> __Marshaller_XDKproxy = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Rest.XDKproxy.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Rest.KMTproxy> __Marshaller_KMTproxy = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Rest.KMTproxy.Parser.ParseFrom);

    static readonly grpc::Method<global::Rest.QryProxy, global::Rest.TblaProxy> __Method_TblaFill = new grpc::Method<global::Rest.QryProxy, global::Rest.TblaProxy>(
        grpc::MethodType.ServerStreaming,
        __ServiceName,
        "TblaFill",
        __Marshaller_QryProxy,
        __Marshaller_TblaProxy);

    static readonly grpc::Method<global::Rest.TblaProxy, global::Rest.TblaProxy> __Method_TblaUpdate = new grpc::Method<global::Rest.TblaProxy, global::Rest.TblaProxy>(
        grpc::MethodType.Unary,
        __ServiceName,
        "TblaUpdate",
        __Marshaller_TblaProxy,
        __Marshaller_TblaProxy);

    static readonly grpc::Method<global::Rest.QryProxy, global::Rest.AHPproxy> __Method_AHPfill = new grpc::Method<global::Rest.QryProxy, global::Rest.AHPproxy>(
        grpc::MethodType.ServerStreaming,
        __ServiceName,
        "AHPfill",
        __Marshaller_QryProxy,
        __Marshaller_AHPproxy);

    static readonly grpc::Method<global::Rest.AHPproxy, global::Rest.AHPproxy> __Method_AHPupdate = new grpc::Method<global::Rest.AHPproxy, global::Rest.AHPproxy>(
        grpc::MethodType.Unary,
        __ServiceName,
        "AHPupdate",
        __Marshaller_AHPproxy,
        __Marshaller_AHPproxy);

    static readonly grpc::Method<global::Rest.QryProxy, global::Rest.AFBproxy> __Method_AFBfill = new grpc::Method<global::Rest.QryProxy, global::Rest.AFBproxy>(
        grpc::MethodType.ServerStreaming,
        __ServiceName,
        "AFBfill",
        __Marshaller_QryProxy,
        __Marshaller_AFBproxy);

    static readonly grpc::Method<global::Rest.AFBproxy, global::Rest.AFBproxy> __Method_AFBupdate = new grpc::Method<global::Rest.AFBproxy, global::Rest.AFBproxy>(
        grpc::MethodType.Unary,
        __ServiceName,
        "AFBupdate",
        __Marshaller_AFBproxy,
        __Marshaller_AFBproxy);

    static readonly grpc::Method<global::Rest.PKproxy, global::Rest.AFBproxy> __Method_AFBgetByPK = new grpc::Method<global::Rest.PKproxy, global::Rest.AFBproxy>(
        grpc::MethodType.Unary,
        __ServiceName,
        "AFBgetByPK",
        __Marshaller_PKproxy,
        __Marshaller_AFBproxy);

    static readonly grpc::Method<global::Rest.QryProxy, global::Rest.AFDproxy> __Method_AFDfill = new grpc::Method<global::Rest.QryProxy, global::Rest.AFDproxy>(
        grpc::MethodType.ServerStreaming,
        __ServiceName,
        "AFDfill",
        __Marshaller_QryProxy,
        __Marshaller_AFDproxy);

    static readonly grpc::Method<global::Rest.AFDproxy, global::Rest.AFDproxy> __Method_AFDupdate = new grpc::Method<global::Rest.AFDproxy, global::Rest.AFDproxy>(
        grpc::MethodType.Unary,
        __ServiceName,
        "AFDupdate",
        __Marshaller_AFDproxy,
        __Marshaller_AFDproxy);

    static readonly grpc::Method<global::Rest.QryProxy, global::Rest.ABBproxy> __Method_ABBfill = new grpc::Method<global::Rest.QryProxy, global::Rest.ABBproxy>(
        grpc::MethodType.ServerStreaming,
        __ServiceName,
        "ABBfill",
        __Marshaller_QryProxy,
        __Marshaller_ABBproxy);

    static readonly grpc::Method<global::Rest.ABBproxy, global::Rest.ABBproxy> __Method_ABBupdate = new grpc::Method<global::Rest.ABBproxy, global::Rest.ABBproxy>(
        grpc::MethodType.Unary,
        __ServiceName,
        "ABBupdate",
        __Marshaller_ABBproxy,
        __Marshaller_ABBproxy);

    static readonly grpc::Method<global::Rest.QryProxy, global::Rest.ABDproxy> __Method_ABDfill = new grpc::Method<global::Rest.QryProxy, global::Rest.ABDproxy>(
        grpc::MethodType.ServerStreaming,
        __ServiceName,
        "ABDfill",
        __Marshaller_QryProxy,
        __Marshaller_ABDproxy);

    static readonly grpc::Method<global::Rest.ABDproxy, global::Rest.ABDproxy> __Method_ABDupdate = new grpc::Method<global::Rest.ABDproxy, global::Rest.ABDproxy>(
        grpc::MethodType.Unary,
        __ServiceName,
        "ABDupdate",
        __Marshaller_ABDproxy,
        __Marshaller_ABDproxy);

    static readonly grpc::Method<global::Rest.QryProxy, global::Rest.XGTproxy> __Method_XGTfill = new grpc::Method<global::Rest.QryProxy, global::Rest.XGTproxy>(
        grpc::MethodType.ServerStreaming,
        __ServiceName,
        "XGTfill",
        __Marshaller_QryProxy,
        __Marshaller_XGTproxy);

    static readonly grpc::Method<global::Rest.XGTproxy, global::Rest.XGTproxy> __Method_XGTupdate = new grpc::Method<global::Rest.XGTproxy, global::Rest.XGTproxy>(
        grpc::MethodType.Unary,
        __ServiceName,
        "XGTupdate",
        __Marshaller_XGTproxy,
        __Marshaller_XGTproxy);

    static readonly grpc::Method<global::Rest.QryProxy, global::Rest.XDKproxy> __Method_XDKfill = new grpc::Method<global::Rest.QryProxy, global::Rest.XDKproxy>(
        grpc::MethodType.ServerStreaming,
        __ServiceName,
        "XDKfill",
        __Marshaller_QryProxy,
        __Marshaller_XDKproxy);

    static readonly grpc::Method<global::Rest.XDKproxy, global::Rest.XDKproxy> __Method_XDKupdate = new grpc::Method<global::Rest.XDKproxy, global::Rest.XDKproxy>(
        grpc::MethodType.Unary,
        __ServiceName,
        "XDKupdate",
        __Marshaller_XDKproxy,
        __Marshaller_XDKproxy);

    static readonly grpc::Method<global::Rest.QryProxy, global::Rest.KMTproxy> __Method_KMTfill = new grpc::Method<global::Rest.QryProxy, global::Rest.KMTproxy>(
        grpc::MethodType.ServerStreaming,
        __ServiceName,
        "KMTfill",
        __Marshaller_QryProxy,
        __Marshaller_KMTproxy);

    static readonly grpc::Method<global::Rest.KMTproxy, global::Rest.KMTproxy> __Method_KMTupdate = new grpc::Method<global::Rest.KMTproxy, global::Rest.KMTproxy>(
        grpc::MethodType.Unary,
        __ServiceName,
        "KMTupdate",
        __Marshaller_KMTproxy,
        __Marshaller_KMTproxy);

    /// <summary>Service descriptor</summary>
    public static global::Google.Protobuf.Reflection.ServiceDescriptor Descriptor
    {
      get { return global::Rest.RestReflection.Descriptor.Services[0]; }
    }

    /// <summary>Base class for server-side implementations of CRUDs</summary>
    public abstract partial class CRUDsBase
    {
      public virtual global::System.Threading.Tasks.Task TblaFill(global::Rest.QryProxy request, grpc::IServerStreamWriter<global::Rest.TblaProxy> responseStream, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      public virtual global::System.Threading.Tasks.Task<global::Rest.TblaProxy> TblaUpdate(global::Rest.TblaProxy request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      public virtual global::System.Threading.Tasks.Task AHPfill(global::Rest.QryProxy request, grpc::IServerStreamWriter<global::Rest.AHPproxy> responseStream, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      public virtual global::System.Threading.Tasks.Task<global::Rest.AHPproxy> AHPupdate(global::Rest.AHPproxy request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      public virtual global::System.Threading.Tasks.Task AFBfill(global::Rest.QryProxy request, grpc::IServerStreamWriter<global::Rest.AFBproxy> responseStream, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      public virtual global::System.Threading.Tasks.Task<global::Rest.AFBproxy> AFBupdate(global::Rest.AFBproxy request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      public virtual global::System.Threading.Tasks.Task<global::Rest.AFBproxy> AFBgetByPK(global::Rest.PKproxy request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      public virtual global::System.Threading.Tasks.Task AFDfill(global::Rest.QryProxy request, grpc::IServerStreamWriter<global::Rest.AFDproxy> responseStream, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      public virtual global::System.Threading.Tasks.Task<global::Rest.AFDproxy> AFDupdate(global::Rest.AFDproxy request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      public virtual global::System.Threading.Tasks.Task ABBfill(global::Rest.QryProxy request, grpc::IServerStreamWriter<global::Rest.ABBproxy> responseStream, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      public virtual global::System.Threading.Tasks.Task<global::Rest.ABBproxy> ABBupdate(global::Rest.ABBproxy request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      public virtual global::System.Threading.Tasks.Task ABDfill(global::Rest.QryProxy request, grpc::IServerStreamWriter<global::Rest.ABDproxy> responseStream, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      public virtual global::System.Threading.Tasks.Task<global::Rest.ABDproxy> ABDupdate(global::Rest.ABDproxy request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      public virtual global::System.Threading.Tasks.Task XGTfill(global::Rest.QryProxy request, grpc::IServerStreamWriter<global::Rest.XGTproxy> responseStream, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      public virtual global::System.Threading.Tasks.Task<global::Rest.XGTproxy> XGTupdate(global::Rest.XGTproxy request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      public virtual global::System.Threading.Tasks.Task XDKfill(global::Rest.QryProxy request, grpc::IServerStreamWriter<global::Rest.XDKproxy> responseStream, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      public virtual global::System.Threading.Tasks.Task<global::Rest.XDKproxy> XDKupdate(global::Rest.XDKproxy request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      public virtual global::System.Threading.Tasks.Task KMTfill(global::Rest.QryProxy request, grpc::IServerStreamWriter<global::Rest.KMTproxy> responseStream, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      public virtual global::System.Threading.Tasks.Task<global::Rest.KMTproxy> KMTupdate(global::Rest.KMTproxy request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

    }

    /// <summary>Client for CRUDs</summary>
    public partial class CRUDsClient : grpc::ClientBase<CRUDsClient>
    {
      /// <summary>Creates a new client for CRUDs</summary>
      /// <param name="channel">The channel to use to make remote calls.</param>
      public CRUDsClient(grpc::Channel channel) : base(channel)
      {
      }
      /// <summary>Creates a new client for CRUDs that uses a custom <c>CallInvoker</c>.</summary>
      /// <param name="callInvoker">The callInvoker to use to make remote calls.</param>
      public CRUDsClient(grpc::CallInvoker callInvoker) : base(callInvoker)
      {
      }
      /// <summary>Protected parameterless constructor to allow creation of test doubles.</summary>
      protected CRUDsClient() : base()
      {
      }
      /// <summary>Protected constructor to allow creation of configured clients.</summary>
      /// <param name="configuration">The client configuration.</param>
      protected CRUDsClient(ClientBaseConfiguration configuration) : base(configuration)
      {
      }

      public virtual grpc::AsyncServerStreamingCall<global::Rest.TblaProxy> TblaFill(global::Rest.QryProxy request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return TblaFill(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual grpc::AsyncServerStreamingCall<global::Rest.TblaProxy> TblaFill(global::Rest.QryProxy request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncServerStreamingCall(__Method_TblaFill, null, options, request);
      }
      public virtual global::Rest.TblaProxy TblaUpdate(global::Rest.TblaProxy request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return TblaUpdate(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual global::Rest.TblaProxy TblaUpdate(global::Rest.TblaProxy request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_TblaUpdate, null, options, request);
      }
      public virtual grpc::AsyncUnaryCall<global::Rest.TblaProxy> TblaUpdateAsync(global::Rest.TblaProxy request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return TblaUpdateAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual grpc::AsyncUnaryCall<global::Rest.TblaProxy> TblaUpdateAsync(global::Rest.TblaProxy request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_TblaUpdate, null, options, request);
      }
      public virtual grpc::AsyncServerStreamingCall<global::Rest.AHPproxy> AHPfill(global::Rest.QryProxy request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return AHPfill(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual grpc::AsyncServerStreamingCall<global::Rest.AHPproxy> AHPfill(global::Rest.QryProxy request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncServerStreamingCall(__Method_AHPfill, null, options, request);
      }
      public virtual global::Rest.AHPproxy AHPupdate(global::Rest.AHPproxy request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return AHPupdate(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual global::Rest.AHPproxy AHPupdate(global::Rest.AHPproxy request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_AHPupdate, null, options, request);
      }
      public virtual grpc::AsyncUnaryCall<global::Rest.AHPproxy> AHPupdateAsync(global::Rest.AHPproxy request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return AHPupdateAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual grpc::AsyncUnaryCall<global::Rest.AHPproxy> AHPupdateAsync(global::Rest.AHPproxy request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_AHPupdate, null, options, request);
      }
      public virtual grpc::AsyncServerStreamingCall<global::Rest.AFBproxy> AFBfill(global::Rest.QryProxy request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return AFBfill(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual grpc::AsyncServerStreamingCall<global::Rest.AFBproxy> AFBfill(global::Rest.QryProxy request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncServerStreamingCall(__Method_AFBfill, null, options, request);
      }
      public virtual global::Rest.AFBproxy AFBupdate(global::Rest.AFBproxy request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return AFBupdate(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual global::Rest.AFBproxy AFBupdate(global::Rest.AFBproxy request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_AFBupdate, null, options, request);
      }
      public virtual grpc::AsyncUnaryCall<global::Rest.AFBproxy> AFBupdateAsync(global::Rest.AFBproxy request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return AFBupdateAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual grpc::AsyncUnaryCall<global::Rest.AFBproxy> AFBupdateAsync(global::Rest.AFBproxy request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_AFBupdate, null, options, request);
      }
      public virtual global::Rest.AFBproxy AFBgetByPK(global::Rest.PKproxy request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return AFBgetByPK(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual global::Rest.AFBproxy AFBgetByPK(global::Rest.PKproxy request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_AFBgetByPK, null, options, request);
      }
      public virtual grpc::AsyncUnaryCall<global::Rest.AFBproxy> AFBgetByPKAsync(global::Rest.PKproxy request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return AFBgetByPKAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual grpc::AsyncUnaryCall<global::Rest.AFBproxy> AFBgetByPKAsync(global::Rest.PKproxy request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_AFBgetByPK, null, options, request);
      }
      public virtual grpc::AsyncServerStreamingCall<global::Rest.AFDproxy> AFDfill(global::Rest.QryProxy request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return AFDfill(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual grpc::AsyncServerStreamingCall<global::Rest.AFDproxy> AFDfill(global::Rest.QryProxy request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncServerStreamingCall(__Method_AFDfill, null, options, request);
      }
      public virtual global::Rest.AFDproxy AFDupdate(global::Rest.AFDproxy request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return AFDupdate(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual global::Rest.AFDproxy AFDupdate(global::Rest.AFDproxy request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_AFDupdate, null, options, request);
      }
      public virtual grpc::AsyncUnaryCall<global::Rest.AFDproxy> AFDupdateAsync(global::Rest.AFDproxy request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return AFDupdateAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual grpc::AsyncUnaryCall<global::Rest.AFDproxy> AFDupdateAsync(global::Rest.AFDproxy request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_AFDupdate, null, options, request);
      }
      public virtual grpc::AsyncServerStreamingCall<global::Rest.ABBproxy> ABBfill(global::Rest.QryProxy request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return ABBfill(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual grpc::AsyncServerStreamingCall<global::Rest.ABBproxy> ABBfill(global::Rest.QryProxy request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncServerStreamingCall(__Method_ABBfill, null, options, request);
      }
      public virtual global::Rest.ABBproxy ABBupdate(global::Rest.ABBproxy request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return ABBupdate(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual global::Rest.ABBproxy ABBupdate(global::Rest.ABBproxy request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_ABBupdate, null, options, request);
      }
      public virtual grpc::AsyncUnaryCall<global::Rest.ABBproxy> ABBupdateAsync(global::Rest.ABBproxy request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return ABBupdateAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual grpc::AsyncUnaryCall<global::Rest.ABBproxy> ABBupdateAsync(global::Rest.ABBproxy request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_ABBupdate, null, options, request);
      }
      public virtual grpc::AsyncServerStreamingCall<global::Rest.ABDproxy> ABDfill(global::Rest.QryProxy request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return ABDfill(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual grpc::AsyncServerStreamingCall<global::Rest.ABDproxy> ABDfill(global::Rest.QryProxy request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncServerStreamingCall(__Method_ABDfill, null, options, request);
      }
      public virtual global::Rest.ABDproxy ABDupdate(global::Rest.ABDproxy request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return ABDupdate(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual global::Rest.ABDproxy ABDupdate(global::Rest.ABDproxy request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_ABDupdate, null, options, request);
      }
      public virtual grpc::AsyncUnaryCall<global::Rest.ABDproxy> ABDupdateAsync(global::Rest.ABDproxy request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return ABDupdateAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual grpc::AsyncUnaryCall<global::Rest.ABDproxy> ABDupdateAsync(global::Rest.ABDproxy request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_ABDupdate, null, options, request);
      }
      public virtual grpc::AsyncServerStreamingCall<global::Rest.XGTproxy> XGTfill(global::Rest.QryProxy request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return XGTfill(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual grpc::AsyncServerStreamingCall<global::Rest.XGTproxy> XGTfill(global::Rest.QryProxy request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncServerStreamingCall(__Method_XGTfill, null, options, request);
      }
      public virtual global::Rest.XGTproxy XGTupdate(global::Rest.XGTproxy request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return XGTupdate(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual global::Rest.XGTproxy XGTupdate(global::Rest.XGTproxy request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_XGTupdate, null, options, request);
      }
      public virtual grpc::AsyncUnaryCall<global::Rest.XGTproxy> XGTupdateAsync(global::Rest.XGTproxy request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return XGTupdateAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual grpc::AsyncUnaryCall<global::Rest.XGTproxy> XGTupdateAsync(global::Rest.XGTproxy request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_XGTupdate, null, options, request);
      }
      public virtual grpc::AsyncServerStreamingCall<global::Rest.XDKproxy> XDKfill(global::Rest.QryProxy request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return XDKfill(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual grpc::AsyncServerStreamingCall<global::Rest.XDKproxy> XDKfill(global::Rest.QryProxy request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncServerStreamingCall(__Method_XDKfill, null, options, request);
      }
      public virtual global::Rest.XDKproxy XDKupdate(global::Rest.XDKproxy request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return XDKupdate(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual global::Rest.XDKproxy XDKupdate(global::Rest.XDKproxy request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_XDKupdate, null, options, request);
      }
      public virtual grpc::AsyncUnaryCall<global::Rest.XDKproxy> XDKupdateAsync(global::Rest.XDKproxy request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return XDKupdateAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual grpc::AsyncUnaryCall<global::Rest.XDKproxy> XDKupdateAsync(global::Rest.XDKproxy request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_XDKupdate, null, options, request);
      }
      public virtual grpc::AsyncServerStreamingCall<global::Rest.KMTproxy> KMTfill(global::Rest.QryProxy request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return KMTfill(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual grpc::AsyncServerStreamingCall<global::Rest.KMTproxy> KMTfill(global::Rest.QryProxy request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncServerStreamingCall(__Method_KMTfill, null, options, request);
      }
      public virtual global::Rest.KMTproxy KMTupdate(global::Rest.KMTproxy request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return KMTupdate(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual global::Rest.KMTproxy KMTupdate(global::Rest.KMTproxy request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_KMTupdate, null, options, request);
      }
      public virtual grpc::AsyncUnaryCall<global::Rest.KMTproxy> KMTupdateAsync(global::Rest.KMTproxy request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return KMTupdateAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual grpc::AsyncUnaryCall<global::Rest.KMTproxy> KMTupdateAsync(global::Rest.KMTproxy request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_KMTupdate, null, options, request);
      }
      /// <summary>Creates a new instance of client from given <c>ClientBaseConfiguration</c>.</summary>
      protected override CRUDsClient NewInstance(ClientBaseConfiguration configuration)
      {
        return new CRUDsClient(configuration);
      }
    }

    /// <summary>Creates service definition that can be registered with a server</summary>
    /// <param name="serviceImpl">An object implementing the server-side handling logic.</param>
    public static grpc::ServerServiceDefinition BindService(CRUDsBase serviceImpl)
    {
      return grpc::ServerServiceDefinition.CreateBuilder()
          .AddMethod(__Method_TblaFill, serviceImpl.TblaFill)
          .AddMethod(__Method_TblaUpdate, serviceImpl.TblaUpdate)
          .AddMethod(__Method_AHPfill, serviceImpl.AHPfill)
          .AddMethod(__Method_AHPupdate, serviceImpl.AHPupdate)
          .AddMethod(__Method_AFBfill, serviceImpl.AFBfill)
          .AddMethod(__Method_AFBupdate, serviceImpl.AFBupdate)
          .AddMethod(__Method_AFBgetByPK, serviceImpl.AFBgetByPK)
          .AddMethod(__Method_AFDfill, serviceImpl.AFDfill)
          .AddMethod(__Method_AFDupdate, serviceImpl.AFDupdate)
          .AddMethod(__Method_ABBfill, serviceImpl.ABBfill)
          .AddMethod(__Method_ABBupdate, serviceImpl.ABBupdate)
          .AddMethod(__Method_ABDfill, serviceImpl.ABDfill)
          .AddMethod(__Method_ABDupdate, serviceImpl.ABDupdate)
          .AddMethod(__Method_XGTfill, serviceImpl.XGTfill)
          .AddMethod(__Method_XGTupdate, serviceImpl.XGTupdate)
          .AddMethod(__Method_XDKfill, serviceImpl.XDKfill)
          .AddMethod(__Method_XDKupdate, serviceImpl.XDKupdate)
          .AddMethod(__Method_KMTfill, serviceImpl.KMTfill)
          .AddMethod(__Method_KMTupdate, serviceImpl.KMTupdate).Build();
    }

  }
}
#endregion
