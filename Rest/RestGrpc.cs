// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: protos/rest.proto
// </auto-generated>
// Original file comments:
// Copyright 2015 gRPC authors.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
#pragma warning disable 0414, 1591
#region Designer generated code

using grpc = global::Grpc.Core;

namespace Rest {
  /// <summary>
  /// The CRUDs service definition.
  /// </summary>
  public static partial class CRUDs
  {
    static readonly string __ServiceName = "rest.CRUDs";

    static readonly grpc::Marshaller<global::Rest.QryProxy> __Marshaller_rest_QryProxy = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Rest.QryProxy.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Rest.TblaProxy> __Marshaller_rest_TblaProxy = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Rest.TblaProxy.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Rest.ABKproxy> __Marshaller_rest_ABKproxy = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Rest.ABKproxy.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Rest.AVKproxy> __Marshaller_rest_AVKproxy = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Rest.AVKproxy.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Rest.AN2Hproxy> __Marshaller_rest_AN2Hproxy = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Rest.AN2Hproxy.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Rest.AHPproxy> __Marshaller_rest_AHPproxy = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Rest.AHPproxy.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Rest.AVMproxy> __Marshaller_rest_AVMproxy = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Rest.AVMproxy.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Rest.QryMDproxy> __Marshaller_rest_QryMDproxy = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Rest.QryMDproxy.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Rest.AVDproxy> __Marshaller_rest_AVDproxy = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Rest.AVDproxy.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Rest.ABMproxy> __Marshaller_rest_ABMproxy = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Rest.ABMproxy.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Rest.ABDproxy> __Marshaller_rest_ABDproxy = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Rest.ABDproxy.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Rest.TOMproxy> __Marshaller_rest_TOMproxy = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Rest.TOMproxy.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Rest.TODproxy> __Marshaller_rest_TODproxy = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Rest.TODproxy.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Rest.TWMproxy> __Marshaller_rest_TWMproxy = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Rest.TWMproxy.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Rest.TWDproxy> __Marshaller_rest_TWDproxy = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Rest.TWDproxy.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Rest.XGTproxy> __Marshaller_rest_XGTproxy = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Rest.XGTproxy.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Rest.XDKproxy> __Marshaller_rest_XDKproxy = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Rest.XDKproxy.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Rest.UUUproxy> __Marshaller_rest_UUUproxy = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Rest.UUUproxy.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Rest.UYTproxy> __Marshaller_rest_UYTproxy = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Rest.UYTproxy.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Rest.UYHproxy> __Marshaller_rest_UYHproxy = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Rest.UYHproxy.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Rest.NNTproxy> __Marshaller_rest_NNTproxy = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Rest.NNTproxy.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Rest.PKproxy> __Marshaller_rest_PKproxy = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Rest.PKproxy.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Rest.NNRproxy> __Marshaller_rest_NNRproxy = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Rest.NNRproxy.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Rest.NeParentsProxy> __Marshaller_rest_NeParentsProxy = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Rest.NeParentsProxy.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Rest.NeTreeProxy> __Marshaller_rest_NeTreeProxy = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Rest.NeTreeProxy.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Rest.NodesInParentsProxy> __Marshaller_rest_NodesInParentsProxy = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Rest.NodesInParentsProxy.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Rest.KFTproxy> __Marshaller_rest_KFTproxy = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Rest.KFTproxy.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Rest.QryPproxy> __Marshaller_rest_QryPproxy = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Rest.QryPproxy.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Rest.KCTproxy> __Marshaller_rest_KCTproxy = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Rest.KCTproxy.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Rest.KPTproxy> __Marshaller_rest_KPTproxy = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Rest.KPTproxy.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Rest.KDTproxy> __Marshaller_rest_KDTproxy = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Rest.KDTproxy.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Rest.KDTtreeProxy> __Marshaller_rest_KDTtreeProxy = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Rest.KDTtreeProxy.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Rest.KHTproxy> __Marshaller_rest_KHTproxy = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Rest.KHTproxy.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Rest.QryBRproxy> __Marshaller_rest_QryBRproxy = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Rest.QryBRproxy.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Rest.BRproxy> __Marshaller_rest_BRproxy = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Rest.BRproxy.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Rest.BRparentsProxy> __Marshaller_rest_BRparentsProxy = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Rest.BRparentsProxy.Parser.ParseFrom);

    static readonly grpc::Method<global::Rest.QryProxy, global::Rest.TblaProxy> __Method_TblaFill = new grpc::Method<global::Rest.QryProxy, global::Rest.TblaProxy>(
        grpc::MethodType.ServerStreaming,
        __ServiceName,
        "TblaFill",
        __Marshaller_rest_QryProxy,
        __Marshaller_rest_TblaProxy);

    static readonly grpc::Method<global::Rest.TblaProxy, global::Rest.TblaProxy> __Method_TblaUpdate = new grpc::Method<global::Rest.TblaProxy, global::Rest.TblaProxy>(
        grpc::MethodType.Unary,
        __ServiceName,
        "TblaUpdate",
        __Marshaller_rest_TblaProxy,
        __Marshaller_rest_TblaProxy);

    static readonly grpc::Method<global::Rest.QryProxy, global::Rest.ABKproxy> __Method_ABKfill = new grpc::Method<global::Rest.QryProxy, global::Rest.ABKproxy>(
        grpc::MethodType.ServerStreaming,
        __ServiceName,
        "ABKfill",
        __Marshaller_rest_QryProxy,
        __Marshaller_rest_ABKproxy);

    static readonly grpc::Method<global::Rest.ABKproxy, global::Rest.ABKproxy> __Method_ABKupdate = new grpc::Method<global::Rest.ABKproxy, global::Rest.ABKproxy>(
        grpc::MethodType.Unary,
        __ServiceName,
        "ABKupdate",
        __Marshaller_rest_ABKproxy,
        __Marshaller_rest_ABKproxy);

    static readonly grpc::Method<global::Rest.QryProxy, global::Rest.AVKproxy> __Method_AVKfill = new grpc::Method<global::Rest.QryProxy, global::Rest.AVKproxy>(
        grpc::MethodType.ServerStreaming,
        __ServiceName,
        "AVKfill",
        __Marshaller_rest_QryProxy,
        __Marshaller_rest_AVKproxy);

    static readonly grpc::Method<global::Rest.AVKproxy, global::Rest.AVKproxy> __Method_AVKupdate = new grpc::Method<global::Rest.AVKproxy, global::Rest.AVKproxy>(
        grpc::MethodType.Unary,
        __ServiceName,
        "AVKupdate",
        __Marshaller_rest_AVKproxy,
        __Marshaller_rest_AVKproxy);

    static readonly grpc::Method<global::Rest.QryProxy, global::Rest.AN2Hproxy> __Method_AN2Hfill = new grpc::Method<global::Rest.QryProxy, global::Rest.AN2Hproxy>(
        grpc::MethodType.ServerStreaming,
        __ServiceName,
        "AN2Hfill",
        __Marshaller_rest_QryProxy,
        __Marshaller_rest_AN2Hproxy);

    static readonly grpc::Method<global::Rest.AN2Hproxy, global::Rest.AN2Hproxy> __Method_AN2Hupdate = new grpc::Method<global::Rest.AN2Hproxy, global::Rest.AN2Hproxy>(
        grpc::MethodType.Unary,
        __ServiceName,
        "AN2Hupdate",
        __Marshaller_rest_AN2Hproxy,
        __Marshaller_rest_AN2Hproxy);

    static readonly grpc::Method<global::Rest.QryProxy, global::Rest.AHPproxy> __Method_AHPfill = new grpc::Method<global::Rest.QryProxy, global::Rest.AHPproxy>(
        grpc::MethodType.ServerStreaming,
        __ServiceName,
        "AHPfill",
        __Marshaller_rest_QryProxy,
        __Marshaller_rest_AHPproxy);

    static readonly grpc::Method<global::Rest.AHPproxy, global::Rest.AHPproxy> __Method_AHPupdate = new grpc::Method<global::Rest.AHPproxy, global::Rest.AHPproxy>(
        grpc::MethodType.Unary,
        __ServiceName,
        "AHPupdate",
        __Marshaller_rest_AHPproxy,
        __Marshaller_rest_AHPproxy);

    static readonly grpc::Method<global::Rest.QryProxy, global::Rest.AVMproxy> __Method_AVMfill = new grpc::Method<global::Rest.QryProxy, global::Rest.AVMproxy>(
        grpc::MethodType.ServerStreaming,
        __ServiceName,
        "AVMfill",
        __Marshaller_rest_QryProxy,
        __Marshaller_rest_AVMproxy);

    static readonly grpc::Method<global::Rest.AVMproxy, global::Rest.AVMproxy> __Method_AVMupdate = new grpc::Method<global::Rest.AVMproxy, global::Rest.AVMproxy>(
        grpc::MethodType.Unary,
        __ServiceName,
        "AVMupdate",
        __Marshaller_rest_AVMproxy,
        __Marshaller_rest_AVMproxy);

    static readonly grpc::Method<global::Rest.QryMDproxy, global::Rest.AVDproxy> __Method_AVDfill = new grpc::Method<global::Rest.QryMDproxy, global::Rest.AVDproxy>(
        grpc::MethodType.ServerStreaming,
        __ServiceName,
        "AVDfill",
        __Marshaller_rest_QryMDproxy,
        __Marshaller_rest_AVDproxy);

    static readonly grpc::Method<global::Rest.AVDproxy, global::Rest.AVDproxy> __Method_AVDupdate = new grpc::Method<global::Rest.AVDproxy, global::Rest.AVDproxy>(
        grpc::MethodType.Unary,
        __ServiceName,
        "AVDupdate",
        __Marshaller_rest_AVDproxy,
        __Marshaller_rest_AVDproxy);

    static readonly grpc::Method<global::Rest.QryProxy, global::Rest.ABMproxy> __Method_ABMfill = new grpc::Method<global::Rest.QryProxy, global::Rest.ABMproxy>(
        grpc::MethodType.ServerStreaming,
        __ServiceName,
        "ABMfill",
        __Marshaller_rest_QryProxy,
        __Marshaller_rest_ABMproxy);

    static readonly grpc::Method<global::Rest.ABMproxy, global::Rest.ABMproxy> __Method_ABMupdate = new grpc::Method<global::Rest.ABMproxy, global::Rest.ABMproxy>(
        grpc::MethodType.Unary,
        __ServiceName,
        "ABMupdate",
        __Marshaller_rest_ABMproxy,
        __Marshaller_rest_ABMproxy);

    static readonly grpc::Method<global::Rest.QryMDproxy, global::Rest.ABDproxy> __Method_ABDfill = new grpc::Method<global::Rest.QryMDproxy, global::Rest.ABDproxy>(
        grpc::MethodType.ServerStreaming,
        __ServiceName,
        "ABDfill",
        __Marshaller_rest_QryMDproxy,
        __Marshaller_rest_ABDproxy);

    static readonly grpc::Method<global::Rest.ABDproxy, global::Rest.ABDproxy> __Method_ABDupdate = new grpc::Method<global::Rest.ABDproxy, global::Rest.ABDproxy>(
        grpc::MethodType.Unary,
        __ServiceName,
        "ABDupdate",
        __Marshaller_rest_ABDproxy,
        __Marshaller_rest_ABDproxy);

    static readonly grpc::Method<global::Rest.QryProxy, global::Rest.TOMproxy> __Method_TOMfill = new grpc::Method<global::Rest.QryProxy, global::Rest.TOMproxy>(
        grpc::MethodType.ServerStreaming,
        __ServiceName,
        "TOMfill",
        __Marshaller_rest_QryProxy,
        __Marshaller_rest_TOMproxy);

    static readonly grpc::Method<global::Rest.TOMproxy, global::Rest.TOMproxy> __Method_TOMupdate = new grpc::Method<global::Rest.TOMproxy, global::Rest.TOMproxy>(
        grpc::MethodType.Unary,
        __ServiceName,
        "TOMupdate",
        __Marshaller_rest_TOMproxy,
        __Marshaller_rest_TOMproxy);

    static readonly grpc::Method<global::Rest.QryMDproxy, global::Rest.TODproxy> __Method_TODfill = new grpc::Method<global::Rest.QryMDproxy, global::Rest.TODproxy>(
        grpc::MethodType.ServerStreaming,
        __ServiceName,
        "TODfill",
        __Marshaller_rest_QryMDproxy,
        __Marshaller_rest_TODproxy);

    static readonly grpc::Method<global::Rest.TODproxy, global::Rest.TODproxy> __Method_TODupdate = new grpc::Method<global::Rest.TODproxy, global::Rest.TODproxy>(
        grpc::MethodType.Unary,
        __ServiceName,
        "TODupdate",
        __Marshaller_rest_TODproxy,
        __Marshaller_rest_TODproxy);

    static readonly grpc::Method<global::Rest.QryProxy, global::Rest.TWMproxy> __Method_TWMfill = new grpc::Method<global::Rest.QryProxy, global::Rest.TWMproxy>(
        grpc::MethodType.ServerStreaming,
        __ServiceName,
        "TWMfill",
        __Marshaller_rest_QryProxy,
        __Marshaller_rest_TWMproxy);

    static readonly grpc::Method<global::Rest.TWMproxy, global::Rest.TWMproxy> __Method_TWMupdate = new grpc::Method<global::Rest.TWMproxy, global::Rest.TWMproxy>(
        grpc::MethodType.Unary,
        __ServiceName,
        "TWMupdate",
        __Marshaller_rest_TWMproxy,
        __Marshaller_rest_TWMproxy);

    static readonly grpc::Method<global::Rest.QryMDproxy, global::Rest.TWDproxy> __Method_TWDfill = new grpc::Method<global::Rest.QryMDproxy, global::Rest.TWDproxy>(
        grpc::MethodType.ServerStreaming,
        __ServiceName,
        "TWDfill",
        __Marshaller_rest_QryMDproxy,
        __Marshaller_rest_TWDproxy);

    static readonly grpc::Method<global::Rest.TWDproxy, global::Rest.TWDproxy> __Method_TWDupdate = new grpc::Method<global::Rest.TWDproxy, global::Rest.TWDproxy>(
        grpc::MethodType.Unary,
        __ServiceName,
        "TWDupdate",
        __Marshaller_rest_TWDproxy,
        __Marshaller_rest_TWDproxy);

    static readonly grpc::Method<global::Rest.QryProxy, global::Rest.XGTproxy> __Method_XGTfill = new grpc::Method<global::Rest.QryProxy, global::Rest.XGTproxy>(
        grpc::MethodType.ServerStreaming,
        __ServiceName,
        "XGTfill",
        __Marshaller_rest_QryProxy,
        __Marshaller_rest_XGTproxy);

    static readonly grpc::Method<global::Rest.XGTproxy, global::Rest.XGTproxy> __Method_XGTupdate = new grpc::Method<global::Rest.XGTproxy, global::Rest.XGTproxy>(
        grpc::MethodType.Unary,
        __ServiceName,
        "XGTupdate",
        __Marshaller_rest_XGTproxy,
        __Marshaller_rest_XGTproxy);

    static readonly grpc::Method<global::Rest.QryProxy, global::Rest.XDKproxy> __Method_XDKfill = new grpc::Method<global::Rest.QryProxy, global::Rest.XDKproxy>(
        grpc::MethodType.ServerStreaming,
        __ServiceName,
        "XDKfill",
        __Marshaller_rest_QryProxy,
        __Marshaller_rest_XDKproxy);

    static readonly grpc::Method<global::Rest.XDKproxy, global::Rest.XDKproxy> __Method_XDKupdate = new grpc::Method<global::Rest.XDKproxy, global::Rest.XDKproxy>(
        grpc::MethodType.Unary,
        __ServiceName,
        "XDKupdate",
        __Marshaller_rest_XDKproxy,
        __Marshaller_rest_XDKproxy);

    static readonly grpc::Method<global::Rest.QryProxy, global::Rest.UUUproxy> __Method_UUUfill = new grpc::Method<global::Rest.QryProxy, global::Rest.UUUproxy>(
        grpc::MethodType.ServerStreaming,
        __ServiceName,
        "UUUfill",
        __Marshaller_rest_QryProxy,
        __Marshaller_rest_UUUproxy);

    static readonly grpc::Method<global::Rest.UUUproxy, global::Rest.UUUproxy> __Method_UUUupdate = new grpc::Method<global::Rest.UUUproxy, global::Rest.UUUproxy>(
        grpc::MethodType.Unary,
        __ServiceName,
        "UUUupdate",
        __Marshaller_rest_UUUproxy,
        __Marshaller_rest_UUUproxy);

    static readonly grpc::Method<global::Rest.QryProxy, global::Rest.UYTproxy> __Method_UYTfill = new grpc::Method<global::Rest.QryProxy, global::Rest.UYTproxy>(
        grpc::MethodType.ServerStreaming,
        __ServiceName,
        "UYTfill",
        __Marshaller_rest_QryProxy,
        __Marshaller_rest_UYTproxy);

    static readonly grpc::Method<global::Rest.UYTproxy, global::Rest.UYTproxy> __Method_UYTupdate = new grpc::Method<global::Rest.UYTproxy, global::Rest.UYTproxy>(
        grpc::MethodType.Unary,
        __ServiceName,
        "UYTupdate",
        __Marshaller_rest_UYTproxy,
        __Marshaller_rest_UYTproxy);

    static readonly grpc::Method<global::Rest.QryProxy, global::Rest.UYHproxy> __Method_UYHfill = new grpc::Method<global::Rest.QryProxy, global::Rest.UYHproxy>(
        grpc::MethodType.ServerStreaming,
        __ServiceName,
        "UYHfill",
        __Marshaller_rest_QryProxy,
        __Marshaller_rest_UYHproxy);

    static readonly grpc::Method<global::Rest.UYHproxy, global::Rest.UYHproxy> __Method_UYHupdate = new grpc::Method<global::Rest.UYHproxy, global::Rest.UYHproxy>(
        grpc::MethodType.Unary,
        __ServiceName,
        "UYHupdate",
        __Marshaller_rest_UYHproxy,
        __Marshaller_rest_UYHproxy);

    static readonly grpc::Method<global::Rest.QryProxy, global::Rest.NNTproxy> __Method_NNTfill = new grpc::Method<global::Rest.QryProxy, global::Rest.NNTproxy>(
        grpc::MethodType.ServerStreaming,
        __ServiceName,
        "NNTfill",
        __Marshaller_rest_QryProxy,
        __Marshaller_rest_NNTproxy);

    static readonly grpc::Method<global::Rest.NNTproxy, global::Rest.NNTproxy> __Method_NNTupdate = new grpc::Method<global::Rest.NNTproxy, global::Rest.NNTproxy>(
        grpc::MethodType.Unary,
        __ServiceName,
        "NNTupdate",
        __Marshaller_rest_NNTproxy,
        __Marshaller_rest_NNTproxy);

    static readonly grpc::Method<global::Rest.PKproxy, global::Rest.NNRproxy> __Method_NNRfill = new grpc::Method<global::Rest.PKproxy, global::Rest.NNRproxy>(
        grpc::MethodType.ServerStreaming,
        __ServiceName,
        "NNRfill",
        __Marshaller_rest_PKproxy,
        __Marshaller_rest_NNRproxy);

    static readonly grpc::Method<global::Rest.NNRproxy, global::Rest.NNRproxy> __Method_NNRupdate = new grpc::Method<global::Rest.NNRproxy, global::Rest.NNRproxy>(
        grpc::MethodType.Unary,
        __ServiceName,
        "NNRupdate",
        __Marshaller_rest_NNRproxy,
        __Marshaller_rest_NNRproxy);

    static readonly grpc::Method<global::Rest.PKproxy, global::Rest.NeParentsProxy> __Method_NeParentsFill = new grpc::Method<global::Rest.PKproxy, global::Rest.NeParentsProxy>(
        grpc::MethodType.ServerStreaming,
        __ServiceName,
        "NeParentsFill",
        __Marshaller_rest_PKproxy,
        __Marshaller_rest_NeParentsProxy);

    static readonly grpc::Method<global::Rest.QryProxy, global::Rest.NeTreeProxy> __Method_NeUpFill = new grpc::Method<global::Rest.QryProxy, global::Rest.NeTreeProxy>(
        grpc::MethodType.ServerStreaming,
        __ServiceName,
        "NeUpFill",
        __Marshaller_rest_QryProxy,
        __Marshaller_rest_NeTreeProxy);

    static readonly grpc::Method<global::Rest.QryProxy, global::Rest.NeTreeProxy> __Method_NeDownFill = new grpc::Method<global::Rest.QryProxy, global::Rest.NeTreeProxy>(
        grpc::MethodType.ServerStreaming,
        __ServiceName,
        "NeDownFill",
        __Marshaller_rest_QryProxy,
        __Marshaller_rest_NeTreeProxy);

    static readonly grpc::Method<global::Rest.QryProxy, global::Rest.NodesInParentsProxy> __Method_NodesInParentsFill = new grpc::Method<global::Rest.QryProxy, global::Rest.NodesInParentsProxy>(
        grpc::MethodType.ServerStreaming,
        __ServiceName,
        "NodesInParentsFill",
        __Marshaller_rest_QryProxy,
        __Marshaller_rest_NodesInParentsProxy);

    static readonly grpc::Method<global::Rest.QryProxy, global::Rest.KFTproxy> __Method_KFTfill = new grpc::Method<global::Rest.QryProxy, global::Rest.KFTproxy>(
        grpc::MethodType.ServerStreaming,
        __ServiceName,
        "KFTfill",
        __Marshaller_rest_QryProxy,
        __Marshaller_rest_KFTproxy);

    static readonly grpc::Method<global::Rest.KFTproxy, global::Rest.KFTproxy> __Method_KFTupdate = new grpc::Method<global::Rest.KFTproxy, global::Rest.KFTproxy>(
        grpc::MethodType.Unary,
        __ServiceName,
        "KFTupdate",
        __Marshaller_rest_KFTproxy,
        __Marshaller_rest_KFTproxy);

    static readonly grpc::Method<global::Rest.QryPproxy, global::Rest.KCTproxy> __Method_KCTfill = new grpc::Method<global::Rest.QryPproxy, global::Rest.KCTproxy>(
        grpc::MethodType.ServerStreaming,
        __ServiceName,
        "KCTfill",
        __Marshaller_rest_QryPproxy,
        __Marshaller_rest_KCTproxy);

    static readonly grpc::Method<global::Rest.KCTproxy, global::Rest.KCTproxy> __Method_KCTupdate = new grpc::Method<global::Rest.KCTproxy, global::Rest.KCTproxy>(
        grpc::MethodType.Unary,
        __ServiceName,
        "KCTupdate",
        __Marshaller_rest_KCTproxy,
        __Marshaller_rest_KCTproxy);

    static readonly grpc::Method<global::Rest.QryProxy, global::Rest.KPTproxy> __Method_KPTfill = new grpc::Method<global::Rest.QryProxy, global::Rest.KPTproxy>(
        grpc::MethodType.ServerStreaming,
        __ServiceName,
        "KPTfill",
        __Marshaller_rest_QryProxy,
        __Marshaller_rest_KPTproxy);

    static readonly grpc::Method<global::Rest.KPTproxy, global::Rest.KPTproxy> __Method_KPTupdate = new grpc::Method<global::Rest.KPTproxy, global::Rest.KPTproxy>(
        grpc::MethodType.Unary,
        __ServiceName,
        "KPTupdate",
        __Marshaller_rest_KPTproxy,
        __Marshaller_rest_KPTproxy);

    static readonly grpc::Method<global::Rest.QryProxy, global::Rest.KDTproxy> __Method_KDTfill = new grpc::Method<global::Rest.QryProxy, global::Rest.KDTproxy>(
        grpc::MethodType.ServerStreaming,
        __ServiceName,
        "KDTfill",
        __Marshaller_rest_QryProxy,
        __Marshaller_rest_KDTproxy);

    static readonly grpc::Method<global::Rest.KDTproxy, global::Rest.KDTproxy> __Method_KDTupdate = new grpc::Method<global::Rest.KDTproxy, global::Rest.KDTproxy>(
        grpc::MethodType.Unary,
        __ServiceName,
        "KDTupdate",
        __Marshaller_rest_KDTproxy,
        __Marshaller_rest_KDTproxy);

    static readonly grpc::Method<global::Rest.QryProxy, global::Rest.KDTtreeProxy> __Method_KDTtreeDownFill = new grpc::Method<global::Rest.QryProxy, global::Rest.KDTtreeProxy>(
        grpc::MethodType.ServerStreaming,
        __ServiceName,
        "KDTtreeDownFill",
        __Marshaller_rest_QryProxy,
        __Marshaller_rest_KDTtreeProxy);

    static readonly grpc::Method<global::Rest.QryPproxy, global::Rest.KHTproxy> __Method_KHTfill = new grpc::Method<global::Rest.QryPproxy, global::Rest.KHTproxy>(
        grpc::MethodType.ServerStreaming,
        __ServiceName,
        "KHTfill",
        __Marshaller_rest_QryPproxy,
        __Marshaller_rest_KHTproxy);

    static readonly grpc::Method<global::Rest.KHTproxy, global::Rest.KHTproxy> __Method_KHTupdate = new grpc::Method<global::Rest.KHTproxy, global::Rest.KHTproxy>(
        grpc::MethodType.Unary,
        __ServiceName,
        "KHTupdate",
        __Marshaller_rest_KHTproxy,
        __Marshaller_rest_KHTproxy);

    static readonly grpc::Method<global::Rest.QryBRproxy, global::Rest.BRproxy> __Method_BRfill = new grpc::Method<global::Rest.QryBRproxy, global::Rest.BRproxy>(
        grpc::MethodType.ServerStreaming,
        __ServiceName,
        "BRfill",
        __Marshaller_rest_QryBRproxy,
        __Marshaller_rest_BRproxy);

    static readonly grpc::Method<global::Rest.BRproxy, global::Rest.BRproxy> __Method_BRupdate = new grpc::Method<global::Rest.BRproxy, global::Rest.BRproxy>(
        grpc::MethodType.Unary,
        __ServiceName,
        "BRupdate",
        __Marshaller_rest_BRproxy,
        __Marshaller_rest_BRproxy);

    static readonly grpc::Method<global::Rest.PKproxy, global::Rest.BRparentsProxy> __Method_BRparentsFill = new grpc::Method<global::Rest.PKproxy, global::Rest.BRparentsProxy>(
        grpc::MethodType.ServerStreaming,
        __ServiceName,
        "BRparentsFill",
        __Marshaller_rest_PKproxy,
        __Marshaller_rest_BRparentsProxy);

    /// <summary>Service descriptor</summary>
    public static global::Google.Protobuf.Reflection.ServiceDescriptor Descriptor
    {
      get { return global::Rest.RestReflection.Descriptor.Services[0]; }
    }

    /// <summary>Base class for server-side implementations of CRUDs</summary>
    public abstract partial class CRUDsBase
    {
      public virtual global::System.Threading.Tasks.Task TblaFill(global::Rest.QryProxy request, grpc::IServerStreamWriter<global::Rest.TblaProxy> responseStream, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      public virtual global::System.Threading.Tasks.Task<global::Rest.TblaProxy> TblaUpdate(global::Rest.TblaProxy request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      ////// ACC /////
      /// BillKind
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="responseStream">Used for sending responses back to the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>A task indicating completion of the handler.</returns>
      public virtual global::System.Threading.Tasks.Task ABKfill(global::Rest.QryProxy request, grpc::IServerStreamWriter<global::Rest.ABKproxy> responseStream, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      public virtual global::System.Threading.Tasks.Task<global::Rest.ABKproxy> ABKupdate(global::Rest.ABKproxy request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// VoucherKind
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="responseStream">Used for sending responses back to the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>A task indicating completion of the handler.</returns>
      public virtual global::System.Threading.Tasks.Task AVKfill(global::Rest.QryProxy request, grpc::IServerStreamWriter<global::Rest.AVKproxy> responseStream, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      public virtual global::System.Threading.Tasks.Task<global::Rest.AVKproxy> AVKupdate(global::Rest.AVKproxy request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Ne->Hsp NeHesapKarsiliklari 
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="responseStream">Used for sending responses back to the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>A task indicating completion of the handler.</returns>
      public virtual global::System.Threading.Tasks.Task AN2Hfill(global::Rest.QryProxy request, grpc::IServerStreamWriter<global::Rest.AN2Hproxy> responseStream, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      public virtual global::System.Threading.Tasks.Task<global::Rest.AN2Hproxy> AN2Hupdate(global::Rest.AN2Hproxy request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// HesapPlani
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="responseStream">Used for sending responses back to the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>A task indicating completion of the handler.</returns>
      public virtual global::System.Threading.Tasks.Task AHPfill(global::Rest.QryProxy request, grpc::IServerStreamWriter<global::Rest.AHPproxy> responseStream, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      public virtual global::System.Threading.Tasks.Task<global::Rest.AHPproxy> AHPupdate(global::Rest.AHPproxy request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Voucher
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="responseStream">Used for sending responses back to the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>A task indicating completion of the handler.</returns>
      public virtual global::System.Threading.Tasks.Task AVMfill(global::Rest.QryProxy request, grpc::IServerStreamWriter<global::Rest.AVMproxy> responseStream, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      public virtual global::System.Threading.Tasks.Task<global::Rest.AVMproxy> AVMupdate(global::Rest.AVMproxy request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      public virtual global::System.Threading.Tasks.Task AVDfill(global::Rest.QryMDproxy request, grpc::IServerStreamWriter<global::Rest.AVDproxy> responseStream, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      public virtual global::System.Threading.Tasks.Task<global::Rest.AVDproxy> AVDupdate(global::Rest.AVDproxy request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Bill
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="responseStream">Used for sending responses back to the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>A task indicating completion of the handler.</returns>
      public virtual global::System.Threading.Tasks.Task ABMfill(global::Rest.QryProxy request, grpc::IServerStreamWriter<global::Rest.ABMproxy> responseStream, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      public virtual global::System.Threading.Tasks.Task<global::Rest.ABMproxy> ABMupdate(global::Rest.ABMproxy request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      public virtual global::System.Threading.Tasks.Task ABDfill(global::Rest.QryMDproxy request, grpc::IServerStreamWriter<global::Rest.ABDproxy> responseStream, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      public virtual global::System.Threading.Tasks.Task<global::Rest.ABDproxy> ABDupdate(global::Rest.ABDproxy request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Order/Siparis
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="responseStream">Used for sending responses back to the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>A task indicating completion of the handler.</returns>
      public virtual global::System.Threading.Tasks.Task TOMfill(global::Rest.QryProxy request, grpc::IServerStreamWriter<global::Rest.TOMproxy> responseStream, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      public virtual global::System.Threading.Tasks.Task<global::Rest.TOMproxy> TOMupdate(global::Rest.TOMproxy request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      public virtual global::System.Threading.Tasks.Task TODfill(global::Rest.QryMDproxy request, grpc::IServerStreamWriter<global::Rest.TODproxy> responseStream, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      public virtual global::System.Threading.Tasks.Task<global::Rest.TODproxy> TODupdate(global::Rest.TODproxy request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Waybill/Irsaliye
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="responseStream">Used for sending responses back to the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>A task indicating completion of the handler.</returns>
      public virtual global::System.Threading.Tasks.Task TWMfill(global::Rest.QryProxy request, grpc::IServerStreamWriter<global::Rest.TWMproxy> responseStream, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      public virtual global::System.Threading.Tasks.Task<global::Rest.TWMproxy> TWMupdate(global::Rest.TWMproxy request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      public virtual global::System.Threading.Tasks.Task TWDfill(global::Rest.QryMDproxy request, grpc::IServerStreamWriter<global::Rest.TWDproxy> responseStream, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      public virtual global::System.Threading.Tasks.Task<global::Rest.TWDproxy> TWDupdate(global::Rest.TWDproxy request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      ////// GNL /////
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="responseStream">Used for sending responses back to the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>A task indicating completion of the handler.</returns>
      public virtual global::System.Threading.Tasks.Task XGTfill(global::Rest.QryProxy request, grpc::IServerStreamWriter<global::Rest.XGTproxy> responseStream, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      public virtual global::System.Threading.Tasks.Task<global::Rest.XGTproxy> XGTupdate(global::Rest.XGTproxy request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      public virtual global::System.Threading.Tasks.Task XDKfill(global::Rest.QryProxy request, grpc::IServerStreamWriter<global::Rest.XDKproxy> responseStream, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      public virtual global::System.Threading.Tasks.Task<global::Rest.XDKproxy> XDKupdate(global::Rest.XDKproxy request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      public virtual global::System.Threading.Tasks.Task UUUfill(global::Rest.QryProxy request, grpc::IServerStreamWriter<global::Rest.UUUproxy> responseStream, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      public virtual global::System.Threading.Tasks.Task<global::Rest.UUUproxy> UUUupdate(global::Rest.UUUproxy request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      public virtual global::System.Threading.Tasks.Task UYTfill(global::Rest.QryProxy request, grpc::IServerStreamWriter<global::Rest.UYTproxy> responseStream, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      public virtual global::System.Threading.Tasks.Task<global::Rest.UYTproxy> UYTupdate(global::Rest.UYTproxy request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      public virtual global::System.Threading.Tasks.Task UYHfill(global::Rest.QryProxy request, grpc::IServerStreamWriter<global::Rest.UYHproxy> responseStream, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      public virtual global::System.Threading.Tasks.Task<global::Rest.UYHproxy> UYHupdate(global::Rest.UYHproxy request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Ne
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="responseStream">Used for sending responses back to the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>A task indicating completion of the handler.</returns>
      public virtual global::System.Threading.Tasks.Task NNTfill(global::Rest.QryProxy request, grpc::IServerStreamWriter<global::Rest.NNTproxy> responseStream, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      public virtual global::System.Threading.Tasks.Task<global::Rest.NNTproxy> NNTupdate(global::Rest.NNTproxy request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      public virtual global::System.Threading.Tasks.Task NNRfill(global::Rest.PKproxy request, grpc::IServerStreamWriter<global::Rest.NNRproxy> responseStream, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      public virtual global::System.Threading.Tasks.Task<global::Rest.NNRproxy> NNRupdate(global::Rest.NNRproxy request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      public virtual global::System.Threading.Tasks.Task NeParentsFill(global::Rest.PKproxy request, grpc::IServerStreamWriter<global::Rest.NeParentsProxy> responseStream, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      public virtual global::System.Threading.Tasks.Task NeUpFill(global::Rest.QryProxy request, grpc::IServerStreamWriter<global::Rest.NeTreeProxy> responseStream, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      public virtual global::System.Threading.Tasks.Task NeDownFill(global::Rest.QryProxy request, grpc::IServerStreamWriter<global::Rest.NeTreeProxy> responseStream, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      public virtual global::System.Threading.Tasks.Task NodesInParentsFill(global::Rest.QryProxy request, grpc::IServerStreamWriter<global::Rest.NodesInParentsProxy> responseStream, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      ////// Kim /////
      /// FirmaTanim
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="responseStream">Used for sending responses back to the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>A task indicating completion of the handler.</returns>
      public virtual global::System.Threading.Tasks.Task KFTfill(global::Rest.QryProxy request, grpc::IServerStreamWriter<global::Rest.KFTproxy> responseStream, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      public virtual global::System.Threading.Tasks.Task<global::Rest.KFTproxy> KFTupdate(global::Rest.KFTproxy request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// (Firma)ContactTanim
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="responseStream">Used for sending responses back to the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>A task indicating completion of the handler.</returns>
      public virtual global::System.Threading.Tasks.Task KCTfill(global::Rest.QryPproxy request, grpc::IServerStreamWriter<global::Rest.KCTproxy> responseStream, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      public virtual global::System.Threading.Tasks.Task<global::Rest.KCTproxy> KCTupdate(global::Rest.KCTproxy request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// PersonelTanim
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="responseStream">Used for sending responses back to the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>A task indicating completion of the handler.</returns>
      public virtual global::System.Threading.Tasks.Task KPTfill(global::Rest.QryProxy request, grpc::IServerStreamWriter<global::Rest.KPTproxy> responseStream, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      public virtual global::System.Threading.Tasks.Task<global::Rest.KPTproxy> KPTupdate(global::Rest.KPTproxy request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// DepartmanTanim
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="responseStream">Used for sending responses back to the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>A task indicating completion of the handler.</returns>
      public virtual global::System.Threading.Tasks.Task KDTfill(global::Rest.QryProxy request, grpc::IServerStreamWriter<global::Rest.KDTproxy> responseStream, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      public virtual global::System.Threading.Tasks.Task<global::Rest.KDTproxy> KDTupdate(global::Rest.KDTproxy request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      public virtual global::System.Threading.Tasks.Task KDTtreeDownFill(global::Rest.QryProxy request, grpc::IServerStreamWriter<global::Rest.KDTtreeProxy> responseStream, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// HaberlesmeTanim
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="responseStream">Used for sending responses back to the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>A task indicating completion of the handler.</returns>
      public virtual global::System.Threading.Tasks.Task KHTfill(global::Rest.QryPproxy request, grpc::IServerStreamWriter<global::Rest.KHTproxy> responseStream, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      public virtual global::System.Threading.Tasks.Task<global::Rest.KHTproxy> KHTupdate(global::Rest.KHTproxy request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// BaseRelation
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="responseStream">Used for sending responses back to the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>A task indicating completion of the handler.</returns>
      public virtual global::System.Threading.Tasks.Task BRfill(global::Rest.QryBRproxy request, grpc::IServerStreamWriter<global::Rest.BRproxy> responseStream, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      public virtual global::System.Threading.Tasks.Task<global::Rest.BRproxy> BRupdate(global::Rest.BRproxy request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      public virtual global::System.Threading.Tasks.Task BRparentsFill(global::Rest.PKproxy request, grpc::IServerStreamWriter<global::Rest.BRparentsProxy> responseStream, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

    }

    /// <summary>Client for CRUDs</summary>
    public partial class CRUDsClient : grpc::ClientBase<CRUDsClient>
    {
      /// <summary>Creates a new client for CRUDs</summary>
      /// <param name="channel">The channel to use to make remote calls.</param>
      public CRUDsClient(grpc::Channel channel) : base(channel)
      {
      }
      /// <summary>Creates a new client for CRUDs that uses a custom <c>CallInvoker</c>.</summary>
      /// <param name="callInvoker">The callInvoker to use to make remote calls.</param>
      public CRUDsClient(grpc::CallInvoker callInvoker) : base(callInvoker)
      {
      }
      /// <summary>Protected parameterless constructor to allow creation of test doubles.</summary>
      protected CRUDsClient() : base()
      {
      }
      /// <summary>Protected constructor to allow creation of configured clients.</summary>
      /// <param name="configuration">The client configuration.</param>
      protected CRUDsClient(ClientBaseConfiguration configuration) : base(configuration)
      {
      }

      public virtual grpc::AsyncServerStreamingCall<global::Rest.TblaProxy> TblaFill(global::Rest.QryProxy request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return TblaFill(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual grpc::AsyncServerStreamingCall<global::Rest.TblaProxy> TblaFill(global::Rest.QryProxy request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncServerStreamingCall(__Method_TblaFill, null, options, request);
      }
      public virtual global::Rest.TblaProxy TblaUpdate(global::Rest.TblaProxy request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return TblaUpdate(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual global::Rest.TblaProxy TblaUpdate(global::Rest.TblaProxy request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_TblaUpdate, null, options, request);
      }
      public virtual grpc::AsyncUnaryCall<global::Rest.TblaProxy> TblaUpdateAsync(global::Rest.TblaProxy request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return TblaUpdateAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual grpc::AsyncUnaryCall<global::Rest.TblaProxy> TblaUpdateAsync(global::Rest.TblaProxy request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_TblaUpdate, null, options, request);
      }
      /// <summary>
      ////// ACC /////
      /// BillKind
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncServerStreamingCall<global::Rest.ABKproxy> ABKfill(global::Rest.QryProxy request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return ABKfill(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      ////// ACC /////
      /// BillKind
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncServerStreamingCall<global::Rest.ABKproxy> ABKfill(global::Rest.QryProxy request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncServerStreamingCall(__Method_ABKfill, null, options, request);
      }
      public virtual global::Rest.ABKproxy ABKupdate(global::Rest.ABKproxy request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return ABKupdate(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual global::Rest.ABKproxy ABKupdate(global::Rest.ABKproxy request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_ABKupdate, null, options, request);
      }
      public virtual grpc::AsyncUnaryCall<global::Rest.ABKproxy> ABKupdateAsync(global::Rest.ABKproxy request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return ABKupdateAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual grpc::AsyncUnaryCall<global::Rest.ABKproxy> ABKupdateAsync(global::Rest.ABKproxy request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_ABKupdate, null, options, request);
      }
      /// <summary>
      /// VoucherKind
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncServerStreamingCall<global::Rest.AVKproxy> AVKfill(global::Rest.QryProxy request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return AVKfill(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// VoucherKind
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncServerStreamingCall<global::Rest.AVKproxy> AVKfill(global::Rest.QryProxy request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncServerStreamingCall(__Method_AVKfill, null, options, request);
      }
      public virtual global::Rest.AVKproxy AVKupdate(global::Rest.AVKproxy request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return AVKupdate(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual global::Rest.AVKproxy AVKupdate(global::Rest.AVKproxy request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_AVKupdate, null, options, request);
      }
      public virtual grpc::AsyncUnaryCall<global::Rest.AVKproxy> AVKupdateAsync(global::Rest.AVKproxy request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return AVKupdateAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual grpc::AsyncUnaryCall<global::Rest.AVKproxy> AVKupdateAsync(global::Rest.AVKproxy request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_AVKupdate, null, options, request);
      }
      /// <summary>
      /// Ne->Hsp NeHesapKarsiliklari 
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncServerStreamingCall<global::Rest.AN2Hproxy> AN2Hfill(global::Rest.QryProxy request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return AN2Hfill(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Ne->Hsp NeHesapKarsiliklari 
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncServerStreamingCall<global::Rest.AN2Hproxy> AN2Hfill(global::Rest.QryProxy request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncServerStreamingCall(__Method_AN2Hfill, null, options, request);
      }
      public virtual global::Rest.AN2Hproxy AN2Hupdate(global::Rest.AN2Hproxy request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return AN2Hupdate(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual global::Rest.AN2Hproxy AN2Hupdate(global::Rest.AN2Hproxy request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_AN2Hupdate, null, options, request);
      }
      public virtual grpc::AsyncUnaryCall<global::Rest.AN2Hproxy> AN2HupdateAsync(global::Rest.AN2Hproxy request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return AN2HupdateAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual grpc::AsyncUnaryCall<global::Rest.AN2Hproxy> AN2HupdateAsync(global::Rest.AN2Hproxy request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_AN2Hupdate, null, options, request);
      }
      /// <summary>
      /// HesapPlani
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncServerStreamingCall<global::Rest.AHPproxy> AHPfill(global::Rest.QryProxy request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return AHPfill(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// HesapPlani
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncServerStreamingCall<global::Rest.AHPproxy> AHPfill(global::Rest.QryProxy request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncServerStreamingCall(__Method_AHPfill, null, options, request);
      }
      public virtual global::Rest.AHPproxy AHPupdate(global::Rest.AHPproxy request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return AHPupdate(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual global::Rest.AHPproxy AHPupdate(global::Rest.AHPproxy request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_AHPupdate, null, options, request);
      }
      public virtual grpc::AsyncUnaryCall<global::Rest.AHPproxy> AHPupdateAsync(global::Rest.AHPproxy request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return AHPupdateAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual grpc::AsyncUnaryCall<global::Rest.AHPproxy> AHPupdateAsync(global::Rest.AHPproxy request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_AHPupdate, null, options, request);
      }
      /// <summary>
      /// Voucher
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncServerStreamingCall<global::Rest.AVMproxy> AVMfill(global::Rest.QryProxy request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return AVMfill(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Voucher
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncServerStreamingCall<global::Rest.AVMproxy> AVMfill(global::Rest.QryProxy request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncServerStreamingCall(__Method_AVMfill, null, options, request);
      }
      public virtual global::Rest.AVMproxy AVMupdate(global::Rest.AVMproxy request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return AVMupdate(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual global::Rest.AVMproxy AVMupdate(global::Rest.AVMproxy request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_AVMupdate, null, options, request);
      }
      public virtual grpc::AsyncUnaryCall<global::Rest.AVMproxy> AVMupdateAsync(global::Rest.AVMproxy request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return AVMupdateAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual grpc::AsyncUnaryCall<global::Rest.AVMproxy> AVMupdateAsync(global::Rest.AVMproxy request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_AVMupdate, null, options, request);
      }
      public virtual grpc::AsyncServerStreamingCall<global::Rest.AVDproxy> AVDfill(global::Rest.QryMDproxy request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return AVDfill(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual grpc::AsyncServerStreamingCall<global::Rest.AVDproxy> AVDfill(global::Rest.QryMDproxy request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncServerStreamingCall(__Method_AVDfill, null, options, request);
      }
      public virtual global::Rest.AVDproxy AVDupdate(global::Rest.AVDproxy request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return AVDupdate(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual global::Rest.AVDproxy AVDupdate(global::Rest.AVDproxy request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_AVDupdate, null, options, request);
      }
      public virtual grpc::AsyncUnaryCall<global::Rest.AVDproxy> AVDupdateAsync(global::Rest.AVDproxy request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return AVDupdateAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual grpc::AsyncUnaryCall<global::Rest.AVDproxy> AVDupdateAsync(global::Rest.AVDproxy request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_AVDupdate, null, options, request);
      }
      /// <summary>
      /// Bill
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncServerStreamingCall<global::Rest.ABMproxy> ABMfill(global::Rest.QryProxy request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return ABMfill(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Bill
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncServerStreamingCall<global::Rest.ABMproxy> ABMfill(global::Rest.QryProxy request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncServerStreamingCall(__Method_ABMfill, null, options, request);
      }
      public virtual global::Rest.ABMproxy ABMupdate(global::Rest.ABMproxy request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return ABMupdate(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual global::Rest.ABMproxy ABMupdate(global::Rest.ABMproxy request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_ABMupdate, null, options, request);
      }
      public virtual grpc::AsyncUnaryCall<global::Rest.ABMproxy> ABMupdateAsync(global::Rest.ABMproxy request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return ABMupdateAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual grpc::AsyncUnaryCall<global::Rest.ABMproxy> ABMupdateAsync(global::Rest.ABMproxy request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_ABMupdate, null, options, request);
      }
      public virtual grpc::AsyncServerStreamingCall<global::Rest.ABDproxy> ABDfill(global::Rest.QryMDproxy request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return ABDfill(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual grpc::AsyncServerStreamingCall<global::Rest.ABDproxy> ABDfill(global::Rest.QryMDproxy request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncServerStreamingCall(__Method_ABDfill, null, options, request);
      }
      public virtual global::Rest.ABDproxy ABDupdate(global::Rest.ABDproxy request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return ABDupdate(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual global::Rest.ABDproxy ABDupdate(global::Rest.ABDproxy request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_ABDupdate, null, options, request);
      }
      public virtual grpc::AsyncUnaryCall<global::Rest.ABDproxy> ABDupdateAsync(global::Rest.ABDproxy request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return ABDupdateAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual grpc::AsyncUnaryCall<global::Rest.ABDproxy> ABDupdateAsync(global::Rest.ABDproxy request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_ABDupdate, null, options, request);
      }
      /// <summary>
      /// Order/Siparis
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncServerStreamingCall<global::Rest.TOMproxy> TOMfill(global::Rest.QryProxy request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return TOMfill(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Order/Siparis
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncServerStreamingCall<global::Rest.TOMproxy> TOMfill(global::Rest.QryProxy request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncServerStreamingCall(__Method_TOMfill, null, options, request);
      }
      public virtual global::Rest.TOMproxy TOMupdate(global::Rest.TOMproxy request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return TOMupdate(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual global::Rest.TOMproxy TOMupdate(global::Rest.TOMproxy request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_TOMupdate, null, options, request);
      }
      public virtual grpc::AsyncUnaryCall<global::Rest.TOMproxy> TOMupdateAsync(global::Rest.TOMproxy request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return TOMupdateAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual grpc::AsyncUnaryCall<global::Rest.TOMproxy> TOMupdateAsync(global::Rest.TOMproxy request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_TOMupdate, null, options, request);
      }
      public virtual grpc::AsyncServerStreamingCall<global::Rest.TODproxy> TODfill(global::Rest.QryMDproxy request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return TODfill(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual grpc::AsyncServerStreamingCall<global::Rest.TODproxy> TODfill(global::Rest.QryMDproxy request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncServerStreamingCall(__Method_TODfill, null, options, request);
      }
      public virtual global::Rest.TODproxy TODupdate(global::Rest.TODproxy request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return TODupdate(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual global::Rest.TODproxy TODupdate(global::Rest.TODproxy request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_TODupdate, null, options, request);
      }
      public virtual grpc::AsyncUnaryCall<global::Rest.TODproxy> TODupdateAsync(global::Rest.TODproxy request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return TODupdateAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual grpc::AsyncUnaryCall<global::Rest.TODproxy> TODupdateAsync(global::Rest.TODproxy request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_TODupdate, null, options, request);
      }
      /// <summary>
      /// Waybill/Irsaliye
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncServerStreamingCall<global::Rest.TWMproxy> TWMfill(global::Rest.QryProxy request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return TWMfill(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Waybill/Irsaliye
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncServerStreamingCall<global::Rest.TWMproxy> TWMfill(global::Rest.QryProxy request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncServerStreamingCall(__Method_TWMfill, null, options, request);
      }
      public virtual global::Rest.TWMproxy TWMupdate(global::Rest.TWMproxy request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return TWMupdate(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual global::Rest.TWMproxy TWMupdate(global::Rest.TWMproxy request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_TWMupdate, null, options, request);
      }
      public virtual grpc::AsyncUnaryCall<global::Rest.TWMproxy> TWMupdateAsync(global::Rest.TWMproxy request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return TWMupdateAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual grpc::AsyncUnaryCall<global::Rest.TWMproxy> TWMupdateAsync(global::Rest.TWMproxy request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_TWMupdate, null, options, request);
      }
      public virtual grpc::AsyncServerStreamingCall<global::Rest.TWDproxy> TWDfill(global::Rest.QryMDproxy request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return TWDfill(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual grpc::AsyncServerStreamingCall<global::Rest.TWDproxy> TWDfill(global::Rest.QryMDproxy request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncServerStreamingCall(__Method_TWDfill, null, options, request);
      }
      public virtual global::Rest.TWDproxy TWDupdate(global::Rest.TWDproxy request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return TWDupdate(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual global::Rest.TWDproxy TWDupdate(global::Rest.TWDproxy request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_TWDupdate, null, options, request);
      }
      public virtual grpc::AsyncUnaryCall<global::Rest.TWDproxy> TWDupdateAsync(global::Rest.TWDproxy request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return TWDupdateAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual grpc::AsyncUnaryCall<global::Rest.TWDproxy> TWDupdateAsync(global::Rest.TWDproxy request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_TWDupdate, null, options, request);
      }
      /// <summary>
      ////// GNL /////
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncServerStreamingCall<global::Rest.XGTproxy> XGTfill(global::Rest.QryProxy request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return XGTfill(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      ////// GNL /////
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncServerStreamingCall<global::Rest.XGTproxy> XGTfill(global::Rest.QryProxy request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncServerStreamingCall(__Method_XGTfill, null, options, request);
      }
      public virtual global::Rest.XGTproxy XGTupdate(global::Rest.XGTproxy request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return XGTupdate(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual global::Rest.XGTproxy XGTupdate(global::Rest.XGTproxy request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_XGTupdate, null, options, request);
      }
      public virtual grpc::AsyncUnaryCall<global::Rest.XGTproxy> XGTupdateAsync(global::Rest.XGTproxy request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return XGTupdateAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual grpc::AsyncUnaryCall<global::Rest.XGTproxy> XGTupdateAsync(global::Rest.XGTproxy request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_XGTupdate, null, options, request);
      }
      public virtual grpc::AsyncServerStreamingCall<global::Rest.XDKproxy> XDKfill(global::Rest.QryProxy request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return XDKfill(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual grpc::AsyncServerStreamingCall<global::Rest.XDKproxy> XDKfill(global::Rest.QryProxy request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncServerStreamingCall(__Method_XDKfill, null, options, request);
      }
      public virtual global::Rest.XDKproxy XDKupdate(global::Rest.XDKproxy request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return XDKupdate(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual global::Rest.XDKproxy XDKupdate(global::Rest.XDKproxy request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_XDKupdate, null, options, request);
      }
      public virtual grpc::AsyncUnaryCall<global::Rest.XDKproxy> XDKupdateAsync(global::Rest.XDKproxy request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return XDKupdateAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual grpc::AsyncUnaryCall<global::Rest.XDKproxy> XDKupdateAsync(global::Rest.XDKproxy request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_XDKupdate, null, options, request);
      }
      public virtual grpc::AsyncServerStreamingCall<global::Rest.UUUproxy> UUUfill(global::Rest.QryProxy request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return UUUfill(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual grpc::AsyncServerStreamingCall<global::Rest.UUUproxy> UUUfill(global::Rest.QryProxy request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncServerStreamingCall(__Method_UUUfill, null, options, request);
      }
      public virtual global::Rest.UUUproxy UUUupdate(global::Rest.UUUproxy request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return UUUupdate(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual global::Rest.UUUproxy UUUupdate(global::Rest.UUUproxy request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_UUUupdate, null, options, request);
      }
      public virtual grpc::AsyncUnaryCall<global::Rest.UUUproxy> UUUupdateAsync(global::Rest.UUUproxy request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return UUUupdateAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual grpc::AsyncUnaryCall<global::Rest.UUUproxy> UUUupdateAsync(global::Rest.UUUproxy request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_UUUupdate, null, options, request);
      }
      public virtual grpc::AsyncServerStreamingCall<global::Rest.UYTproxy> UYTfill(global::Rest.QryProxy request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return UYTfill(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual grpc::AsyncServerStreamingCall<global::Rest.UYTproxy> UYTfill(global::Rest.QryProxy request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncServerStreamingCall(__Method_UYTfill, null, options, request);
      }
      public virtual global::Rest.UYTproxy UYTupdate(global::Rest.UYTproxy request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return UYTupdate(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual global::Rest.UYTproxy UYTupdate(global::Rest.UYTproxy request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_UYTupdate, null, options, request);
      }
      public virtual grpc::AsyncUnaryCall<global::Rest.UYTproxy> UYTupdateAsync(global::Rest.UYTproxy request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return UYTupdateAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual grpc::AsyncUnaryCall<global::Rest.UYTproxy> UYTupdateAsync(global::Rest.UYTproxy request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_UYTupdate, null, options, request);
      }
      public virtual grpc::AsyncServerStreamingCall<global::Rest.UYHproxy> UYHfill(global::Rest.QryProxy request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return UYHfill(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual grpc::AsyncServerStreamingCall<global::Rest.UYHproxy> UYHfill(global::Rest.QryProxy request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncServerStreamingCall(__Method_UYHfill, null, options, request);
      }
      public virtual global::Rest.UYHproxy UYHupdate(global::Rest.UYHproxy request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return UYHupdate(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual global::Rest.UYHproxy UYHupdate(global::Rest.UYHproxy request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_UYHupdate, null, options, request);
      }
      public virtual grpc::AsyncUnaryCall<global::Rest.UYHproxy> UYHupdateAsync(global::Rest.UYHproxy request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return UYHupdateAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual grpc::AsyncUnaryCall<global::Rest.UYHproxy> UYHupdateAsync(global::Rest.UYHproxy request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_UYHupdate, null, options, request);
      }
      /// <summary>
      /// Ne
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncServerStreamingCall<global::Rest.NNTproxy> NNTfill(global::Rest.QryProxy request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return NNTfill(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Ne
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncServerStreamingCall<global::Rest.NNTproxy> NNTfill(global::Rest.QryProxy request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncServerStreamingCall(__Method_NNTfill, null, options, request);
      }
      public virtual global::Rest.NNTproxy NNTupdate(global::Rest.NNTproxy request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return NNTupdate(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual global::Rest.NNTproxy NNTupdate(global::Rest.NNTproxy request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_NNTupdate, null, options, request);
      }
      public virtual grpc::AsyncUnaryCall<global::Rest.NNTproxy> NNTupdateAsync(global::Rest.NNTproxy request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return NNTupdateAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual grpc::AsyncUnaryCall<global::Rest.NNTproxy> NNTupdateAsync(global::Rest.NNTproxy request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_NNTupdate, null, options, request);
      }
      public virtual grpc::AsyncServerStreamingCall<global::Rest.NNRproxy> NNRfill(global::Rest.PKproxy request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return NNRfill(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual grpc::AsyncServerStreamingCall<global::Rest.NNRproxy> NNRfill(global::Rest.PKproxy request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncServerStreamingCall(__Method_NNRfill, null, options, request);
      }
      public virtual global::Rest.NNRproxy NNRupdate(global::Rest.NNRproxy request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return NNRupdate(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual global::Rest.NNRproxy NNRupdate(global::Rest.NNRproxy request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_NNRupdate, null, options, request);
      }
      public virtual grpc::AsyncUnaryCall<global::Rest.NNRproxy> NNRupdateAsync(global::Rest.NNRproxy request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return NNRupdateAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual grpc::AsyncUnaryCall<global::Rest.NNRproxy> NNRupdateAsync(global::Rest.NNRproxy request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_NNRupdate, null, options, request);
      }
      public virtual grpc::AsyncServerStreamingCall<global::Rest.NeParentsProxy> NeParentsFill(global::Rest.PKproxy request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return NeParentsFill(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual grpc::AsyncServerStreamingCall<global::Rest.NeParentsProxy> NeParentsFill(global::Rest.PKproxy request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncServerStreamingCall(__Method_NeParentsFill, null, options, request);
      }
      public virtual grpc::AsyncServerStreamingCall<global::Rest.NeTreeProxy> NeUpFill(global::Rest.QryProxy request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return NeUpFill(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual grpc::AsyncServerStreamingCall<global::Rest.NeTreeProxy> NeUpFill(global::Rest.QryProxy request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncServerStreamingCall(__Method_NeUpFill, null, options, request);
      }
      public virtual grpc::AsyncServerStreamingCall<global::Rest.NeTreeProxy> NeDownFill(global::Rest.QryProxy request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return NeDownFill(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual grpc::AsyncServerStreamingCall<global::Rest.NeTreeProxy> NeDownFill(global::Rest.QryProxy request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncServerStreamingCall(__Method_NeDownFill, null, options, request);
      }
      public virtual grpc::AsyncServerStreamingCall<global::Rest.NodesInParentsProxy> NodesInParentsFill(global::Rest.QryProxy request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return NodesInParentsFill(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual grpc::AsyncServerStreamingCall<global::Rest.NodesInParentsProxy> NodesInParentsFill(global::Rest.QryProxy request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncServerStreamingCall(__Method_NodesInParentsFill, null, options, request);
      }
      /// <summary>
      ////// Kim /////
      /// FirmaTanim
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncServerStreamingCall<global::Rest.KFTproxy> KFTfill(global::Rest.QryProxy request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return KFTfill(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      ////// Kim /////
      /// FirmaTanim
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncServerStreamingCall<global::Rest.KFTproxy> KFTfill(global::Rest.QryProxy request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncServerStreamingCall(__Method_KFTfill, null, options, request);
      }
      public virtual global::Rest.KFTproxy KFTupdate(global::Rest.KFTproxy request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return KFTupdate(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual global::Rest.KFTproxy KFTupdate(global::Rest.KFTproxy request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_KFTupdate, null, options, request);
      }
      public virtual grpc::AsyncUnaryCall<global::Rest.KFTproxy> KFTupdateAsync(global::Rest.KFTproxy request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return KFTupdateAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual grpc::AsyncUnaryCall<global::Rest.KFTproxy> KFTupdateAsync(global::Rest.KFTproxy request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_KFTupdate, null, options, request);
      }
      /// <summary>
      /// (Firma)ContactTanim
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncServerStreamingCall<global::Rest.KCTproxy> KCTfill(global::Rest.QryPproxy request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return KCTfill(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// (Firma)ContactTanim
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncServerStreamingCall<global::Rest.KCTproxy> KCTfill(global::Rest.QryPproxy request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncServerStreamingCall(__Method_KCTfill, null, options, request);
      }
      public virtual global::Rest.KCTproxy KCTupdate(global::Rest.KCTproxy request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return KCTupdate(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual global::Rest.KCTproxy KCTupdate(global::Rest.KCTproxy request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_KCTupdate, null, options, request);
      }
      public virtual grpc::AsyncUnaryCall<global::Rest.KCTproxy> KCTupdateAsync(global::Rest.KCTproxy request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return KCTupdateAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual grpc::AsyncUnaryCall<global::Rest.KCTproxy> KCTupdateAsync(global::Rest.KCTproxy request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_KCTupdate, null, options, request);
      }
      /// <summary>
      /// PersonelTanim
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncServerStreamingCall<global::Rest.KPTproxy> KPTfill(global::Rest.QryProxy request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return KPTfill(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// PersonelTanim
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncServerStreamingCall<global::Rest.KPTproxy> KPTfill(global::Rest.QryProxy request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncServerStreamingCall(__Method_KPTfill, null, options, request);
      }
      public virtual global::Rest.KPTproxy KPTupdate(global::Rest.KPTproxy request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return KPTupdate(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual global::Rest.KPTproxy KPTupdate(global::Rest.KPTproxy request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_KPTupdate, null, options, request);
      }
      public virtual grpc::AsyncUnaryCall<global::Rest.KPTproxy> KPTupdateAsync(global::Rest.KPTproxy request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return KPTupdateAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual grpc::AsyncUnaryCall<global::Rest.KPTproxy> KPTupdateAsync(global::Rest.KPTproxy request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_KPTupdate, null, options, request);
      }
      /// <summary>
      /// DepartmanTanim
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncServerStreamingCall<global::Rest.KDTproxy> KDTfill(global::Rest.QryProxy request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return KDTfill(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// DepartmanTanim
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncServerStreamingCall<global::Rest.KDTproxy> KDTfill(global::Rest.QryProxy request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncServerStreamingCall(__Method_KDTfill, null, options, request);
      }
      public virtual global::Rest.KDTproxy KDTupdate(global::Rest.KDTproxy request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return KDTupdate(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual global::Rest.KDTproxy KDTupdate(global::Rest.KDTproxy request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_KDTupdate, null, options, request);
      }
      public virtual grpc::AsyncUnaryCall<global::Rest.KDTproxy> KDTupdateAsync(global::Rest.KDTproxy request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return KDTupdateAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual grpc::AsyncUnaryCall<global::Rest.KDTproxy> KDTupdateAsync(global::Rest.KDTproxy request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_KDTupdate, null, options, request);
      }
      public virtual grpc::AsyncServerStreamingCall<global::Rest.KDTtreeProxy> KDTtreeDownFill(global::Rest.QryProxy request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return KDTtreeDownFill(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual grpc::AsyncServerStreamingCall<global::Rest.KDTtreeProxy> KDTtreeDownFill(global::Rest.QryProxy request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncServerStreamingCall(__Method_KDTtreeDownFill, null, options, request);
      }
      /// <summary>
      /// HaberlesmeTanim
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncServerStreamingCall<global::Rest.KHTproxy> KHTfill(global::Rest.QryPproxy request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return KHTfill(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// HaberlesmeTanim
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncServerStreamingCall<global::Rest.KHTproxy> KHTfill(global::Rest.QryPproxy request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncServerStreamingCall(__Method_KHTfill, null, options, request);
      }
      public virtual global::Rest.KHTproxy KHTupdate(global::Rest.KHTproxy request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return KHTupdate(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual global::Rest.KHTproxy KHTupdate(global::Rest.KHTproxy request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_KHTupdate, null, options, request);
      }
      public virtual grpc::AsyncUnaryCall<global::Rest.KHTproxy> KHTupdateAsync(global::Rest.KHTproxy request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return KHTupdateAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual grpc::AsyncUnaryCall<global::Rest.KHTproxy> KHTupdateAsync(global::Rest.KHTproxy request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_KHTupdate, null, options, request);
      }
      /// <summary>
      /// BaseRelation
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncServerStreamingCall<global::Rest.BRproxy> BRfill(global::Rest.QryBRproxy request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return BRfill(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// BaseRelation
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncServerStreamingCall<global::Rest.BRproxy> BRfill(global::Rest.QryBRproxy request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncServerStreamingCall(__Method_BRfill, null, options, request);
      }
      public virtual global::Rest.BRproxy BRupdate(global::Rest.BRproxy request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return BRupdate(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual global::Rest.BRproxy BRupdate(global::Rest.BRproxy request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_BRupdate, null, options, request);
      }
      public virtual grpc::AsyncUnaryCall<global::Rest.BRproxy> BRupdateAsync(global::Rest.BRproxy request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return BRupdateAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual grpc::AsyncUnaryCall<global::Rest.BRproxy> BRupdateAsync(global::Rest.BRproxy request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_BRupdate, null, options, request);
      }
      public virtual grpc::AsyncServerStreamingCall<global::Rest.BRparentsProxy> BRparentsFill(global::Rest.PKproxy request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return BRparentsFill(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual grpc::AsyncServerStreamingCall<global::Rest.BRparentsProxy> BRparentsFill(global::Rest.PKproxy request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncServerStreamingCall(__Method_BRparentsFill, null, options, request);
      }
      /// <summary>Creates a new instance of client from given <c>ClientBaseConfiguration</c>.</summary>
      protected override CRUDsClient NewInstance(ClientBaseConfiguration configuration)
      {
        return new CRUDsClient(configuration);
      }
    }

    /// <summary>Creates service definition that can be registered with a server</summary>
    /// <param name="serviceImpl">An object implementing the server-side handling logic.</param>
    public static grpc::ServerServiceDefinition BindService(CRUDsBase serviceImpl)
    {
      return grpc::ServerServiceDefinition.CreateBuilder()
          .AddMethod(__Method_TblaFill, serviceImpl.TblaFill)
          .AddMethod(__Method_TblaUpdate, serviceImpl.TblaUpdate)
          .AddMethod(__Method_ABKfill, serviceImpl.ABKfill)
          .AddMethod(__Method_ABKupdate, serviceImpl.ABKupdate)
          .AddMethod(__Method_AVKfill, serviceImpl.AVKfill)
          .AddMethod(__Method_AVKupdate, serviceImpl.AVKupdate)
          .AddMethod(__Method_AN2Hfill, serviceImpl.AN2Hfill)
          .AddMethod(__Method_AN2Hupdate, serviceImpl.AN2Hupdate)
          .AddMethod(__Method_AHPfill, serviceImpl.AHPfill)
          .AddMethod(__Method_AHPupdate, serviceImpl.AHPupdate)
          .AddMethod(__Method_AVMfill, serviceImpl.AVMfill)
          .AddMethod(__Method_AVMupdate, serviceImpl.AVMupdate)
          .AddMethod(__Method_AVDfill, serviceImpl.AVDfill)
          .AddMethod(__Method_AVDupdate, serviceImpl.AVDupdate)
          .AddMethod(__Method_ABMfill, serviceImpl.ABMfill)
          .AddMethod(__Method_ABMupdate, serviceImpl.ABMupdate)
          .AddMethod(__Method_ABDfill, serviceImpl.ABDfill)
          .AddMethod(__Method_ABDupdate, serviceImpl.ABDupdate)
          .AddMethod(__Method_TOMfill, serviceImpl.TOMfill)
          .AddMethod(__Method_TOMupdate, serviceImpl.TOMupdate)
          .AddMethod(__Method_TODfill, serviceImpl.TODfill)
          .AddMethod(__Method_TODupdate, serviceImpl.TODupdate)
          .AddMethod(__Method_TWMfill, serviceImpl.TWMfill)
          .AddMethod(__Method_TWMupdate, serviceImpl.TWMupdate)
          .AddMethod(__Method_TWDfill, serviceImpl.TWDfill)
          .AddMethod(__Method_TWDupdate, serviceImpl.TWDupdate)
          .AddMethod(__Method_XGTfill, serviceImpl.XGTfill)
          .AddMethod(__Method_XGTupdate, serviceImpl.XGTupdate)
          .AddMethod(__Method_XDKfill, serviceImpl.XDKfill)
          .AddMethod(__Method_XDKupdate, serviceImpl.XDKupdate)
          .AddMethod(__Method_UUUfill, serviceImpl.UUUfill)
          .AddMethod(__Method_UUUupdate, serviceImpl.UUUupdate)
          .AddMethod(__Method_UYTfill, serviceImpl.UYTfill)
          .AddMethod(__Method_UYTupdate, serviceImpl.UYTupdate)
          .AddMethod(__Method_UYHfill, serviceImpl.UYHfill)
          .AddMethod(__Method_UYHupdate, serviceImpl.UYHupdate)
          .AddMethod(__Method_NNTfill, serviceImpl.NNTfill)
          .AddMethod(__Method_NNTupdate, serviceImpl.NNTupdate)
          .AddMethod(__Method_NNRfill, serviceImpl.NNRfill)
          .AddMethod(__Method_NNRupdate, serviceImpl.NNRupdate)
          .AddMethod(__Method_NeParentsFill, serviceImpl.NeParentsFill)
          .AddMethod(__Method_NeUpFill, serviceImpl.NeUpFill)
          .AddMethod(__Method_NeDownFill, serviceImpl.NeDownFill)
          .AddMethod(__Method_NodesInParentsFill, serviceImpl.NodesInParentsFill)
          .AddMethod(__Method_KFTfill, serviceImpl.KFTfill)
          .AddMethod(__Method_KFTupdate, serviceImpl.KFTupdate)
          .AddMethod(__Method_KCTfill, serviceImpl.KCTfill)
          .AddMethod(__Method_KCTupdate, serviceImpl.KCTupdate)
          .AddMethod(__Method_KPTfill, serviceImpl.KPTfill)
          .AddMethod(__Method_KPTupdate, serviceImpl.KPTupdate)
          .AddMethod(__Method_KDTfill, serviceImpl.KDTfill)
          .AddMethod(__Method_KDTupdate, serviceImpl.KDTupdate)
          .AddMethod(__Method_KDTtreeDownFill, serviceImpl.KDTtreeDownFill)
          .AddMethod(__Method_KHTfill, serviceImpl.KHTfill)
          .AddMethod(__Method_KHTupdate, serviceImpl.KHTupdate)
          .AddMethod(__Method_BRfill, serviceImpl.BRfill)
          .AddMethod(__Method_BRupdate, serviceImpl.BRupdate)
          .AddMethod(__Method_BRparentsFill, serviceImpl.BRparentsFill).Build();
    }

  }
}
#endregion
